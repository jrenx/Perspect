
seq:     file format elf64-x86-64


Disassembly of section .init:

0000000000401318 <_init>:
  401318:	48 83 ec 08          	sub    $0x8,%rsp
  40131c:	48 8b 05 cd ac 20 00 	mov    0x20accd(%rip),%rax        # 60bff0 <__gmon_start__>
  401323:	48 85 c0             	test   %rax,%rax
  401326:	74 02                	je     40132a <_init+0x12>
  401328:	ff d0                	callq  *%rax
  40132a:	48 83 c4 08          	add    $0x8,%rsp
  40132e:	c3                   	retq   

Disassembly of section .plt:

0000000000401330 <.plt>:
  401330:	ff 35 d2 ac 20 00    	pushq  0x20acd2(%rip)        # 60c008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401336:	ff 25 d4 ac 20 00    	jmpq   *0x20acd4(%rip)        # 60c010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40133c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401340 <__snprintf_chk@plt>:
  401340:	ff 25 d2 ac 20 00    	jmpq   *0x20acd2(%rip)        # 60c018 <__snprintf_chk@GLIBC_2.3.4>
  401346:	68 00 00 00 00       	pushq  $0x0
  40134b:	e9 e0 ff ff ff       	jmpq   401330 <.plt>

0000000000401350 <free@plt>:
  401350:	ff 25 ca ac 20 00    	jmpq   *0x20acca(%rip)        # 60c020 <free@GLIBC_2.2.5>
  401356:	68 01 00 00 00       	pushq  $0x1
  40135b:	e9 d0 ff ff ff       	jmpq   401330 <.plt>

0000000000401360 <abort@plt>:
  401360:	ff 25 c2 ac 20 00    	jmpq   *0x20acc2(%rip)        # 60c028 <abort@GLIBC_2.2.5>
  401366:	68 02 00 00 00       	pushq  $0x2
  40136b:	e9 c0 ff ff ff       	jmpq   401330 <.plt>

0000000000401370 <__errno_location@plt>:
  401370:	ff 25 ba ac 20 00    	jmpq   *0x20acba(%rip)        # 60c030 <__errno_location@GLIBC_2.2.5>
  401376:	68 03 00 00 00       	pushq  $0x3
  40137b:	e9 b0 ff ff ff       	jmpq   401330 <.plt>

0000000000401380 <strncmp@plt>:
  401380:	ff 25 b2 ac 20 00    	jmpq   *0x20acb2(%rip)        # 60c038 <strncmp@GLIBC_2.2.5>
  401386:	68 04 00 00 00       	pushq  $0x4
  40138b:	e9 a0 ff ff ff       	jmpq   401330 <.plt>

0000000000401390 <_exit@plt>:
  401390:	ff 25 aa ac 20 00    	jmpq   *0x20acaa(%rip)        # 60c040 <_exit@GLIBC_2.2.5>
  401396:	68 05 00 00 00       	pushq  $0x5
  40139b:	e9 90 ff ff ff       	jmpq   401330 <.plt>

00000000004013a0 <strcpy@plt>:
  4013a0:	ff 25 a2 ac 20 00    	jmpq   *0x20aca2(%rip)        # 60c048 <strcpy@GLIBC_2.2.5>
  4013a6:	68 06 00 00 00       	pushq  $0x6
  4013ab:	e9 80 ff ff ff       	jmpq   401330 <.plt>

00000000004013b0 <__fpending@plt>:
  4013b0:	ff 25 9a ac 20 00    	jmpq   *0x20ac9a(%rip)        # 60c050 <__fpending@GLIBC_2.2.5>
  4013b6:	68 07 00 00 00       	pushq  $0x7
  4013bb:	e9 70 ff ff ff       	jmpq   401330 <.plt>

00000000004013c0 <reallocarray@plt>:
  4013c0:	ff 25 92 ac 20 00    	jmpq   *0x20ac92(%rip)        # 60c058 <reallocarray@GLIBC_2.26>
  4013c6:	68 08 00 00 00       	pushq  $0x8
  4013cb:	e9 60 ff ff ff       	jmpq   401330 <.plt>

00000000004013d0 <clearerr_unlocked@plt>:
  4013d0:	ff 25 8a ac 20 00    	jmpq   *0x20ac8a(%rip)        # 60c060 <clearerr_unlocked@GLIBC_2.2.5>
  4013d6:	68 09 00 00 00       	pushq  $0x9
  4013db:	e9 50 ff ff ff       	jmpq   401330 <.plt>

00000000004013e0 <textdomain@plt>:
  4013e0:	ff 25 82 ac 20 00    	jmpq   *0x20ac82(%rip)        # 60c068 <textdomain@GLIBC_2.2.5>
  4013e6:	68 0a 00 00 00       	pushq  $0xa
  4013eb:	e9 40 ff ff ff       	jmpq   401330 <.plt>

00000000004013f0 <fclose@plt>:
  4013f0:	ff 25 7a ac 20 00    	jmpq   *0x20ac7a(%rip)        # 60c070 <fclose@GLIBC_2.2.5>
  4013f6:	68 0b 00 00 00       	pushq  $0xb
  4013fb:	e9 30 ff ff ff       	jmpq   401330 <.plt>

0000000000401400 <bindtextdomain@plt>:
  401400:	ff 25 72 ac 20 00    	jmpq   *0x20ac72(%rip)        # 60c078 <bindtextdomain@GLIBC_2.2.5>
  401406:	68 0c 00 00 00       	pushq  $0xc
  40140b:	e9 20 ff ff ff       	jmpq   401330 <.plt>

0000000000401410 <dcgettext@plt>:
  401410:	ff 25 6a ac 20 00    	jmpq   *0x20ac6a(%rip)        # 60c080 <dcgettext@GLIBC_2.2.5>
  401416:	68 0d 00 00 00       	pushq  $0xd
  40141b:	e9 10 ff ff ff       	jmpq   401330 <.plt>

0000000000401420 <__ctype_get_mb_cur_max@plt>:
  401420:	ff 25 62 ac 20 00    	jmpq   *0x20ac62(%rip)        # 60c088 <__ctype_get_mb_cur_max@GLIBC_2.2.5>
  401426:	68 0e 00 00 00       	pushq  $0xe
  40142b:	e9 00 ff ff ff       	jmpq   401330 <.plt>

0000000000401430 <strlen@plt>:
  401430:	ff 25 5a ac 20 00    	jmpq   *0x20ac5a(%rip)        # 60c090 <strlen@GLIBC_2.2.5>
  401436:	68 0f 00 00 00       	pushq  $0xf
  40143b:	e9 f0 fe ff ff       	jmpq   401330 <.plt>

0000000000401440 <__stack_chk_fail@plt>:
  401440:	ff 25 52 ac 20 00    	jmpq   *0x20ac52(%rip)        # 60c098 <__stack_chk_fail@GLIBC_2.4>
  401446:	68 10 00 00 00       	pushq  $0x10
  40144b:	e9 e0 fe ff ff       	jmpq   401330 <.plt>

0000000000401450 <getopt_long@plt>:
  401450:	ff 25 4a ac 20 00    	jmpq   *0x20ac4a(%rip)        # 60c0a0 <getopt_long@GLIBC_2.2.5>
  401456:	68 11 00 00 00       	pushq  $0x11
  40145b:	e9 d0 fe ff ff       	jmpq   401330 <.plt>

0000000000401460 <mbrtowc@plt>:
  401460:	ff 25 42 ac 20 00    	jmpq   *0x20ac42(%rip)        # 60c0a8 <mbrtowc@GLIBC_2.2.5>
  401466:	68 12 00 00 00       	pushq  $0x12
  40146b:	e9 c0 fe ff ff       	jmpq   401330 <.plt>

0000000000401470 <strchr@plt>:
  401470:	ff 25 3a ac 20 00    	jmpq   *0x20ac3a(%rip)        # 60c0b0 <strchr@GLIBC_2.2.5>
  401476:	68 13 00 00 00       	pushq  $0x13
  40147b:	e9 b0 fe ff ff       	jmpq   401330 <.plt>

0000000000401480 <newlocale@plt>:
  401480:	ff 25 32 ac 20 00    	jmpq   *0x20ac32(%rip)        # 60c0b8 <newlocale@GLIBC_2.3>
  401486:	68 14 00 00 00       	pushq  $0x14
  40148b:	e9 a0 fe ff ff       	jmpq   401330 <.plt>

0000000000401490 <strrchr@plt>:
  401490:	ff 25 2a ac 20 00    	jmpq   *0x20ac2a(%rip)        # 60c0c0 <strrchr@GLIBC_2.2.5>
  401496:	68 15 00 00 00       	pushq  $0x15
  40149b:	e9 90 fe ff ff       	jmpq   401330 <.plt>

00000000004014a0 <lseek@plt>:
  4014a0:	ff 25 22 ac 20 00    	jmpq   *0x20ac22(%rip)        # 60c0c8 <lseek@GLIBC_2.2.5>
  4014a6:	68 16 00 00 00       	pushq  $0x16
  4014ab:	e9 80 fe ff ff       	jmpq   401330 <.plt>

00000000004014b0 <memset@plt>:
  4014b0:	ff 25 1a ac 20 00    	jmpq   *0x20ac1a(%rip)        # 60c0d0 <memset@GLIBC_2.2.5>
  4014b6:	68 17 00 00 00       	pushq  $0x17
  4014bb:	e9 70 fe ff ff       	jmpq   401330 <.plt>

00000000004014c0 <strspn@plt>:
  4014c0:	ff 25 12 ac 20 00    	jmpq   *0x20ac12(%rip)        # 60c0d8 <strspn@GLIBC_2.2.5>
  4014c6:	68 18 00 00 00       	pushq  $0x18
  4014cb:	e9 60 fe ff ff       	jmpq   401330 <.plt>

00000000004014d0 <strcspn@plt>:
  4014d0:	ff 25 0a ac 20 00    	jmpq   *0x20ac0a(%rip)        # 60c0e0 <strcspn@GLIBC_2.2.5>
  4014d6:	68 19 00 00 00       	pushq  $0x19
  4014db:	e9 50 fe ff ff       	jmpq   401330 <.plt>

00000000004014e0 <memcmp@plt>:
  4014e0:	ff 25 02 ac 20 00    	jmpq   *0x20ac02(%rip)        # 60c0e8 <memcmp@GLIBC_2.2.5>
  4014e6:	68 1a 00 00 00       	pushq  $0x1a
  4014eb:	e9 40 fe ff ff       	jmpq   401330 <.plt>

00000000004014f0 <fputs_unlocked@plt>:
  4014f0:	ff 25 fa ab 20 00    	jmpq   *0x20abfa(%rip)        # 60c0f0 <fputs_unlocked@GLIBC_2.2.5>
  4014f6:	68 1b 00 00 00       	pushq  $0x1b
  4014fb:	e9 30 fe ff ff       	jmpq   401330 <.plt>

0000000000401500 <calloc@plt>:
  401500:	ff 25 f2 ab 20 00    	jmpq   *0x20abf2(%rip)        # 60c0f8 <calloc@GLIBC_2.2.5>
  401506:	68 1c 00 00 00       	pushq  $0x1c
  40150b:	e9 20 fe ff ff       	jmpq   401330 <.plt>

0000000000401510 <strcmp@plt>:
  401510:	ff 25 ea ab 20 00    	jmpq   *0x20abea(%rip)        # 60c100 <strcmp@GLIBC_2.2.5>
  401516:	68 1d 00 00 00       	pushq  $0x1d
  40151b:	e9 10 fe ff ff       	jmpq   401330 <.plt>

0000000000401520 <fputc_unlocked@plt>:
  401520:	ff 25 e2 ab 20 00    	jmpq   *0x20abe2(%rip)        # 60c108 <fputc_unlocked@GLIBC_2.2.5>
  401526:	68 1e 00 00 00       	pushq  $0x1e
  40152b:	e9 00 fe ff ff       	jmpq   401330 <.plt>

0000000000401530 <strtol@plt>:
  401530:	ff 25 da ab 20 00    	jmpq   *0x20abda(%rip)        # 60c110 <strtol@GLIBC_2.2.5>
  401536:	68 1f 00 00 00       	pushq  $0x1f
  40153b:	e9 f0 fd ff ff       	jmpq   401330 <.plt>

0000000000401540 <memcpy@plt>:
  401540:	ff 25 d2 ab 20 00    	jmpq   *0x20abd2(%rip)        # 60c118 <memcpy@GLIBC_2.14>
  401546:	68 20 00 00 00       	pushq  $0x20
  40154b:	e9 e0 fd ff ff       	jmpq   401330 <.plt>

0000000000401550 <fileno@plt>:
  401550:	ff 25 ca ab 20 00    	jmpq   *0x20abca(%rip)        # 60c120 <fileno@GLIBC_2.2.5>
  401556:	68 21 00 00 00       	pushq  $0x21
  40155b:	e9 d0 fd ff ff       	jmpq   401330 <.plt>

0000000000401560 <uselocale@plt>:
  401560:	ff 25 c2 ab 20 00    	jmpq   *0x20abc2(%rip)        # 60c128 <uselocale@GLIBC_2.3>
  401566:	68 22 00 00 00       	pushq  $0x22
  40156b:	e9 c0 fd ff ff       	jmpq   401330 <.plt>

0000000000401570 <malloc@plt>:
  401570:	ff 25 ba ab 20 00    	jmpq   *0x20abba(%rip)        # 60c130 <malloc@GLIBC_2.2.5>
  401576:	68 23 00 00 00       	pushq  $0x23
  40157b:	e9 b0 fd ff ff       	jmpq   401330 <.plt>

0000000000401580 <fflush@plt>:
  401580:	ff 25 b2 ab 20 00    	jmpq   *0x20abb2(%rip)        # 60c138 <fflush@GLIBC_2.2.5>
  401586:	68 24 00 00 00       	pushq  $0x24
  40158b:	e9 a0 fd ff ff       	jmpq   401330 <.plt>

0000000000401590 <nl_langinfo@plt>:
  401590:	ff 25 aa ab 20 00    	jmpq   *0x20abaa(%rip)        # 60c140 <nl_langinfo@GLIBC_2.2.5>
  401596:	68 25 00 00 00       	pushq  $0x25
  40159b:	e9 90 fd ff ff       	jmpq   401330 <.plt>

00000000004015a0 <__freading@plt>:
  4015a0:	ff 25 a2 ab 20 00    	jmpq   *0x20aba2(%rip)        # 60c148 <__freading@GLIBC_2.2.5>
  4015a6:	68 26 00 00 00       	pushq  $0x26
  4015ab:	e9 80 fd ff ff       	jmpq   401330 <.plt>

00000000004015b0 <fwrite_unlocked@plt>:
  4015b0:	ff 25 9a ab 20 00    	jmpq   *0x20ab9a(%rip)        # 60c150 <fwrite_unlocked@GLIBC_2.2.5>
  4015b6:	68 27 00 00 00       	pushq  $0x27
  4015bb:	e9 70 fd ff ff       	jmpq   401330 <.plt>

00000000004015c0 <realloc@plt>:
  4015c0:	ff 25 92 ab 20 00    	jmpq   *0x20ab92(%rip)        # 60c158 <realloc@GLIBC_2.2.5>
  4015c6:	68 28 00 00 00       	pushq  $0x28
  4015cb:	e9 60 fd ff ff       	jmpq   401330 <.plt>

00000000004015d0 <setlocale@plt>:
  4015d0:	ff 25 8a ab 20 00    	jmpq   *0x20ab8a(%rip)        # 60c160 <setlocale@GLIBC_2.2.5>
  4015d6:	68 29 00 00 00       	pushq  $0x29
  4015db:	e9 50 fd ff ff       	jmpq   401330 <.plt>

00000000004015e0 <__printf_chk@plt>:
  4015e0:	ff 25 82 ab 20 00    	jmpq   *0x20ab82(%rip)        # 60c168 <__printf_chk@GLIBC_2.3.4>
  4015e6:	68 2a 00 00 00       	pushq  $0x2a
  4015eb:	e9 40 fd ff ff       	jmpq   401330 <.plt>

00000000004015f0 <mempcpy@plt>:
  4015f0:	ff 25 7a ab 20 00    	jmpq   *0x20ab7a(%rip)        # 60c170 <mempcpy@GLIBC_2.2.5>
  4015f6:	68 2b 00 00 00       	pushq  $0x2b
  4015fb:	e9 30 fd ff ff       	jmpq   401330 <.plt>

0000000000401600 <memmove@plt>:
  401600:	ff 25 72 ab 20 00    	jmpq   *0x20ab72(%rip)        # 60c178 <memmove@GLIBC_2.2.5>
  401606:	68 2c 00 00 00       	pushq  $0x2c
  40160b:	e9 20 fd ff ff       	jmpq   401330 <.plt>

0000000000401610 <strtold@plt>:
  401610:	ff 25 6a ab 20 00    	jmpq   *0x20ab6a(%rip)        # 60c180 <strtold@GLIBC_2.2.5>
  401616:	68 2d 00 00 00       	pushq  $0x2d
  40161b:	e9 10 fd ff ff       	jmpq   401330 <.plt>

0000000000401620 <error@plt>:
  401620:	ff 25 62 ab 20 00    	jmpq   *0x20ab62(%rip)        # 60c188 <error@GLIBC_2.2.5>
  401626:	68 2e 00 00 00       	pushq  $0x2e
  40162b:	e9 00 fd ff ff       	jmpq   401330 <.plt>

0000000000401630 <fseeko@plt>:
  401630:	ff 25 5a ab 20 00    	jmpq   *0x20ab5a(%rip)        # 60c190 <fseeko@GLIBC_2.2.5>
  401636:	68 2f 00 00 00       	pushq  $0x2f
  40163b:	e9 f0 fc ff ff       	jmpq   401330 <.plt>

0000000000401640 <__cxa_atexit@plt>:
  401640:	ff 25 52 ab 20 00    	jmpq   *0x20ab52(%rip)        # 60c198 <__cxa_atexit@GLIBC_2.2.5>
  401646:	68 30 00 00 00       	pushq  $0x30
  40164b:	e9 e0 fc ff ff       	jmpq   401330 <.plt>

0000000000401650 <exit@plt>:
  401650:	ff 25 4a ab 20 00    	jmpq   *0x20ab4a(%rip)        # 60c1a0 <exit@GLIBC_2.2.5>
  401656:	68 31 00 00 00       	pushq  $0x31
  40165b:	e9 d0 fc ff ff       	jmpq   401330 <.plt>

0000000000401660 <fwrite@plt>:
  401660:	ff 25 42 ab 20 00    	jmpq   *0x20ab42(%rip)        # 60c1a8 <fwrite@GLIBC_2.2.5>
  401666:	68 32 00 00 00       	pushq  $0x32
  40166b:	e9 c0 fc ff ff       	jmpq   401330 <.plt>

0000000000401670 <__fprintf_chk@plt>:
  401670:	ff 25 3a ab 20 00    	jmpq   *0x20ab3a(%rip)        # 60c1b0 <__fprintf_chk@GLIBC_2.3.4>
  401676:	68 33 00 00 00       	pushq  $0x33
  40167b:	e9 b0 fc ff ff       	jmpq   401330 <.plt>

0000000000401680 <mbsinit@plt>:
  401680:	ff 25 32 ab 20 00    	jmpq   *0x20ab32(%rip)        # 60c1b8 <mbsinit@GLIBC_2.2.5>
  401686:	68 34 00 00 00       	pushq  $0x34
  40168b:	e9 a0 fc ff ff       	jmpq   401330 <.plt>

0000000000401690 <iswprint@plt>:
  401690:	ff 25 2a ab 20 00    	jmpq   *0x20ab2a(%rip)        # 60c1c0 <iswprint@GLIBC_2.2.5>
  401696:	68 35 00 00 00       	pushq  $0x35
  40169b:	e9 90 fc ff ff       	jmpq   401330 <.plt>

00000000004016a0 <__ctype_b_loc@plt>:
  4016a0:	ff 25 22 ab 20 00    	jmpq   *0x20ab22(%rip)        # 60c1c8 <__ctype_b_loc@GLIBC_2.3>
  4016a6:	68 36 00 00 00       	pushq  $0x36
  4016ab:	e9 80 fc ff ff       	jmpq   401330 <.plt>

00000000004016b0 <__sprintf_chk@plt>:
  4016b0:	ff 25 1a ab 20 00    	jmpq   *0x20ab1a(%rip)        # 60c1d0 <__sprintf_chk@GLIBC_2.3.4>
  4016b6:	68 37 00 00 00       	pushq  $0x37
  4016bb:	e9 70 fc ff ff       	jmpq   401330 <.plt>

Disassembly of section .text:

00000000004016c0 <quotearg_buffer_restyled.cold>:
    case literal_quoting_style:
      elide_outer_quotes = false;
      break;

    default:
      abort ();
  4016c0:	e8 9b fc ff ff       	callq  401360 <abort@plt>

00000000004016c5 <quotearg_n_options.cold>:

  struct slotvec *sv = slotvec;

  int nslots_max = MIN (INT_MAX, IDX_MAX);
  if (! (0 <= n && n < nslots_max))
    abort ();
  4016c5:	e8 96 fc ff ff       	callq  401360 <abort@plt>

00000000004016ca <set_custom_quoting.cold>:
    abort ();
  4016ca:	e8 91 fc ff ff       	callq  401360 <abort@plt>

00000000004016cf <quotearg_n_style.cold>:
    abort ();
  4016cf:	e8 8c fc ff ff       	callq  401360 <abort@plt>

00000000004016d4 <quotearg_n_style_mem.cold>:
  4016d4:	e8 87 fc ff ff       	callq  401360 <abort@plt>

00000000004016d9 <quotearg_n_style_colon.cold>:
  4016d9:	e8 82 fc ff ff       	callq  401360 <abort@plt>

00000000004016de <quotearg_n_custom_mem.cold>:
    abort ();
  4016de:	e8 7d fc ff ff       	callq  401360 <abort@plt>

00000000004016e3 <c_strtold.cold>:
  r = STRTOD (nptr, endptr);

  int saved_errno = errno;
  if (uselocale (old_locale) == (locale_t)0)
    /* We can't switch back to the old locale.  The thread is hosed.  */
    abort ();
  4016e3:	e8 78 fc ff ff       	callq  401360 <abort@plt>

00000000004016e8 <vasnprintf.cold>:
                    break;
                  case TYPE_COUNT_LONGLONGINT_POINTER:
                    *a.arg[dp->arg_index].a.a_count_longlongint_pointer = length;
                    break;
                  default:
                    abort ();
  4016e8:	e8 73 fc ff ff       	callq  401360 <abort@plt>
              abort ();
  4016ed:	e8 6e fc ff ff       	callq  401360 <abort@plt>
  4016f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4016f9:	00 00 00 
  4016fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401700 <main>:
  return ISDIGIT (s[0]) && n == strspn (s, "0123456789");
}

int
main (int argc, char **argv)
{
  401700:	41 57                	push   %r15
  int optc;
  operand first = { 1, 1, 0 };
  operand step = { 1, 1, 0 };
  401702:	d9 e8                	fld1   
{
  401704:	41 56                	push   %r14
  401706:	49 89 f6             	mov    %rsi,%r14
  401709:	41 55                	push   %r13
  40170b:	41 54                	push   %r12
  40170d:	55                   	push   %rbp
  40170e:	53                   	push   %rbx
  40170f:	89 fb                	mov    %edi,%ebx
  401711:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp

  /* The printf(3) format used for output.  */
  char const *format_str = NULL;

  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
  401718:	48 8b 3e             	mov    (%rsi),%rdi
{
  40171b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401722:	00 00 
  401724:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  40172b:	00 
  40172c:	31 c0                	xor    %eax,%eax
  operand step = { 1, 1, 0 };
  40172e:	db bc 24 a0 00 00 00 	fstpt  0xa0(%rsp)
  401735:	48 c7 84 24 b0 00 00 	movq   $0x1,0xb0(%rsp)
  40173c:	00 01 00 00 00 
  401741:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
  401748:	00 00 00 00 
  set_program_name (argv[0]);
  40174c:	e8 ef 1c 00 00       	callq  403440 <set_program_name>
  locale_ok = !!setlocale (LC_ALL, "");
  401751:	48 8d 35 89 7c 00 00 	lea    0x7c89(%rip),%rsi        # 4093e1 <quoting_style_vals+0x81>
  401758:	bf 06 00 00 00       	mov    $0x6,%edi
  40175d:	e8 6e fe ff ff       	callq  4015d0 <setlocale@plt>
  bindtextdomain (PACKAGE, LOCALEDIR);
  401762:	48 8d 35 ee 6c 00 00 	lea    0x6cee(%rip),%rsi        # 408457 <_IO_stdin_used+0xf7>
  401769:	48 8d 3d 8d 6c 00 00 	lea    0x6c8d(%rip),%rdi        # 4083fd <_IO_stdin_used+0x9d>
  locale_ok = !!setlocale (LC_ALL, "");
  401770:	48 85 c0             	test   %rax,%rax
  401773:	0f 95 05 5f ab 20 00 	setne  0x20ab5f(%rip)        # 60c2d9 <locale_ok>
  char const *format_str = NULL;
  40177a:	31 ed                	xor    %ebp,%ebp
  bindtextdomain (PACKAGE, LOCALEDIR);
  40177c:	e8 7f fc ff ff       	callq  401400 <bindtextdomain@plt>
  textdomain (PACKAGE);
  401781:	48 8d 3d 75 6c 00 00 	lea    0x6c75(%rip),%rdi        # 4083fd <_IO_stdin_used+0x9d>
  401788:	e8 53 fc ff ff       	callq  4013e0 <textdomain@plt>

  atexit (close_stdout);
  40178d:	48 c7 c7 20 33 40 00 	mov    $0x403320,%rdi
  401794:	e8 97 6b 00 00       	callq  408330 <atexit>
  separator = "\n";

  /* We have to handle negative numbers in the command line but this
     conflicts with the command line arguments.  So explicitly check first
     whether the next argument looks like a negative number.  */
  while (optind < argc)
  401799:	48 63 15 d0 aa 20 00 	movslq 0x20aad0(%rip),%rdx        # 60c270 <optind@@GLIBC_2.2.5>
  separator = "\n";
  4017a0:	48 8d 05 39 7c 00 00 	lea    0x7c39(%rip),%rax        # 4093e0 <quoting_style_vals+0x80>
  equal_width = false;
  4017a7:	c6 05 2a ab 20 00 00 	movb   $0x0,0x20ab2a(%rip)        # 60c2d8 <equal_width>
  separator = "\n";
  4017ae:	48 89 05 1b ab 20 00 	mov    %rax,0x20ab1b(%rip)        # 60c2d0 <separator>
  while (optind < argc)
  4017b5:	39 d3                	cmp    %edx,%ebx
  4017b7:	0f 8e 9b 00 00 00    	jle    401858 <main+0x158>
        {
          /* means negative number */
          break;
        }

      optc = getopt_long (argc, argv, "+f:s:w", long_options, NULL);
  4017bd:	4c 8d 25 3c a5 20 00 	lea    0x20a53c(%rip),%r12        # 60bd00 <long_options>
      if (argv[optind][0] == '-'
  4017c4:	48 63 c2             	movslq %edx,%rax
  4017c7:	49 8b 04 c6          	mov    (%r14,%rax,8),%rax
  4017cb:	80 38 2d             	cmpb   $0x2d,(%rax)
  4017ce:	75 14                	jne    4017e4 <main+0xe4>
          && ((optc = argv[optind][1]) == '.' || ISDIGIT (optc)))
  4017d0:	0f be 40 01          	movsbl 0x1(%rax),%eax
  4017d4:	3c 2e                	cmp    $0x2e,%al
  4017d6:	0f 84 7c 00 00 00    	je     401858 <main+0x158>
  4017dc:	83 e8 30             	sub    $0x30,%eax
  4017df:	83 f8 09             	cmp    $0x9,%eax
  4017e2:	76 74                	jbe    401858 <main+0x158>
      optc = getopt_long (argc, argv, "+f:s:w", long_options, NULL);
  4017e4:	45 31 c0             	xor    %r8d,%r8d
  4017e7:	4c 89 e1             	mov    %r12,%rcx
  4017ea:	48 8d 15 7e 6c 00 00 	lea    0x6c7e(%rip),%rdx        # 40846f <_IO_stdin_used+0x10f>
  4017f1:	4c 89 f6             	mov    %r14,%rsi
  4017f4:	89 df                	mov    %ebx,%edi
  4017f6:	e8 55 fc ff ff       	callq  401450 <getopt_long@plt>
      if (optc == -1)
  4017fb:	83 f8 ff             	cmp    $0xffffffff,%eax
  4017fe:	0f 84 57 04 00 00    	je     401c5b <main+0x55b>
        break;

      switch (optc)
  401804:	83 f8 66             	cmp    $0x66,%eax
  401807:	0f 84 2c 01 00 00    	je     401939 <main+0x239>
  40180d:	7f 21                	jg     401830 <main+0x130>
  40180f:	3d 7d ff ff ff       	cmp    $0xffffff7d,%eax
  401814:	0f 84 d8 00 00 00    	je     4018f2 <main+0x1f2>
  40181a:	3d 7e ff ff ff       	cmp    $0xffffff7e,%eax
  40181f:	0f 85 c3 00 00 00    	jne    4018e8 <main+0x1e8>

        case 'w':
          equal_width = true;
          break;

        case_GETOPT_HELP_CHAR;
  401825:	31 ff                	xor    %edi,%edi
  401827:	e8 a4 12 00 00       	callq  402ad0 <usage>
  40182c:	0f 1f 40 00          	nopl   0x0(%rax)
      switch (optc)
  401830:	83 f8 73             	cmp    $0x73,%eax
  401833:	0f 84 ed 00 00 00    	je     401926 <main+0x226>
  401839:	83 f8 77             	cmp    $0x77,%eax
  40183c:	0f 85 a6 00 00 00    	jne    4018e8 <main+0x1e8>
          equal_width = true;
  401842:	c6 05 8f aa 20 00 01 	movb   $0x1,0x20aa8f(%rip)        # 60c2d8 <equal_width>
  while (optind < argc)
  401849:	48 63 15 20 aa 20 00 	movslq 0x20aa20(%rip),%rdx        # 60c270 <optind@@GLIBC_2.2.5>
  401850:	39 da                	cmp    %ebx,%edx
  401852:	0f 8c 6c ff ff ff    	jl     4017c4 <main+0xc4>
          usage (EXIT_FAILURE);
        }
    }

  unsigned int n_args = argc - optind;
  if (n_args < 1)
  401858:	89 d8                	mov    %ebx,%eax
  40185a:	29 d0                	sub    %edx,%eax
  40185c:	89 04 24             	mov    %eax,(%rsp)
  40185f:	0f 84 d0 03 00 00    	je     401c35 <main+0x535>
    {
      error (0, 0, _("missing operand"));
      usage (EXIT_FAILURE);
    }

  if (3 < n_args)
  401865:	83 3c 24 03          	cmpl   $0x3,(%rsp)
  401869:	77 4c                	ja     4018b7 <main+0x1b7>
    {
      error (0, 0, _("extra operand %s"), quote (argv[optind + 3]));
      usage (EXIT_FAILURE);
    }

  if (format_str)
  40186b:	48 85 ed             	test   %rbp,%rbp
  40186e:	0f 84 d1 00 00 00    	je     401945 <main+0x245>
  401874:	45 31 e4             	xor    %r12d,%r12d
  for (i = 0; ! (fmt[i] == '%' && fmt[i + 1] != '%'); i += (fmt[i] == '%') + 1)
  401877:	31 c0                	xor    %eax,%eax
  401879:	eb 19                	jmp    401894 <main+0x194>
  40187b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      if (!fmt[i])
  401880:	84 d2                	test   %dl,%dl
  401882:	0f 84 ff 0a 00 00    	je     402387 <main+0xc87>
  for (i = 0; ! (fmt[i] == '%' && fmt[i + 1] != '%'); i += (fmt[i] == '%') + 1)
  401888:	ba 01 00 00 00       	mov    $0x1,%edx
  40188d:	48 01 d0             	add    %rdx,%rax
  401890:	49 83 c4 01          	add    $0x1,%r12
  401894:	0f b6 54 05 00       	movzbl 0x0(%rbp,%rax,1),%edx
  401899:	80 fa 25             	cmp    $0x25,%dl
  40189c:	75 e2                	jne    401880 <main+0x180>
  40189e:	4c 8d 68 01          	lea    0x1(%rax),%r13
  4018a2:	4a 8d 7c 2d 00       	lea    0x0(%rbp,%r13,1),%rdi
  4018a7:	80 3f 25             	cmpb   $0x25,(%rdi)
  4018aa:	0f 85 be 03 00 00    	jne    401c6e <main+0x56e>
  4018b0:	ba 02 00 00 00       	mov    $0x2,%edx
  4018b5:	eb d6                	jmp    40188d <main+0x18d>
      error (0, 0, _("extra operand %s"), quote (argv[optind + 3]));
  4018b7:	49 8b 7c d6 18       	mov    0x18(%r14,%rdx,8),%rdi
  4018bc:	e8 ff 38 00 00       	callq  4051c0 <quote>
  4018c1:	ba 05 00 00 00       	mov    $0x5,%edx
  4018c6:	48 8d 35 c8 6b 00 00 	lea    0x6bc8(%rip),%rsi        # 408495 <_IO_stdin_used+0x135>
  4018cd:	49 89 c4             	mov    %rax,%r12
      if (optind < argc)
        {
          step = last;
          if (step.value == 0)
            {
              error (0, 0, _("invalid Zero increment value: %s"),
  4018d0:	31 ff                	xor    %edi,%edi
  4018d2:	e8 39 fb ff ff       	callq  401410 <dcgettext@plt>
  4018d7:	4c 89 e1             	mov    %r12,%rcx
  4018da:	31 f6                	xor    %esi,%esi
  4018dc:	31 ff                	xor    %edi,%edi
  4018de:	48 89 c2             	mov    %rax,%rdx
  4018e1:	31 c0                	xor    %eax,%eax
  4018e3:	e8 38 fd ff ff       	callq  401620 <error@plt>
                     quote (argv[optind - 1]));
              usage (EXIT_FAILURE);
  4018e8:	bf 01 00 00 00       	mov    $0x1,%edi
  4018ed:	e8 de 11 00 00       	callq  402ad0 <usage>
        case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
  4018f2:	48 8b 3d 6f a9 20 00 	mov    0x20a96f(%rip),%rdi        # 60c268 <stdout@@GLIBC_2.2.5>
  4018f9:	48 8b 0d f0 a8 20 00 	mov    0x20a8f0(%rip),%rcx        # 60c1f0 <Version>
  401900:	31 c0                	xor    %eax,%eax
  401902:	45 31 c9             	xor    %r9d,%r9d
  401905:	4c 8d 05 6a 6b 00 00 	lea    0x6b6a(%rip),%r8        # 408476 <_IO_stdin_used+0x116>
  40190c:	48 8d 15 e6 6a 00 00 	lea    0x6ae6(%rip),%rdx        # 4083f9 <_IO_stdin_used+0x99>
  401913:	48 8d 35 65 6a 00 00 	lea    0x6a65(%rip),%rsi        # 40837f <_IO_stdin_used+0x1f>
  40191a:	e8 e1 3d 00 00       	callq  405700 <version_etc>
  40191f:	31 ff                	xor    %edi,%edi
  401921:	e8 2a fd ff ff       	callq  401650 <exit@plt>
          separator = optarg;
  401926:	48 8b 05 4b a9 20 00 	mov    0x20a94b(%rip),%rax        # 60c278 <optarg@@GLIBC_2.2.5>
  40192d:	48 89 05 9c a9 20 00 	mov    %rax,0x20a99c(%rip)        # 60c2d0 <separator>
          break;
  401934:	e9 10 ff ff ff       	jmpq   401849 <main+0x149>
          format_str = optarg;
  401939:	48 8b 2d 38 a9 20 00 	mov    0x20a938(%rip),%rbp        # 60c278 <optarg@@GLIBC_2.2.5>
          break;
  401940:	e9 04 ff ff ff       	jmpq   401849 <main+0x149>
  struct layout layout = { 0, 0 };
  401945:	45 31 ed             	xor    %r13d,%r13d
  401948:	45 31 e4             	xor    %r12d,%r12d
  if (n_args != 3
  40194b:	83 3c 24 03          	cmpl   $0x3,(%rsp)
  40194f:	48 63 ca             	movslq %edx,%rcx
  401952:	0f 84 6c 04 00 00    	je     401dc4 <main+0x6c4>
  if (all_digits_p (argv[optind])
  401958:	4d 8b 3c ce          	mov    (%r14,%rcx,8),%r15
  40195c:	89 54 24 20          	mov    %edx,0x20(%rsp)
  401960:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  401965:	4c 89 ff             	mov    %r15,%rdi
  401968:	e8 d3 0c 00 00       	callq  402640 <all_digits_p>
  40196d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  401972:	48 63 54 24 20       	movslq 0x20(%rsp),%rdx
  401977:	84 c0                	test   %al,%al
  401979:	0f 85 20 06 00 00    	jne    401f9f <main+0x89f>
  40197f:	66 0f ef c9          	pxor   %xmm1,%xmm1
  401983:	f3 0f 11 4c 24 68    	movss  %xmm1,0x68(%rsp)
  last = scan_arg (argv[optind++]);
  401989:	49 8b 34 d6          	mov    (%r14,%rdx,8),%rsi
  40198d:	4c 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%r15
  401994:	00 
  401995:	8d 42 01             	lea    0x1(%rdx),%eax
  401998:	4c 89 ff             	mov    %r15,%rdi
  40199b:	89 05 cf a8 20 00    	mov    %eax,0x20a8cf(%rip)        # 60c270 <optind@@GLIBC_2.2.5>
  4019a1:	e8 0a 15 00 00       	callq  402eb0 <scan_arg>
  4019a6:	db ac 24 c0 00 00 00 	fldt   0xc0(%rsp)
  if (optind < argc)
  4019ad:	48 63 05 bc a8 20 00 	movslq 0x20a8bc(%rip),%rax        # 60c270 <optind@@GLIBC_2.2.5>
  last = scan_arg (argv[optind++]);
  4019b4:	4c 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%r10
  4019bb:	00 
  4019bc:	44 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%r8d
  4019c3:	00 
  4019c4:	db 7c 24 40          	fstpt  0x40(%rsp)
  if (optind < argc)
  4019c8:	39 d8                	cmp    %ebx,%eax
  4019ca:	0f 8c 39 05 00 00    	jl     401f09 <main+0x809>
        }
    }

  /* Try the fast method again, for integers of the form 1e1 etc.,
     or "inf" end value.  */
  if (first.precision == 0 && step.precision == 0 && last.precision == 0
  4019d0:	44 89 c0             	mov    %r8d,%eax
  4019d3:	0b 84 24 b8 00 00 00 	or     0xb8(%rsp),%eax
  4019da:	0f 84 98 08 00 00    	je     402278 <main+0xb78>
  last = scan_arg (argv[optind++]);
  4019e0:	db 6c 24 40          	fldt   0x40(%rsp)
  4019e4:	44 89 c0             	mov    %r8d,%eax
  4019e7:	4c 89 d3             	mov    %r10,%rbx
  operand first = { 1, 1, 0 };
  4019ea:	45 31 c0             	xor    %r8d,%r8d
  4019ed:	41 ba 01 00 00 00    	mov    $0x1,%r10d
  last = scan_arg (argv[optind++]);
  4019f3:	db 7c 24 30          	fstpt  0x30(%rsp)
  operand first = { 1, 1, 0 };
  4019f7:	d9 e8                	fld1   
  4019f9:	db 7c 24 40          	fstpt  0x40(%rsp)
      free (s1);
      free (s2);
      /* Upon any failure, let the more general code deal with it.  */
    }

  if (format_str == NULL)
  4019fd:	48 85 ed             	test   %rbp,%rbp
  401a00:	0f 84 2b 07 00 00    	je     402131 <main+0xa31>
  401a06:	db ac 24 a0 00 00 00 	fldt   0xa0(%rsp)
  401a0d:	db 7c 24 50          	fstpt  0x50(%rsp)
  bool out_of_range = (step < 0 ? first < last : last < first);
  401a11:	db 6c 24 50          	fldt   0x50(%rsp)
  401a15:	d9 ee                	fldz   
  401a17:	df f1                	fcomip %st(1),%st
  401a19:	dd d8                	fstp   %st(0)
  401a1b:	0f 87 8e 03 00 00    	ja     401daf <main+0x6af>
  401a21:	db 6c 24 30          	fldt   0x30(%rsp)
  401a25:	db 6c 24 40          	fldt   0x40(%rsp)
  401a29:	df f1                	fcomip %st(1),%st
  401a2b:	dd d8                	fstp   %st(0)
  401a2d:	41 0f 97 c6          	seta   %r14b
  if (! out_of_range)
  401a31:	45 84 f6             	test   %r14b,%r14b
  401a34:	0f 85 2d 02 00 00    	jne    401c67 <main+0x567>
  401a3a:	db 6c 24 40          	fldt   0x40(%rsp)
              x_strlen = asprintf (&x_str, fmt, x);
  401a3e:	4c 8d bc 24 80 00 00 	lea    0x80(%rsp),%r15
  401a45:	00 
  401a46:	db 7c 24 20          	fstpt  0x20(%rsp)
      for (i = 1; ; i++)
  401a4a:	d9 e8                	fld1   
  401a4c:	db 7c 24 10          	fstpt  0x10(%rsp)
  401a50:	e9 54 01 00 00       	jmpq   401ba9 <main+0x4a9>
  401a55:	dd d8                	fstp   %st(0)
          out_of_range = (step < 0 ? x < last : last < x);
  401a57:	db 6c 24 30          	fldt   0x30(%rsp)
  401a5b:	db 2c 24             	fldt   (%rsp)
  401a5e:	df f1                	fcomip %st(1),%st
  401a60:	dd d8                	fstp   %st(0)
  401a62:	41 0f 97 c6          	seta   %r14b
          if (out_of_range)
  401a66:	45 84 f6             	test   %r14b,%r14b
  401a69:	0f 84 0b 01 00 00    	je     401b7a <main+0x47a>
              if (locale_ok)
  401a6f:	80 3d 63 a8 20 00 00 	cmpb   $0x0,0x20a863(%rip)        # 60c2d9 <locale_ok>
  401a76:	0f 85 a3 01 00 00    	jne    401c1f <main+0x51f>
              x_strlen = asprintf (&x_str, fmt, x);
  401a7c:	ff 74 24 08          	pushq  0x8(%rsp)
  401a80:	48 89 ee             	mov    %rbp,%rsi
  401a83:	4c 89 ff             	mov    %r15,%rdi
  401a86:	31 c0                	xor    %eax,%eax
  401a88:	ff 74 24 08          	pushq  0x8(%rsp)
  401a8c:	e8 0f 43 00 00       	callq  405da0 <rpl_asprintf>
              if (locale_ok)
  401a91:	80 3d 41 a8 20 00 00 	cmpb   $0x0,0x20a841(%rip)        # 60c2d9 <locale_ok>
  401a98:	5e                   	pop    %rsi
              x_strlen = asprintf (&x_str, fmt, x);
  401a99:	48 63 d8             	movslq %eax,%rbx
              if (locale_ok)
  401a9c:	5f                   	pop    %rdi
  401a9d:	0f 85 66 01 00 00    	jne    401c09 <main+0x509>
              if (x_strlen < 0)
  401aa3:	85 db                	test   %ebx,%ebx
  401aa5:	0f 88 ce 09 00 00    	js     402479 <main+0xd79>
              x_str[x_strlen - layout.suffix_len] = '\0';
  401aab:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  401ab2:	00 
  401ab3:	4c 29 eb             	sub    %r13,%rbx
              if (xstrtold (x_str + layout.prefix_len, NULL, &x_val, cl_strtold)
  401ab6:	48 c7 c1 50 32 40 00 	mov    $0x403250,%rcx
  401abd:	31 f6                	xor    %esi,%esi
  401abf:	48 8d 94 24 90 00 00 	lea    0x90(%rsp),%rdx
  401ac6:	00 
              x_str[x_strlen - layout.suffix_len] = '\0';
  401ac7:	c6 04 18 00          	movb   $0x0,(%rax,%rbx,1)
              if (xstrtold (x_str + layout.prefix_len, NULL, &x_val, cl_strtold)
  401acb:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  401ad2:	00 
  401ad3:	4c 01 e7             	add    %r12,%rdi
  401ad6:	e8 f5 41 00 00       	callq  405cd0 <xstrtold>
  401adb:	84 c0                	test   %al,%al
  401add:	0f 84 9e 02 00 00    	je     401d81 <main+0x681>
                  && x_val == last)
  401ae3:	db 6c 24 30          	fldt   0x30(%rsp)
  401ae7:	db ac 24 90 00 00 00 	fldt   0x90(%rsp)
  401aee:	df e9                	fucomip %st(1),%st
  401af0:	dd d8                	fstp   %st(0)
  401af2:	0f 8a 89 02 00 00    	jp     401d81 <main+0x681>
  401af8:	0f 85 83 02 00 00    	jne    401d81 <main+0x681>
                  int x0_strlen = asprintf (&x0_str, fmt, x0);
  401afe:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  401b05:	00 
  401b06:	48 89 ee             	mov    %rbp,%rsi
  401b09:	31 c0                	xor    %eax,%eax
                  char *x0_str = NULL;
  401b0b:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  401b12:	00 00 00 00 00 
                  int x0_strlen = asprintf (&x0_str, fmt, x0);
  401b17:	ff 74 24 28          	pushq  0x28(%rsp)
  401b1b:	ff 74 24 28          	pushq  0x28(%rsp)
  401b1f:	e8 7c 42 00 00       	callq  405da0 <rpl_asprintf>
                  if (x0_strlen < 0)
  401b24:	5a                   	pop    %rdx
  401b25:	59                   	pop    %rcx
  401b26:	85 c0                	test   %eax,%eax
  401b28:	0f 88 4b 09 00 00    	js     402479 <main+0xd79>
                  x0_str[x0_strlen - layout.suffix_len] = '\0';
  401b2e:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  401b35:	00 
  401b36:	48 98                	cltq   
  401b38:	4c 29 e8             	sub    %r13,%rax
  401b3b:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
                  print_extra_number = !STREQ (x0_str, x_str);
  401b3f:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  401b46:	00 
  401b47:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  401b4e:	00 
  401b4f:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  401b54:	e8 b7 f9 ff ff       	callq  401510 <strcmp@plt>
                  free (x0_str);
  401b59:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                  print_extra_number = !STREQ (x0_str, x_str);
  401b5e:	89 c3                	mov    %eax,%ebx
                  free (x0_str);
  401b60:	e8 6b 18 00 00       	callq  4033d0 <rpl_free>
              free (x_str);
  401b65:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  401b6c:	00 
  401b6d:	e8 5e 18 00 00       	callq  4033d0 <rpl_free>
              if (! print_extra_number)
  401b72:	85 db                	test   %ebx,%ebx
  401b74:	0f 84 14 02 00 00    	je     401d8e <main+0x68e>
          if (fputs (separator, stdout) == EOF)
  401b7a:	48 8b 35 e7 a6 20 00 	mov    0x20a6e7(%rip),%rsi        # 60c268 <stdout@@GLIBC_2.2.5>
  401b81:	48 8b 3d 48 a7 20 00 	mov    0x20a748(%rip),%rdi        # 60c2d0 <separator>
  401b88:	e8 63 f9 ff ff       	callq  4014f0 <fputs_unlocked@plt>
  401b8d:	83 c0 01             	add    $0x1,%eax
  401b90:	0f 84 14 02 00 00    	je     401daa <main+0x6aa>
      for (i = 1; ; i++)
  401b96:	db 6c 24 10          	fldt   0x10(%rsp)
  401b9a:	d9 e8                	fld1   
  401b9c:	de c1                	faddp  %st,%st(1)
  401b9e:	db 7c 24 10          	fstpt  0x10(%rsp)
          x = first + i * step;
  401ba2:	db 2c 24             	fldt   (%rsp)
  401ba5:	db 7c 24 20          	fstpt  0x20(%rsp)
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  401ba9:	48 89 ee             	mov    %rbp,%rsi
  401bac:	bf 01 00 00 00       	mov    $0x1,%edi
  401bb1:	31 c0                	xor    %eax,%eax
  401bb3:	ff 74 24 28          	pushq  0x28(%rsp)
  401bb7:	ff 74 24 28          	pushq  0x28(%rsp)
  401bbb:	e8 20 fa ff ff       	callq  4015e0 <__printf_chk@plt>
          if (printf (fmt, x) < 0)
  401bc0:	41 58                	pop    %r8
  401bc2:	41 59                	pop    %r9
  401bc4:	85 c0                	test   %eax,%eax
  401bc6:	0f 88 de 01 00 00    	js     401daa <main+0x6aa>
          if (out_of_range)
  401bcc:	45 84 f6             	test   %r14b,%r14b
  401bcf:	0f 85 b9 01 00 00    	jne    401d8e <main+0x68e>
          x = first + i * step;
  401bd5:	db 6c 24 50          	fldt   0x50(%rsp)
  401bd9:	d9 c0                	fld    %st(0)
  401bdb:	db 6c 24 10          	fldt   0x10(%rsp)
  401bdf:	de c9                	fmulp  %st,%st(1)
  401be1:	db 6c 24 40          	fldt   0x40(%rsp)
  401be5:	de c1                	faddp  %st,%st(1)
  401be7:	d9 c0                	fld    %st(0)
  401be9:	db 3c 24             	fstpt  (%rsp)
          out_of_range = (step < 0 ? x < last : last < x);
  401bec:	d9 ee                	fldz   
  401bee:	df f2                	fcomip %st(2),%st
  401bf0:	dd d9                	fstp   %st(1)
  401bf2:	0f 86 5d fe ff ff    	jbe    401a55 <main+0x355>
  401bf8:	db 6c 24 30          	fldt   0x30(%rsp)
  401bfc:	df f1                	fcomip %st(1),%st
  401bfe:	dd d8                	fstp   %st(0)
  401c00:	41 0f 97 c6          	seta   %r14b
  401c04:	e9 5d fe ff ff       	jmpq   401a66 <main+0x366>
                setlocale (LC_NUMERIC, "");
  401c09:	48 8d 35 d1 77 00 00 	lea    0x77d1(%rip),%rsi        # 4093e1 <quoting_style_vals+0x81>
  401c10:	bf 01 00 00 00       	mov    $0x1,%edi
  401c15:	e8 b6 f9 ff ff       	callq  4015d0 <setlocale@plt>
  401c1a:	e9 84 fe ff ff       	jmpq   401aa3 <main+0x3a3>
                setlocale (LC_NUMERIC, "C");
  401c1f:	48 8d 35 dc 68 00 00 	lea    0x68dc(%rip),%rsi        # 408502 <_IO_stdin_used+0x1a2>
  401c26:	bf 01 00 00 00       	mov    $0x1,%edi
  401c2b:	e8 a0 f9 ff ff       	callq  4015d0 <setlocale@plt>
  401c30:	e9 47 fe ff ff       	jmpq   401a7c <main+0x37c>
      error (0, 0, _("missing operand"));
  401c35:	31 ff                	xor    %edi,%edi
  401c37:	ba 05 00 00 00       	mov    $0x5,%edx
  401c3c:	48 8d 35 42 68 00 00 	lea    0x6842(%rip),%rsi        # 408485 <_IO_stdin_used+0x125>
  401c43:	e8 c8 f7 ff ff       	callq  401410 <dcgettext@plt>
  401c48:	31 f6                	xor    %esi,%esi
  401c4a:	31 ff                	xor    %edi,%edi
  401c4c:	48 89 c2             	mov    %rax,%rdx
  401c4f:	31 c0                	xor    %eax,%eax
  401c51:	e8 ca f9 ff ff       	callq  401620 <error@plt>
      usage (EXIT_FAILURE);
  401c56:	e9 8d fc ff ff       	jmpq   4018e8 <main+0x1e8>
  401c5b:	48 63 15 0e a6 20 00 	movslq 0x20a60e(%rip),%rdx        # 60c270 <optind@@GLIBC_2.2.5>
  401c62:	e9 f1 fb ff ff       	jmpq   401858 <main+0x158>
    format_str = get_default_format (first, step, last);

  print_numbers (format_str, layout, first.value, step.value, last.value);

  main_exit (EXIT_SUCCESS);
  401c67:	31 ff                	xor    %edi,%edi
  401c69:	e8 e2 f9 ff ff       	callq  401650 <exit@plt>
  i += strspn (fmt + i, "-+#0 '");
  401c6e:	48 8d 35 4f 68 00 00 	lea    0x684f(%rip),%rsi        # 4084c4 <_IO_stdin_used+0x164>
  401c75:	e8 46 f8 ff ff       	callq  4014c0 <strspn@plt>
  i += strspn (fmt + i, "0123456789");
  401c7a:	48 8d 35 e3 66 00 00 	lea    0x66e3(%rip),%rsi        # 408364 <_IO_stdin_used+0x4>
  i += strspn (fmt + i, "-+#0 '");
  401c81:	49 01 c5             	add    %rax,%r13
  i += strspn (fmt + i, "0123456789");
  401c84:	4a 8d 7c 2d 00       	lea    0x0(%rbp,%r13,1),%rdi
  401c89:	e8 32 f8 ff ff       	callq  4014c0 <strspn@plt>
  401c8e:	4d 8d 7c 05 00       	lea    0x0(%r13,%rax,1),%r15
  if (fmt[i] == '.')
  401c93:	42 80 7c 3d 00 2e    	cmpb   $0x2e,0x0(%rbp,%r15,1)
  401c99:	75 18                	jne    401cb3 <main+0x5b3>
      i++;
  401c9b:	49 83 c7 01          	add    $0x1,%r15
      i += strspn (fmt + i, "0123456789");
  401c9f:	48 8d 35 be 66 00 00 	lea    0x66be(%rip),%rsi        # 408364 <_IO_stdin_used+0x4>
  401ca6:	4a 8d 7c 3d 00       	lea    0x0(%rbp,%r15,1),%rdi
  401cab:	e8 10 f8 ff ff       	callq  4014c0 <strspn@plt>
  401cb0:	49 01 c7             	add    %rax,%r15
  has_L = (fmt[i] == 'L');
  401cb3:	31 ff                	xor    %edi,%edi
  401cb5:	42 80 7c 3d 00 4c    	cmpb   $0x4c,0x0(%rbp,%r15,1)
  401cbb:	40 0f 94 c7          	sete   %dil
  i += has_L;
  401cbf:	4d 8d 2c 3f          	lea    (%r15,%rdi,1),%r13
  if (fmt[i] == '\0')
  401cc3:	4a 8d 44 2d 00       	lea    0x0(%rbp,%r13,1),%rax
  401cc8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401ccd:	0f b6 00             	movzbl (%rax),%eax
  401cd0:	84 c0                	test   %al,%al
  401cd2:	0f 84 d2 07 00 00    	je     4024aa <main+0xdaa>
  if (! strchr ("efgaEFGA", fmt[i]))
  401cd8:	44 0f be c0          	movsbl %al,%r8d
  401cdc:	48 8d 3d fd 67 00 00 	lea    0x67fd(%rip),%rdi        # 4084e0 <_IO_stdin_used+0x180>
  401ce3:	44 89 c6             	mov    %r8d,%esi
  401ce6:	44 89 44 24 20       	mov    %r8d,0x20(%rsp)
  401ceb:	e8 80 f7 ff ff       	callq  401470 <strchr@plt>
  for (i++; ; i += (fmt[i] == '%') + 1)
  401cf0:	49 8d 7d 01          	lea    0x1(%r13),%rdi
  401cf4:	45 31 ed             	xor    %r13d,%r13d
  if (! strchr ("efgaEFGA", fmt[i]))
  401cf7:	44 8b 44 24 20       	mov    0x20(%rsp),%r8d
  401cfc:	48 85 c0             	test   %rax,%rax
  401cff:	75 15                	jne    401d16 <main+0x616>
  401d01:	e9 08 08 00 00       	jmpq   40250e <main+0xe0e>
    else if (fmt[i])
  401d06:	84 c0                	test   %al,%al
  401d08:	74 27                	je     401d31 <main+0x631>
  for (i++; ; i += (fmt[i] == '%') + 1)
  401d0a:	b8 01 00 00 00       	mov    $0x1,%eax
  401d0f:	48 01 c7             	add    %rax,%rdi
  401d12:	49 83 c5 01          	add    $0x1,%r13
    if (fmt[i] == '%' && fmt[i + 1] != '%')
  401d16:	0f b6 44 3d 00       	movzbl 0x0(%rbp,%rdi,1),%eax
  401d1b:	3c 25                	cmp    $0x25,%al
  401d1d:	75 e7                	jne    401d06 <main+0x606>
  401d1f:	80 7c 3d 01 25       	cmpb   $0x25,0x1(%rbp,%rdi,1)
  401d24:	0f 85 b2 07 00 00    	jne    4024dc <main+0xddc>
  for (i++; ; i += (fmt[i] == '%') + 1)
  401d2a:	b8 02 00 00 00       	mov    $0x2,%eax
  401d2f:	eb de                	jmp    401d0f <main+0x60f>
        char *ldfmt = xmalloc (format_size + 1);
  401d31:	48 83 c7 02          	add    $0x2,%rdi
  401d35:	e8 36 3b 00 00       	callq  405870 <xmalloc>

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  401d3a:	4c 89 fa             	mov    %r15,%rdx
  401d3d:	48 89 ee             	mov    %rbp,%rsi
  401d40:	48 89 c7             	mov    %rax,%rdi
  401d43:	e8 f8 f7 ff ff       	callq  401540 <memcpy@plt>
#endif

__fortify_function char *
__NTH (strcpy (char *__restrict __dest, const char *__restrict __src))
{
  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));
  401d48:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
        ldfmt[length_modifier_offset] = 'L';
  401d4d:	42 c6 04 38 4c       	movb   $0x4c,(%rax,%r15,1)
        strcpy (ldfmt + length_modifier_offset + 1,
  401d52:	4a 8d 7c 38 01       	lea    0x1(%rax,%r15,1),%rdi
  401d57:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  401d5c:	e8 3f f6 ff ff       	callq  4013a0 <strcpy@plt>
  if (format_str != NULL && equal_width)
  401d61:	80 3d 70 a5 20 00 00 	cmpb   $0x0,0x20a570(%rip)        # 60c2d8 <equal_width>
  401d68:	0f 85 65 02 00 00    	jne    401fd3 <main+0x8d3>
  401d6e:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  401d73:	8b 15 f7 a4 20 00    	mov    0x20a4f7(%rip),%edx        # 60c270 <optind@@GLIBC_2.2.5>
  401d79:	48 89 cd             	mov    %rcx,%rbp
  401d7c:	e9 ca fb ff ff       	jmpq   40194b <main+0x24b>
              free (x_str);
  401d81:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  401d88:	00 
  401d89:	e8 42 16 00 00       	callq  4033d0 <rpl_free>
      if (fputs (terminator, stdout) == EOF)
  401d8e:	48 8b 35 d3 a4 20 00 	mov    0x20a4d3(%rip),%rsi        # 60c268 <stdout@@GLIBC_2.2.5>
  401d95:	48 8d 3d 5d 6e 00 00 	lea    0x6e5d(%rip),%rdi        # 408bf9 <terminator>
  401d9c:	e8 4f f7 ff ff       	callq  4014f0 <fputs_unlocked@plt>
  401da1:	83 c0 01             	add    $0x1,%eax
  401da4:	0f 85 bd fe ff ff    	jne    401c67 <main+0x567>
            io_error ();
  401daa:	e8 d1 08 00 00       	callq  402680 <io_error>
  bool out_of_range = (step < 0 ? first < last : last < first);
  401daf:	db 6c 24 40          	fldt   0x40(%rsp)
  401db3:	db 6c 24 30          	fldt   0x30(%rsp)
  401db7:	df f1                	fcomip %st(1),%st
  401db9:	dd d8                	fstp   %st(0)
  401dbb:	41 0f 97 c6          	seta   %r14b
  401dbf:	e9 6d fc ff ff       	jmpq   401a31 <main+0x331>
      || (all_digits_p (argv[optind + 1])
  401dc4:	4d 8b 7c ce 08       	mov    0x8(%r14,%rcx,8),%r15
  401dc9:	89 54 24 10          	mov    %edx,0x10(%rsp)
  401dcd:	4c 89 ff             	mov    %r15,%rdi
  401dd0:	e8 6b 08 00 00       	callq  402640 <all_digits_p>
  401dd5:	66 0f ef c0          	pxor   %xmm0,%xmm0
  401dd9:	8b 54 24 10          	mov    0x10(%rsp),%edx
  401ddd:	84 c0                	test   %al,%al
  401ddf:	f3 0f 11 44 24 68    	movss  %xmm0,0x68(%rsp)
  401de5:	0f 85 e8 03 00 00    	jne    4021d3 <main+0xad3>
  bool fast_step_ok = false;
  401deb:	c6 44 24 30 00       	movb   $0x0,0x30(%rsp)
  if (all_digits_p (argv[optind])
  401df0:	48 63 ca             	movslq %edx,%rcx
  401df3:	89 54 24 20          	mov    %edx,0x20(%rsp)
  401df7:	4d 8b 3c ce          	mov    (%r14,%rcx,8),%r15
  401dfb:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  401e00:	4c 89 ff             	mov    %r15,%rdi
  401e03:	e8 38 08 00 00       	callq  402640 <all_digits_p>
  401e08:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  401e0d:	48 63 54 24 20       	movslq 0x20(%rsp),%rdx
  401e12:	84 c0                	test   %al,%al
  401e14:	0f 84 6f fb ff ff    	je     401989 <main+0x289>
      && (n_args == 1 || all_digits_p (argv[optind + 1]))
  401e1a:	48 83 c1 01          	add    $0x1,%rcx
  401e1e:	89 54 24 10          	mov    %edx,0x10(%rsp)
  401e22:	49 8b 3c ce          	mov    (%r14,%rcx,8),%rdi
  401e26:	48 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%rax
  401e2d:	00 
  401e2e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  401e33:	e8 08 08 00 00       	callq  402640 <all_digits_p>
  401e38:	48 63 54 24 10       	movslq 0x10(%rsp),%rdx
  401e3d:	84 c0                	test   %al,%al
  401e3f:	0f 84 44 fb ff ff    	je     401989 <main+0x289>
      && (n_args < 3 || (fast_step_ok
  401e45:	80 7c 24 30 00       	cmpb   $0x0,0x30(%rsp)
  401e4a:	0f 84 39 fb ff ff    	je     401989 <main+0x289>
                         && all_digits_p (argv[optind + 2])))
  401e50:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  401e55:	89 54 24 10          	mov    %edx,0x10(%rsp)
  401e59:	49 8b 7c 06 08       	mov    0x8(%r14,%rax,1),%rdi
  401e5e:	e8 dd 07 00 00       	callq  402640 <all_digits_p>
  401e63:	48 63 54 24 10       	movslq 0x10(%rsp),%rdx
  401e68:	84 c0                	test   %al,%al
  401e6a:	0f 84 19 fb ff ff    	je     401989 <main+0x289>
      && !equal_width && !format_str && strlen (separator) == 1)
  401e70:	80 3d 61 a4 20 00 01 	cmpb   $0x1,0x20a461(%rip)        # 60c2d8 <equal_width>
  401e77:	0f 84 0c fb ff ff    	je     401989 <main+0x289>
  401e7d:	48 85 ed             	test   %rbp,%rbp
  401e80:	0f 85 03 fb ff ff    	jne    401989 <main+0x289>
  401e86:	48 8b 3d 43 a4 20 00 	mov    0x20a443(%rip),%rdi        # 60c2d0 <separator>
  401e8d:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  401e91:	31 c0                	xor    %eax,%eax
  401e93:	f2 ae                	repnz scas %es:(%rdi),%al
  401e95:	48 83 f9 fd          	cmp    $0xfffffffffffffffd,%rcx
  401e99:	0f 85 ea fa ff ff    	jne    401989 <main+0x289>
      seq_fast (s1, s2, step.value);
  401e9f:	d9 05 5b 6d 00 00    	flds   0x6d5b(%rip)        # 408c00 <terminator+0x7>
  401ea5:	db ac 24 a0 00 00 00 	fldt   0xa0(%rsp)
      char const *s1 = n_args == 1 ? "1" : argv[optind];
  401eac:	48 8d 05 9e 65 00 00 	lea    0x659e(%rip),%rax        # 408451 <_IO_stdin_used+0xf1>
  401eb3:	83 3c 24 01          	cmpl   $0x1,(%rsp)
  401eb7:	4c 0f 44 f8          	cmove  %rax,%r15
      seq_fast (s1, s2, step.value);
  401ebb:	db f1                	fcomi  %st(1),%st
  401ebd:	0f 83 59 05 00 00    	jae    40241c <main+0xd1c>
  401ec3:	dd d9                	fstp   %st(1)
  401ec5:	d9 7c 24 6e          	fnstcw 0x6e(%rsp)
  401ec9:	0f b7 44 24 6e       	movzwl 0x6e(%rsp),%eax
  401ece:	80 cc 0c             	or     $0xc,%ah
  401ed1:	66 89 44 24 6c       	mov    %ax,0x6c(%rsp)
  401ed6:	d9 6c 24 6c          	fldcw  0x6c(%rsp)
  401eda:	df 7c 24 10          	fistpll 0x10(%rsp)
  401ede:	d9 6c 24 6e          	fldcw  0x6e(%rsp)
  401ee2:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
      char const *s2 = argv[optind + (n_args - 1)];
  401ee7:	8b 04 24             	mov    (%rsp),%eax
      seq_fast (s1, s2, step.value);
  401eea:	4c 89 ff             	mov    %r15,%rdi
      char const *s2 = argv[optind + (n_args - 1)];
  401eed:	8d 44 10 ff          	lea    -0x1(%rax,%rdx,1),%eax
      seq_fast (s1, s2, step.value);
  401ef1:	4c 89 d2             	mov    %r10,%rdx
  401ef4:	49 8b 34 c6          	mov    (%r14,%rax,8),%rsi
  401ef8:	e8 c3 07 00 00       	callq  4026c0 <seq_fast>
  401efd:	48 63 15 6c a3 20 00 	movslq 0x20a36c(%rip),%rdx        # 60c270 <optind@@GLIBC_2.2.5>
  401f04:	e9 80 fa ff ff       	jmpq   401989 <main+0x289>
      last = scan_arg (argv[optind++]);
  401f09:	49 8b 34 c6          	mov    (%r14,%rax,8),%rsi
  401f0d:	8d 50 01             	lea    0x1(%rax),%edx
  401f10:	4c 89 ff             	mov    %r15,%rdi
  401f13:	44 89 44 24 10       	mov    %r8d,0x10(%rsp)
  401f18:	4c 89 14 24          	mov    %r10,(%rsp)
  401f1c:	89 15 4e a3 20 00    	mov    %edx,0x20a34e(%rip)        # 60c270 <optind@@GLIBC_2.2.5>
  401f22:	e8 89 0f 00 00       	callq  402eb0 <scan_arg>
      if (optind < argc)
  401f27:	8b 05 43 a3 20 00    	mov    0x20a343(%rip),%eax        # 60c270 <optind@@GLIBC_2.2.5>
  401f2d:	4c 8b 14 24          	mov    (%rsp),%r10
      last = scan_arg (argv[optind++]);
  401f31:	db ac 24 c0 00 00 00 	fldt   0xc0(%rsp)
      if (optind < argc)
  401f38:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
  401f3d:	39 d8                	cmp    %ebx,%eax
      last = scan_arg (argv[optind++]);
  401f3f:	db 7c 24 30          	fstpt  0x30(%rsp)
      if (optind < argc)
  401f43:	0f 8c b5 00 00 00    	jl     401ffe <main+0x8fe>
      last = scan_arg (argv[optind++]);
  401f49:	48 8b 9c 24 d0 00 00 	mov    0xd0(%rsp),%rbx
  401f50:	00 
  401f51:	8b 84 24 d8 00 00 00 	mov    0xd8(%rsp),%eax
  if (first.precision == 0 && step.precision == 0 && last.precision == 0
  401f58:	8b 94 24 b8 00 00 00 	mov    0xb8(%rsp),%edx
  401f5f:	44 09 c2             	or     %r8d,%edx
  401f62:	09 c2                	or     %eax,%edx
  401f64:	0f 85 93 fa ff ff    	jne    4019fd <main+0x2fd>
      && isfinite (first.value) && 0 <= first.value && 0 <= last.value
  401f6a:	d9 44 24 68          	flds   0x68(%rsp)
  401f6e:	d9 c0                	fld    %st(0)
  401f70:	db 6c 24 40          	fldt   0x40(%rsp)
  401f74:	de ca                	fmulp  %st,%st(2)
  401f76:	d9 c9                	fxch   %st(1)
  401f78:	df e9                	fucomip %st(1),%st
  401f7a:	0f 8b e1 03 00 00    	jnp    402361 <main+0xc61>
  401f80:	dd d8                	fstp   %st(0)
  401f82:	eb 02                	jmp    401f86 <main+0x886>
  401f84:	dd d8                	fstp   %st(0)
  if (format_str == NULL)
  401f86:	48 85 ed             	test   %rbp,%rbp
  401f89:	0f 84 2a 04 00 00    	je     4023b9 <main+0xcb9>
  401f8f:	db ac 24 a0 00 00 00 	fldt   0xa0(%rsp)
  401f96:	db 7c 24 50          	fstpt  0x50(%rsp)
  401f9a:	e9 72 fa ff ff       	jmpq   401a11 <main+0x311>
  401f9f:	66 0f ef d2          	pxor   %xmm2,%xmm2
      && (n_args == 1 || all_digits_p (argv[optind + 1]))
  401fa3:	83 3c 24 01          	cmpl   $0x1,(%rsp)
  401fa7:	f3 0f 11 54 24 68    	movss  %xmm2,0x68(%rsp)
  401fad:	0f 84 bd fe ff ff    	je     401e70 <main+0x770>
  401fb3:	49 8b 7c ce 08       	mov    0x8(%r14,%rcx,8),%rdi
  401fb8:	89 54 24 10          	mov    %edx,0x10(%rsp)
  401fbc:	e8 7f 06 00 00       	callq  402640 <all_digits_p>
  401fc1:	48 63 54 24 10       	movslq 0x10(%rsp),%rdx
  401fc6:	84 c0                	test   %al,%al
  401fc8:	0f 84 bb f9 ff ff    	je     401989 <main+0x289>
  401fce:	e9 9d fe ff ff       	jmpq   401e70 <main+0x770>
      error (0, 0, _("format string may not be specified"
  401fd3:	ba 05 00 00 00       	mov    $0x5,%edx
  401fd8:	48 8d 35 b1 6b 00 00 	lea    0x6bb1(%rip),%rsi        # 408b90 <_IO_stdin_used+0x830>
  401fdf:	31 ff                	xor    %edi,%edi
  401fe1:	e8 2a f4 ff ff       	callq  401410 <dcgettext@plt>
  401fe6:	31 ff                	xor    %edi,%edi
  401fe8:	31 f6                	xor    %esi,%esi
  401fea:	48 89 c2             	mov    %rax,%rdx
  401fed:	31 c0                	xor    %eax,%eax
  401fef:	e8 2c f6 ff ff       	callq  401620 <error@plt>
      usage (EXIT_FAILURE);
  401ff4:	bf 01 00 00 00       	mov    $0x1,%edi
  401ff9:	e8 d2 0a 00 00       	callq  402ad0 <usage>
          step = last;
  401ffe:	66 0f 6f 9c 24 c0 00 	movdqa 0xc0(%rsp),%xmm3
  402005:	00 00 
          if (step.value == 0)
  402007:	d9 ee                	fldz   
  402009:	48 63 d0             	movslq %eax,%rdx
          step = last;
  40200c:	66 0f 6f a4 24 d0 00 	movdqa 0xd0(%rsp),%xmm4
  402013:	00 00 
          if (step.value == 0)
  402015:	db 6c 24 30          	fldt   0x30(%rsp)
  402019:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  402020:	00 
          step = last;
  402021:	0f 29 9c 24 a0 00 00 	movaps %xmm3,0xa0(%rsp)
  402028:	00 
  402029:	0f 29 a4 24 b0 00 00 	movaps %xmm4,0xb0(%rsp)
  402030:	00 
          if (step.value == 0)
  402031:	df e9                	fucomip %st(1),%st
  402033:	dd d8                	fstp   %st(0)
  402035:	0f 8a ea 01 00 00    	jp     402225 <main+0xb25>
  40203b:	0f 85 e4 01 00 00    	jne    402225 <main+0xb25>
              error (0, 0, _("invalid Zero increment value: %s"),
  402041:	49 8b 7c 0e f8       	mov    -0x8(%r14,%rcx,1),%rdi
  402046:	e8 75 31 00 00       	callq  4051c0 <quote>
  40204b:	ba 05 00 00 00       	mov    $0x5,%edx
  402050:	48 8d 35 81 6b 00 00 	lea    0x6b81(%rip),%rsi        # 408bd8 <_IO_stdin_used+0x878>
  402057:	49 89 c4             	mov    %rax,%r12
  40205a:	e9 71 f8 ff ff       	jmpq   4018d0 <main+0x1d0>
  40205f:	4c 89 14 24          	mov    %r10,(%rsp)
      if (asprintf (&s1, "%0.Lf", first.value) < 0)
  402063:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  402068:	48 8d 35 7a 64 00 00 	lea    0x647a(%rip),%rsi        # 4084e9 <_IO_stdin_used+0x189>
  40206f:	ff 74 24 48          	pushq  0x48(%rsp)
  402073:	ff 74 24 48          	pushq  0x48(%rsp)
  402077:	e8 24 3d 00 00       	callq  405da0 <rpl_asprintf>
  40207c:	5d                   	pop    %rbp
  40207d:	41 5e                	pop    %r14
  40207f:	85 c0                	test   %eax,%eax
  402081:	4c 8b 14 24          	mov    (%rsp),%r10
  402085:	d9 ee                	fldz   
  402087:	0f 88 ea 03 00 00    	js     402477 <main+0xd77>
      if (! isfinite (last.value))
  40208d:	db 6c 24 30          	fldt   0x30(%rsp)
  402091:	4c 89 14 24          	mov    %r10,(%rsp)
  402095:	d8 c9                	fmul   %st(1),%st
  402097:	df e9                	fucomip %st(1),%st
  402099:	dd d8                	fstp   %st(0)
  40209b:	7a 06                	jp     4020a3 <main+0x9a3>
  40209d:	0f 84 a7 03 00 00    	je     40244a <main+0xd4a>
        s2 = xstrdup ("inf"); /* Ensure "inf" is used.  */
  4020a3:	48 8d 3d d1 62 00 00 	lea    0x62d1(%rip),%rdi        # 40837b <_IO_stdin_used+0x1b>
  4020aa:	e8 c1 3b 00 00       	callq  405c70 <xstrdup>
  4020af:	4c 8b 14 24          	mov    (%rsp),%r10
  4020b3:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
      if (*s1 != '-' && *s2 != '-')
  4020b8:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  4020bd:	80 3f 2d             	cmpb   $0x2d,(%rdi)
  4020c0:	74 53                	je     402115 <main+0xa15>
  4020c2:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  4020c7:	80 3e 2d             	cmpb   $0x2d,(%rsi)
  4020ca:	74 49                	je     402115 <main+0xa15>
        seq_fast (s1, s2, step.value);
  4020cc:	d9 05 2e 6b 00 00    	flds   0x6b2e(%rip)        # 408c00 <terminator+0x7>
  4020d2:	db ac 24 a0 00 00 00 	fldt   0xa0(%rsp)
  4020d9:	db f1                	fcomi  %st(1),%st
  4020db:	0f 83 9d 03 00 00    	jae    40247e <main+0xd7e>
  4020e1:	dd d9                	fstp   %st(1)
  4020e3:	d9 7c 24 6e          	fnstcw 0x6e(%rsp)
  4020e7:	0f b7 44 24 6e       	movzwl 0x6e(%rsp),%eax
  4020ec:	80 cc 0c             	or     $0xc,%ah
  4020ef:	66 89 44 24 6c       	mov    %ax,0x6c(%rsp)
  4020f4:	d9 6c 24 6c          	fldcw  0x6c(%rsp)
  4020f8:	df 3c 24             	fistpll (%rsp)
  4020fb:	d9 6c 24 6e          	fldcw  0x6e(%rsp)
  4020ff:	48 8b 14 24          	mov    (%rsp),%rdx
  402103:	4c 89 14 24          	mov    %r10,(%rsp)
  402107:	e8 b4 05 00 00       	callq  4026c0 <seq_fast>
  40210c:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  402111:	4c 8b 14 24          	mov    (%rsp),%r10
  402115:	4c 89 14 24          	mov    %r10,(%rsp)
      free (s1);
  402119:	e8 b2 12 00 00       	callq  4033d0 <rpl_free>
      free (s2);
  40211e:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  402123:	e8 a8 12 00 00       	callq  4033d0 <rpl_free>
  402128:	4c 8b 14 24          	mov    (%rsp),%r10
  40212c:	31 c0                	xor    %eax,%eax
  40212e:	45 31 c0             	xor    %r8d,%r8d
  int prec = MAX (first.precision, step.precision);
  402131:	44 39 84 24 b8 00 00 	cmp    %r8d,0xb8(%rsp)
  402138:	00 
  402139:	45 89 c1             	mov    %r8d,%r9d
  40213c:	44 0f 4d 8c 24 b8 00 	cmovge 0xb8(%rsp),%r9d
  402143:	00 00 
  if (prec != INT_MAX && last.precision != INT_MAX)
  402145:	3d ff ff ff 7f       	cmp    $0x7fffffff,%eax
  40214a:	0f 84 c9 00 00 00    	je     402219 <main+0xb19>
  402150:	41 81 f9 ff ff ff 7f 	cmp    $0x7fffffff,%r9d
  402157:	0f 84 bc 00 00 00    	je     402219 <main+0xb19>
      if (equal_width)
  40215d:	80 3d 74 a1 20 00 00 	cmpb   $0x0,0x20a174(%rip)        # 60c2d8 <equal_width>
  402164:	0f 84 ae 01 00 00    	je     402318 <main+0xc18>
          size_t first_width = first.width + (prec - first.precision);
  40216a:	44 89 ca             	mov    %r9d,%edx
  40216d:	44 29 c2             	sub    %r8d,%edx
  402170:	48 63 d2             	movslq %edx,%rdx
  402173:	49 01 d2             	add    %rdx,%r10
          size_t last_width = last.width + (prec - last.precision);
  402176:	44 89 ca             	mov    %r9d,%edx
  402179:	29 c2                	sub    %eax,%edx
  40217b:	48 63 d2             	movslq %edx,%rdx
  40217e:	48 01 d3             	add    %rdx,%rbx
          if (last.precision && prec == 0)
  402181:	45 85 c9             	test   %r9d,%r9d
  402184:	0f 95 c2             	setne  %dl
  402187:	0f 85 ed 01 00 00    	jne    40237a <main+0xc7a>
  40218d:	85 c0                	test   %eax,%eax
  40218f:	0f 85 45 02 00 00    	jne    4023da <main+0xcda>
            last_width++;  /* include space for '.' */
  402195:	80 fa 01             	cmp    $0x1,%dl
  402198:	48 83 db ff          	sbb    $0xffffffffffffffff,%rbx
          if (first.precision == 0 && prec)
  40219c:	45 85 c0             	test   %r8d,%r8d
  40219f:	75 07                	jne    4021a8 <main+0xaa8>
            first_width++;  /* include space for '.' */
  4021a1:	80 fa 01             	cmp    $0x1,%dl
  4021a4:	49 83 da ff          	sbb    $0xffffffffffffffff,%r10
          size_t width = MAX (first_width, last_width);
  4021a8:	49 39 da             	cmp    %rbx,%r10
  4021ab:	4c 0f 42 d3          	cmovb  %rbx,%r10
          if (width <= INT_MAX)
  4021af:	49 81 fa ff ff ff 7f 	cmp    $0x7fffffff,%r10
  4021b6:	0f 86 27 02 00 00    	jbe    4023e3 <main+0xce3>
  4021bc:	db ac 24 a0 00 00 00 	fldt   0xa0(%rsp)
  return "%Lg";
  4021c3:	48 8d 2d 89 62 00 00 	lea    0x6289(%rip),%rbp        # 408453 <_IO_stdin_used+0xf3>
  4021ca:	db 7c 24 50          	fstpt  0x50(%rsp)
  4021ce:	e9 3e f8 ff ff       	jmpq   401a11 <main+0x311>
          && xstrtold (argv[optind + 1], NULL, &step.value, cl_strtold)
  4021d3:	48 c7 c1 50 32 40 00 	mov    $0x403250,%rcx
  4021da:	31 f6                	xor    %esi,%esi
  4021dc:	48 8d 94 24 a0 00 00 	lea    0xa0(%rsp),%rdx
  4021e3:	00 
  4021e4:	4c 89 ff             	mov    %r15,%rdi
  4021e7:	e8 e4 3a 00 00       	callq  405cd0 <xstrtold>
  4021ec:	84 c0                	test   %al,%al
  4021ee:	74 7d                	je     40226d <main+0xb6d>
          && 0 < step.value && step.value <= SEQ_FAST_STEP_LIMIT))
  4021f0:	d9 ee                	fldz   
  4021f2:	db ac 24 a0 00 00 00 	fldt   0xa0(%rsp)
  4021f9:	db f1                	fcomi  %st(1),%st
  4021fb:	dd d9                	fstp   %st(1)
  4021fd:	76 6c                	jbe    40226b <main+0xb6b>
  4021ff:	d9 05 f7 69 00 00    	flds   0x69f7(%rip)        # 408bfc <terminator+0x3>
  402205:	8b 15 65 a0 20 00    	mov    0x20a065(%rip),%edx        # 60c270 <optind@@GLIBC_2.2.5>
  40220b:	df f1                	fcomip %st(1),%st
  40220d:	dd d8                	fstp   %st(0)
  40220f:	0f 93 44 24 30       	setae  0x30(%rsp)
  402214:	e9 d7 fb ff ff       	jmpq   401df0 <main+0x6f0>
  return "%Lg";
  402219:	48 8d 2d 33 62 00 00 	lea    0x6233(%rip),%rbp        # 408453 <_IO_stdin_used+0xf3>
  402220:	e9 e1 f7 ff ff       	jmpq   401a06 <main+0x306>
          last = scan_arg (argv[optind++]);
  402225:	49 8b 34 d6          	mov    (%r14,%rdx,8),%rsi
  402229:	83 c0 01             	add    $0x1,%eax
  40222c:	4c 89 ff             	mov    %r15,%rdi
  40222f:	44 89 44 24 10       	mov    %r8d,0x10(%rsp)
  402234:	4c 89 14 24          	mov    %r10,(%rsp)
  402238:	89 05 32 a0 20 00    	mov    %eax,0x20a032(%rip)        # 60c270 <optind@@GLIBC_2.2.5>
  40223e:	e8 6d 0c 00 00       	callq  402eb0 <scan_arg>
  402243:	db ac 24 c0 00 00 00 	fldt   0xc0(%rsp)
  40224a:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
  40224f:	48 8b 9c 24 d0 00 00 	mov    0xd0(%rsp),%rbx
  402256:	00 
  402257:	8b 84 24 d8 00 00 00 	mov    0xd8(%rsp),%eax
  40225e:	4c 8b 14 24          	mov    (%rsp),%r10
  402262:	db 7c 24 30          	fstpt  0x30(%rsp)
  402266:	e9 ed fc ff ff       	jmpq   401f58 <main+0x858>
  40226b:	dd d8                	fstp   %st(0)
  40226d:	8b 15 fd 9f 20 00    	mov    0x209ffd(%rip),%edx        # 60c270 <optind@@GLIBC_2.2.5>
  402273:	e9 73 fb ff ff       	jmpq   401deb <main+0x6eb>
  last = scan_arg (argv[optind++]);
  402278:	db 6c 24 40          	fldt   0x40(%rsp)
  40227c:	4c 89 d3             	mov    %r10,%rbx
  operand first = { 1, 1, 0 };
  40227f:	41 ba 01 00 00 00    	mov    $0x1,%r10d
  last = scan_arg (argv[optind++]);
  402285:	db 7c 24 30          	fstpt  0x30(%rsp)
  operand first = { 1, 1, 0 };
  402289:	d9 e8                	fld1   
  40228b:	db 7c 24 40          	fstpt  0x40(%rsp)
      && isfinite (first.value) && 0 <= first.value && 0 <= last.value
  40228f:	d9 ee                	fldz   
  402291:	db 6c 24 30          	fldt   0x30(%rsp)
  402295:	df f1                	fcomip %st(1),%st
  402297:	0f 82 b4 00 00 00    	jb     402351 <main+0xc51>
      && 0 < step.value && step.value <= SEQ_FAST_STEP_LIMIT
  40229d:	db ac 24 a0 00 00 00 	fldt   0xa0(%rsp)
  4022a4:	d9 c0                	fld    %st(0)
  4022a6:	db 7c 24 50          	fstpt  0x50(%rsp)
  4022aa:	db f1                	fcomi  %st(1),%st
  4022ac:	dd d9                	fstp   %st(1)
  4022ae:	0f 86 a1 00 00 00    	jbe    402355 <main+0xc55>
  4022b4:	d9 05 42 69 00 00    	flds   0x6942(%rip)        # 408bfc <terminator+0x3>
  4022ba:	df f1                	fcomip %st(1),%st
  4022bc:	dd d8                	fstp   %st(0)
  4022be:	0f 82 93 00 00 00    	jb     402357 <main+0xc57>
      && !equal_width && !format_str && strlen (separator) == 1)
  4022c4:	80 3d 0d a0 20 00 00 	cmpb   $0x0,0x20a00d(%rip)        # 60c2d8 <equal_width>
  4022cb:	0f 85 86 00 00 00    	jne    402357 <main+0xc57>
  4022d1:	48 85 ed             	test   %rbp,%rbp
  4022d4:	0f 85 37 f7 ff ff    	jne    401a11 <main+0x311>
  4022da:	48 8b 3d ef 9f 20 00 	mov    0x209fef(%rip),%rdi        # 60c2d0 <separator>
  4022e1:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  4022e5:	31 c0                	xor    %eax,%eax
  4022e7:	f2 ae                	repnz scas %es:(%rdi),%al
  4022e9:	48 83 f9 fd          	cmp    $0xfffffffffffffffd,%rcx
  4022ed:	0f 84 6c fd ff ff    	je     40205f <main+0x95f>
    format_str = get_default_format (first, step, last);
  4022f3:	8b 84 24 b8 00 00 00 	mov    0xb8(%rsp),%eax
  int prec = MAX (first.precision, step.precision);
  4022fa:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  return "%Lg";
  402300:	48 8d 2d 4c 61 00 00 	lea    0x614c(%rip),%rbp        # 408453 <_IO_stdin_used+0xf3>
  int prec = MAX (first.precision, step.precision);
  402307:	85 c0                	test   %eax,%eax
  402309:	44 0f 49 c8          	cmovns %eax,%r9d
  if (prec != INT_MAX && last.precision != INT_MAX)
  40230d:	3d ff ff ff 7f       	cmp    $0x7fffffff,%eax
  402312:	0f 84 f9 f6 ff ff    	je     401a11 <main+0x311>
  return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  402318:	45 89 c8             	mov    %r9d,%r8d
  40231b:	48 8d 0d d8 61 00 00 	lea    0x61d8(%rip),%rcx        # 4084fa <_IO_stdin_used+0x19a>
  402322:	31 c0                	xor    %eax,%eax
  402324:	ba 1c 00 00 00       	mov    $0x1c,%edx
  402329:	be 01 00 00 00       	mov    $0x1,%esi
  40232e:	48 8d 3d 7b 9f 20 00 	lea    0x209f7b(%rip),%rdi        # 60c2b0 <format_buf.7191>
  402335:	e8 76 f3 ff ff       	callq  4016b0 <__sprintf_chk@plt>
          return format_buf;
  40233a:	db ac 24 a0 00 00 00 	fldt   0xa0(%rsp)
  402341:	48 8d 2d 68 9f 20 00 	lea    0x209f68(%rip),%rbp        # 60c2b0 <format_buf.7191>
  402348:	db 7c 24 50          	fstpt  0x50(%rsp)
  40234c:	e9 c0 f6 ff ff       	jmpq   401a11 <main+0x311>
  402351:	dd d8                	fstp   %st(0)
  402353:	eb 02                	jmp    402357 <main+0xc57>
  402355:	dd d8                	fstp   %st(0)
  402357:	31 c0                	xor    %eax,%eax
  402359:	45 31 c0             	xor    %r8d,%r8d
  40235c:	e9 9c f6 ff ff       	jmpq   4019fd <main+0x2fd>
      && isfinite (first.value) && 0 <= first.value && 0 <= last.value
  402361:	0f 85 1d fc ff ff    	jne    401f84 <main+0x884>
  402367:	db 6c 24 40          	fldt   0x40(%rsp)
  40236b:	df f1                	fcomip %st(1),%st
  40236d:	dd d8                	fstp   %st(0)
  40236f:	0f 82 11 fc ff ff    	jb     401f86 <main+0x886>
  402375:	e9 15 ff ff ff       	jmpq   40228f <main+0xb8f>
          if (last.precision == 0 && prec)
  40237a:	85 c0                	test   %eax,%eax
  40237c:	0f 85 1a fe ff ff    	jne    40219c <main+0xa9c>
  402382:	e9 0e fe ff ff       	jmpq   402195 <main+0xa95>
        die (EXIT_FAILURE, 0,
  402387:	48 89 ef             	mov    %rbp,%rdi
  40238a:	e8 31 2e 00 00       	callq  4051c0 <quote>
  40238f:	ba 05 00 00 00       	mov    $0x5,%edx
  402394:	48 8d 35 0b 61 00 00 	lea    0x610b(%rip),%rsi        # 4084a6 <_IO_stdin_used+0x146>
  40239b:	31 ff                	xor    %edi,%edi
  40239d:	49 89 c4             	mov    %rax,%r12
  4023a0:	e8 6b f0 ff ff       	callq  401410 <dcgettext@plt>
  4023a5:	4c 89 e1             	mov    %r12,%rcx
  4023a8:	31 f6                	xor    %esi,%esi
  4023aa:	bf 01 00 00 00       	mov    $0x1,%edi
  4023af:	48 89 c2             	mov    %rax,%rdx
  4023b2:	31 c0                	xor    %eax,%eax
  4023b4:	e8 67 f2 ff ff       	callq  401620 <error@plt>
  int prec = MAX (first.precision, step.precision);
  4023b9:	83 bc 24 b8 00 00 00 	cmpl   $0x0,0xb8(%rsp)
  4023c0:	00 
  4023c1:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  4023c7:	44 0f 49 8c 24 b8 00 	cmovns 0xb8(%rsp),%r9d
  4023ce:	00 00 
  4023d0:	31 c0                	xor    %eax,%eax
  4023d2:	45 31 c0             	xor    %r8d,%r8d
  4023d5:	e9 83 fd ff ff       	jmpq   40215d <main+0xa5d>
            last_width--;  /* don't include space for '.' */
  4023da:	48 83 eb 01          	sub    $0x1,%rbx
          if (first.precision == 0 && prec)
  4023de:	e9 c5 fd ff ff       	jmpq   4021a8 <main+0xaa8>
  4023e3:	45 89 d0             	mov    %r10d,%r8d
  4023e6:	ba 1c 00 00 00       	mov    $0x1c,%edx
  4023eb:	be 01 00 00 00       	mov    $0x1,%esi
  4023f0:	31 c0                	xor    %eax,%eax
  4023f2:	48 8d 0d f6 60 00 00 	lea    0x60f6(%rip),%rcx        # 4084ef <_IO_stdin_used+0x18f>
  4023f9:	48 8d 3d b0 9e 20 00 	lea    0x209eb0(%rip),%rdi        # 60c2b0 <format_buf.7191>
  402400:	e8 ab f2 ff ff       	callq  4016b0 <__sprintf_chk@plt>
              return format_buf;
  402405:	db ac 24 a0 00 00 00 	fldt   0xa0(%rsp)
  40240c:	48 8d 2d 9d 9e 20 00 	lea    0x209e9d(%rip),%rbp        # 60c2b0 <format_buf.7191>
  402413:	db 7c 24 50          	fstpt  0x50(%rsp)
  402417:	e9 f5 f5 ff ff       	jmpq   401a11 <main+0x311>
      seq_fast (s1, s2, step.value);
  40241c:	d9 7c 24 6e          	fnstcw 0x6e(%rsp)
  402420:	de e1                	fsubp  %st,%st(1)
  402422:	0f b7 44 24 6e       	movzwl 0x6e(%rsp),%eax
  402427:	80 cc 0c             	or     $0xc,%ah
  40242a:	66 89 44 24 6c       	mov    %ax,0x6c(%rsp)
  40242f:	d9 6c 24 6c          	fldcw  0x6c(%rsp)
  402433:	df 7c 24 10          	fistpll 0x10(%rsp)
  402437:	d9 6c 24 6e          	fldcw  0x6e(%rsp)
  40243b:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
  402440:	49 0f ba fa 3f       	btc    $0x3f,%r10
  402445:	e9 9d fa ff ff       	jmpq   401ee7 <main+0x7e7>
      else if (asprintf (&s2, "%0.Lf", last.value) < 0)
  40244a:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  40244f:	ff 74 24 38          	pushq  0x38(%rsp)
  402453:	31 c0                	xor    %eax,%eax
  402455:	48 8d 35 8d 60 00 00 	lea    0x608d(%rip),%rsi        # 4084e9 <_IO_stdin_used+0x189>
  40245c:	ff 74 24 38          	pushq  0x38(%rsp)
  402460:	e8 3b 39 00 00       	callq  405da0 <rpl_asprintf>
  402465:	41 5a                	pop    %r10
  402467:	41 5b                	pop    %r11
  402469:	85 c0                	test   %eax,%eax
  40246b:	4c 8b 14 24          	mov    (%rsp),%r10
  40246f:	0f 89 43 fc ff ff    	jns    4020b8 <main+0x9b8>
  402475:	eb 02                	jmp    402479 <main+0xd79>
  402477:	dd d8                	fstp   %st(0)
        xalloc_die ();
  402479:	e8 12 38 00 00       	callq  405c90 <xalloc_die>
        seq_fast (s1, s2, step.value);
  40247e:	d9 7c 24 6e          	fnstcw 0x6e(%rsp)
  402482:	de e1                	fsubp  %st,%st(1)
  402484:	0f b7 44 24 6e       	movzwl 0x6e(%rsp),%eax
  402489:	80 cc 0c             	or     $0xc,%ah
  40248c:	66 89 44 24 6c       	mov    %ax,0x6c(%rsp)
  402491:	d9 6c 24 6c          	fldcw  0x6c(%rsp)
  402495:	df 3c 24             	fistpll (%rsp)
  402498:	d9 6c 24 6e          	fldcw  0x6e(%rsp)
  40249c:	48 8b 14 24          	mov    (%rsp),%rdx
  4024a0:	48 0f ba fa 3f       	btc    $0x3f,%rdx
  4024a5:	e9 59 fc ff ff       	jmpq   402103 <main+0xa03>
    die (EXIT_FAILURE, 0, _("format %s ends in %%"), quote (fmt));
  4024aa:	48 89 ef             	mov    %rbp,%rdi
  4024ad:	e8 0e 2d 00 00       	callq  4051c0 <quote>
  4024b2:	ba 05 00 00 00       	mov    $0x5,%edx
  4024b7:	48 8d 35 0d 60 00 00 	lea    0x600d(%rip),%rsi        # 4084cb <_IO_stdin_used+0x16b>
  4024be:	31 ff                	xor    %edi,%edi
  4024c0:	49 89 c4             	mov    %rax,%r12
  4024c3:	e8 48 ef ff ff       	callq  401410 <dcgettext@plt>
  4024c8:	4c 89 e1             	mov    %r12,%rcx
  4024cb:	31 f6                	xor    %esi,%esi
  4024cd:	bf 01 00 00 00       	mov    $0x1,%edi
  4024d2:	48 89 c2             	mov    %rax,%rdx
  4024d5:	31 c0                	xor    %eax,%eax
  4024d7:	e8 44 f1 ff ff       	callq  401620 <error@plt>
      die (EXIT_FAILURE, 0, _("format %s has too many %% directives"),
  4024dc:	48 89 ef             	mov    %rbp,%rdi
  4024df:	e8 dc 2c 00 00       	callq  4051c0 <quote>
  4024e4:	ba 05 00 00 00       	mov    $0x5,%edx
  4024e9:	48 8d 35 78 66 00 00 	lea    0x6678(%rip),%rsi        # 408b68 <_IO_stdin_used+0x808>
  4024f0:	31 ff                	xor    %edi,%edi
  4024f2:	49 89 c4             	mov    %rax,%r12
  4024f5:	e8 16 ef ff ff       	callq  401410 <dcgettext@plt>
  4024fa:	4c 89 e1             	mov    %r12,%rcx
  4024fd:	31 f6                	xor    %esi,%esi
  4024ff:	bf 01 00 00 00       	mov    $0x1,%edi
  402504:	48 89 c2             	mov    %rax,%rdx
  402507:	31 c0                	xor    %eax,%eax
  402509:	e8 12 f1 ff ff       	callq  401620 <error@plt>
    die (EXIT_FAILURE, 0,
  40250e:	48 89 ef             	mov    %rbp,%rdi
  402511:	44 89 04 24          	mov    %r8d,(%rsp)
  402515:	e8 a6 2c 00 00       	callq  4051c0 <quote>
  40251a:	ba 05 00 00 00       	mov    $0x5,%edx
  40251f:	48 8d 35 1a 66 00 00 	lea    0x661a(%rip),%rsi        # 408b40 <_IO_stdin_used+0x7e0>
  402526:	31 ff                	xor    %edi,%edi
  402528:	49 89 c4             	mov    %rax,%r12
  40252b:	e8 e0 ee ff ff       	callq  401410 <dcgettext@plt>
  402530:	44 8b 04 24          	mov    (%rsp),%r8d
  402534:	4c 89 e1             	mov    %r12,%rcx
  402537:	31 f6                	xor    %esi,%esi
  402539:	48 89 c2             	mov    %rax,%rdx
  40253c:	bf 01 00 00 00       	mov    $0x1,%edi
  402541:	31 c0                	xor    %eax,%eax
  402543:	e8 d8 f0 ff ff       	callq  401620 <error@plt>
  402548:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40254f:	00 

0000000000402550 <_start>:
  402550:	31 ed                	xor    %ebp,%ebp
  402552:	49 89 d1             	mov    %rdx,%r9
  402555:	5e                   	pop    %rsi
  402556:	48 89 e2             	mov    %rsp,%rdx
  402559:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40255d:	50                   	push   %rax
  40255e:	54                   	push   %rsp
  40255f:	49 c7 c0 20 83 40 00 	mov    $0x408320,%r8
  402566:	48 c7 c1 b0 82 40 00 	mov    $0x4082b0,%rcx
  40256d:	48 c7 c7 00 17 40 00 	mov    $0x401700,%rdi
  402574:	ff 15 6e 9a 20 00    	callq  *0x209a6e(%rip)        # 60bfe8 <__libc_start_main@GLIBC_2.2.5>
  40257a:	f4                   	hlt    
  40257b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000402580 <_dl_relocate_static_pie>:
  402580:	f3 c3                	repz retq 
  402582:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402589:	00 00 00 
  40258c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000402590 <deregister_tm_clones>:
  402590:	b8 60 c2 60 00       	mov    $0x60c260,%eax
  402595:	48 3d 60 c2 60 00    	cmp    $0x60c260,%rax
  40259b:	74 13                	je     4025b0 <deregister_tm_clones+0x20>
  40259d:	b8 00 00 00 00       	mov    $0x0,%eax
  4025a2:	48 85 c0             	test   %rax,%rax
  4025a5:	74 09                	je     4025b0 <deregister_tm_clones+0x20>
  4025a7:	bf 60 c2 60 00       	mov    $0x60c260,%edi
  4025ac:	ff e0                	jmpq   *%rax
  4025ae:	66 90                	xchg   %ax,%ax
  4025b0:	c3                   	retq   
  4025b1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4025b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4025bd:	00 00 00 

00000000004025c0 <register_tm_clones>:
  4025c0:	be 60 c2 60 00       	mov    $0x60c260,%esi
  4025c5:	48 81 ee 60 c2 60 00 	sub    $0x60c260,%rsi
  4025cc:	48 89 f0             	mov    %rsi,%rax
  4025cf:	48 c1 ee 3f          	shr    $0x3f,%rsi
  4025d3:	48 c1 f8 03          	sar    $0x3,%rax
  4025d7:	48 01 c6             	add    %rax,%rsi
  4025da:	48 d1 fe             	sar    %rsi
  4025dd:	74 11                	je     4025f0 <register_tm_clones+0x30>
  4025df:	b8 00 00 00 00       	mov    $0x0,%eax
  4025e4:	48 85 c0             	test   %rax,%rax
  4025e7:	74 07                	je     4025f0 <register_tm_clones+0x30>
  4025e9:	bf 60 c2 60 00       	mov    $0x60c260,%edi
  4025ee:	ff e0                	jmpq   *%rax
  4025f0:	c3                   	retq   
  4025f1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4025f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4025fd:	00 00 00 

0000000000402600 <__do_global_dtors_aux>:
  402600:	80 3d a1 9c 20 00 00 	cmpb   $0x0,0x209ca1(%rip)        # 60c2a8 <completed.8088>
  402607:	75 17                	jne    402620 <__do_global_dtors_aux+0x20>
  402609:	55                   	push   %rbp
  40260a:	48 89 e5             	mov    %rsp,%rbp
  40260d:	e8 7e ff ff ff       	callq  402590 <deregister_tm_clones>
  402612:	c6 05 8f 9c 20 00 01 	movb   $0x1,0x209c8f(%rip)        # 60c2a8 <completed.8088>
  402619:	5d                   	pop    %rbp
  40261a:	c3                   	retq   
  40261b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  402620:	c3                   	retq   
  402621:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  402626:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40262d:	00 00 00 

0000000000402630 <frame_dummy>:
  402630:	eb 8e                	jmp    4025c0 <register_tm_clones>
  402632:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402639:	00 00 00 
  40263c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000402640 <all_digits_p>:
  return ISDIGIT (s[0]) && n == strspn (s, "0123456789");
  402640:	0f be 17             	movsbl (%rdi),%edx
  402643:	31 c0                	xor    %eax,%eax
  402645:	83 ea 30             	sub    $0x30,%edx
  402648:	83 fa 09             	cmp    $0x9,%edx
  40264b:	77 28                	ja     402675 <all_digits_p+0x35>
{
  40264d:	53                   	push   %rbx
  size_t n = strlen (s);
  40264e:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  402652:	49 89 f8             	mov    %rdi,%r8
  return ISDIGIT (s[0]) && n == strspn (s, "0123456789");
  402655:	48 8d 35 08 5d 00 00 	lea    0x5d08(%rip),%rsi        # 408364 <_IO_stdin_used+0x4>
  size_t n = strlen (s);
  40265c:	f2 ae                	repnz scas %es:(%rdi),%al
  return ISDIGIT (s[0]) && n == strspn (s, "0123456789");
  40265e:	4c 89 c7             	mov    %r8,%rdi
  size_t n = strlen (s);
  402661:	48 f7 d1             	not    %rcx
  402664:	48 8d 59 ff          	lea    -0x1(%rcx),%rbx
  return ISDIGIT (s[0]) && n == strspn (s, "0123456789");
  402668:	e8 53 ee ff ff       	callq  4014c0 <strspn@plt>
  40266d:	48 39 d8             	cmp    %rbx,%rax
}
  402670:	5b                   	pop    %rbx
  return ISDIGIT (s[0]) && n == strspn (s, "0123456789");
  402671:	0f 94 c0             	sete   %al
}
  402674:	c3                   	retq   
  402675:	c3                   	retq   
  402676:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40267d:	00 00 00 

0000000000402680 <io_error>:
{
  402680:	41 54                	push   %r12
  clearerr (stdout);
  402682:	48 8b 3d df 9b 20 00 	mov    0x209bdf(%rip),%rdi        # 60c268 <stdout@@GLIBC_2.2.5>
  402689:	e8 42 ed ff ff       	callq  4013d0 <clearerr_unlocked@plt>
  die (EXIT_FAILURE, errno, _("write error"));
  40268e:	ba 05 00 00 00       	mov    $0x5,%edx
  402693:	48 8d 35 d5 5c 00 00 	lea    0x5cd5(%rip),%rsi        # 40836f <_IO_stdin_used+0xf>
  40269a:	31 ff                	xor    %edi,%edi
  40269c:	e8 6f ed ff ff       	callq  401410 <dcgettext@plt>
  4026a1:	49 89 c4             	mov    %rax,%r12
  4026a4:	e8 c7 ec ff ff       	callq  401370 <__errno_location@plt>
  4026a9:	4c 89 e2             	mov    %r12,%rdx
  4026ac:	bf 01 00 00 00       	mov    $0x1,%edi
  4026b1:	8b 30                	mov    (%rax),%esi
  4026b3:	31 c0                	xor    %eax,%eax
  4026b5:	e8 66 ef ff ff       	callq  401620 <error@plt>
  4026ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004026c0 <seq_fast>:
{
  4026c0:	41 57                	push   %r15
  4026c2:	49 89 f9             	mov    %rdi,%r9
  bool inf = STREQ (b, "inf");
  4026c5:	b9 04 00 00 00       	mov    $0x4,%ecx
{
  4026ca:	49 89 f0             	mov    %rsi,%r8
  4026cd:	41 56                	push   %r14
  bool inf = STREQ (b, "inf");
  4026cf:	48 8d 3d a5 5c 00 00 	lea    0x5ca5(%rip),%rdi        # 40837b <_IO_stdin_used+0x1b>
{
  4026d6:	41 55                	push   %r13
  4026d8:	41 54                	push   %r12
  4026da:	55                   	push   %rbp
  4026db:	53                   	push   %rbx
  4026dc:	48 83 ec 48          	sub    $0x48,%rsp
  bool inf = STREQ (b, "inf");
  4026e0:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
{
  4026e2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  bool inf = STREQ (b, "inf");
  4026e7:	41 0f 97 c4          	seta   %r12b
  4026eb:	41 80 dc 00          	sbb    $0x0,%r12b
  while (*s == '0')
  4026ef:	41 80 39 30          	cmpb   $0x30,(%r9)
  bool inf = STREQ (b, "inf");
  4026f3:	41 0f be c4          	movsbl %r12b,%eax
  4026f7:	89 44 24 10          	mov    %eax,0x10(%rsp)
  while (*s == '0')
  4026fb:	0f 85 bb 03 00 00    	jne    402abc <seq_fast+0x3fc>
  402701:	4c 89 c8             	mov    %r9,%rax
  402704:	0f 1f 40 00          	nopl   0x0(%rax)
    ++s;
  402708:	49 89 c5             	mov    %rax,%r13
  while (*s == '0')
  40270b:	0f b6 50 01          	movzbl 0x1(%rax),%edx
    ++s;
  40270f:	48 83 c0 01          	add    $0x1,%rax
  while (*s == '0')
  402713:	80 fa 30             	cmp    $0x30,%dl
  402716:	74 f0                	je     402708 <seq_fast+0x48>
  if (!*s && s != p)
  402718:	84 d2                	test   %dl,%dl
  40271a:	0f 85 43 01 00 00    	jne    402863 <seq_fast+0x1a3>
  402720:	49 39 c1             	cmp    %rax,%r9
  402723:	0f 84 3a 01 00 00    	je     402863 <seq_fast+0x1a3>
  while (*s == '0')
  402729:	41 80 38 30          	cmpb   $0x30,(%r8)
  40272d:	0f 85 81 03 00 00    	jne    402ab4 <seq_fast+0x3f4>
  402733:	4c 89 c0             	mov    %r8,%rax
  402736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40273d:	00 00 00 
    ++s;
  402740:	49 89 c7             	mov    %rax,%r15
  while (*s == '0')
  402743:	0f b6 50 01          	movzbl 0x1(%rax),%edx
    ++s;
  402747:	48 83 c0 01          	add    $0x1,%rax
  while (*s == '0')
  40274b:	80 fa 30             	cmp    $0x30,%dl
  40274e:	74 f0                	je     402740 <seq_fast+0x80>
  if (!*s && s != p)
  402750:	49 39 c0             	cmp    %rax,%r8
  402753:	0f 84 02 01 00 00    	je     40285b <seq_fast+0x19b>
  402759:	84 d2                	test   %dl,%dl
  40275b:	0f 85 fa 00 00 00    	jne    40285b <seq_fast+0x19b>
  size_t p_len = strlen (a);
  402761:	4c 89 ef             	mov    %r13,%rdi
  402764:	bb 1f 00 00 00       	mov    $0x1f,%ebx
  402769:	e8 c2 ec ff ff       	callq  401430 <strlen@plt>
  40276e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  402772:	49 89 c4             	mov    %rax,%r12
  402775:	48 89 c5             	mov    %rax,%rbp
  size_t q_len = inf ? 0 : strlen (b);
  402778:	8b 44 24 10          	mov    0x10(%rsp),%eax
  40277c:	48 83 fa 1f          	cmp    $0x1f,%rdx
  402780:	48 0f 43 da          	cmovae %rdx,%rbx
  402784:	85 c0                	test   %eax,%eax
  402786:	0f 84 df 00 00 00    	je     40286b <seq_fast+0x1ab>
  40278c:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  402791:	31 c0                	xor    %eax,%eax
  402793:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  402797:	4c 89 ff             	mov    %r15,%rdi
  40279a:	f2 ae                	repnz scas %es:(%rdi),%al
  40279c:	48 f7 d1             	not    %rcx
  40279f:	4c 8d 71 ff          	lea    -0x1(%rcx),%r14
  4027a3:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  size_t inc_size = MAX (MAX (p_len + 1, q_len), INITIAL_ALLOC_DIGITS);
  4027a8:	4c 39 f3             	cmp    %r14,%rbx
  4027ab:	49 0f 42 de          	cmovb  %r14,%rbx
  char *p0 = xmalloc (inc_size + 1);
  4027af:	4c 8d 5b 01          	lea    0x1(%rbx),%r11
  4027b3:	4c 89 df             	mov    %r11,%rdi
  4027b6:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  4027bb:	e8 b0 30 00 00       	callq  405870 <xmalloc>
  char *p = memcpy (p0 + inc_size - p_len, a, p_len + 1);
  4027c0:	48 89 df             	mov    %rbx,%rdi
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  4027c3:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  4027c8:	4c 89 ee             	mov    %r13,%rsi
  4027cb:	4c 29 e7             	sub    %r12,%rdi
  char *p0 = xmalloc (inc_size + 1);
  4027ce:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  char *p = memcpy (p0 + inc_size - p_len, a, p_len + 1);
  4027d3:	48 01 c7             	add    %rax,%rdi
  4027d6:	e8 65 ed ff ff       	callq  401540 <memcpy@plt>
      q0 = xmalloc (inc_size + 1);
  4027db:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  4027e0:	49 89 c5             	mov    %rax,%r13
  4027e3:	4c 89 df             	mov    %r11,%rdi
  4027e6:	4c 89 5c 24 30       	mov    %r11,0x30(%rsp)
  4027eb:	e8 80 30 00 00       	callq  405870 <xmalloc>
  4027f0:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
      q = memcpy (q0 + inc_size - q_len, b, q_len + 1);
  4027f5:	48 89 df             	mov    %rbx,%rdi
  4027f8:	4c 89 fe             	mov    %r15,%rsi
  4027fb:	4c 29 f7             	sub    %r14,%rdi
      q0 = xmalloc (inc_size + 1);
  4027fe:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      q = memcpy (q0 + inc_size - q_len, b, q_len + 1);
  402803:	48 01 c7             	add    %rax,%rdi
  402806:	48 89 ca             	mov    %rcx,%rdx
  402809:	e8 32 ed ff ff       	callq  401540 <memcpy@plt>
  if (a_len < b_len)
  40280e:	4d 39 f4             	cmp    %r14,%r12
  402811:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
  402816:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40281b:	0f 82 8f 00 00 00    	jb     4028b0 <seq_fast+0x1f0>
  if (b_len < a_len)
  402821:	77 16                	ja     402839 <seq_fast+0x179>
  return (memcmp (a, b, a_len));
  402823:	4c 89 e2             	mov    %r12,%rdx
  402826:	48 89 c6             	mov    %rax,%rsi
  402829:	4c 89 ef             	mov    %r13,%rdi
  40282c:	e8 af ec ff ff       	callq  4014e0 <memcmp@plt>
  bool ok = inf || cmp (p, p_len, q, q_len) <= 0;
  402831:	85 c0                	test   %eax,%eax
  402833:	0f 8e 71 02 00 00    	jle    402aaa <seq_fast+0x3ea>
  free (p0);
  402839:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  40283e:	e8 8d 0b 00 00       	callq  4033d0 <rpl_free>
  free (q0);
  402843:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
}
  402848:	48 83 c4 48          	add    $0x48,%rsp
  40284c:	5b                   	pop    %rbx
  40284d:	5d                   	pop    %rbp
  40284e:	41 5c                	pop    %r12
  402850:	41 5d                	pop    %r13
  402852:	41 5e                	pop    %r14
  402854:	41 5f                	pop    %r15
  free (q0);
  402856:	e9 75 0b 00 00       	jmpq   4033d0 <rpl_free>
  if (!*s && s != p)
  40285b:	49 89 c7             	mov    %rax,%r15
  40285e:	e9 fe fe ff ff       	jmpq   402761 <seq_fast+0xa1>
  402863:	49 89 c5             	mov    %rax,%r13
  402866:	e9 be fe ff ff       	jmpq   402729 <seq_fast+0x69>
  char *p0 = xmalloc (inc_size + 1);
  40286b:	4c 8d 5b 01          	lea    0x1(%rbx),%r11
  40286f:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  size_t q_len = inf ? 0 : strlen (b);
  402874:	45 31 f6             	xor    %r14d,%r14d
  char *p0 = xmalloc (inc_size + 1);
  402877:	4c 89 df             	mov    %r11,%rdi
  40287a:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  40287f:	e8 ec 2f 00 00       	callq  405870 <xmalloc>
  char *p = memcpy (p0 + inc_size - p_len, a, p_len + 1);
  402884:	48 89 df             	mov    %rbx,%rdi
  402887:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  40288c:	4c 89 ee             	mov    %r13,%rsi
  40288f:	4c 29 e7             	sub    %r12,%rdi
  char *p0 = xmalloc (inc_size + 1);
  402892:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  char *p = memcpy (p0 + inc_size - p_len, a, p_len + 1);
  402897:	48 01 c7             	add    %rax,%rdi
  40289a:	e8 a1 ec ff ff       	callq  401540 <memcpy@plt>
  40289f:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    q = q0 = NULL;
  4028a4:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  4028ab:	00 00 
  4028ad:	49 89 c5             	mov    %rax,%r13
      size_t buf_size = MAX (BUFSIZ, (inc_size + 1) * 2);
  4028b0:	4d 01 db             	add    %r11,%r11
  4028b3:	b8 00 20 00 00       	mov    $0x2000,%eax
  4028b8:	49 81 fb 00 20 00 00 	cmp    $0x2000,%r11
  4028bf:	49 0f 43 c3          	cmovae %r11,%rax
      char *buf = xmalloc (buf_size);
  4028c3:	48 89 c7             	mov    %rax,%rdi
  4028c6:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  4028cb:	e8 a0 2f 00 00       	callq  405870 <xmalloc>
  return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  4028d0:	4c 89 e2             	mov    %r12,%rdx
  4028d3:	4c 89 ee             	mov    %r13,%rsi
  4028d6:	49 89 c7             	mov    %rax,%r15
      char const *buf_end = buf + buf_size;
  4028d9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4028de:	4c 89 ff             	mov    %r15,%rdi
  4028e1:	4c 01 f8             	add    %r15,%rax
  4028e4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4028e9:	e8 02 ed ff ff       	callq  4015f0 <mempcpy@plt>
  4028ee:	83 7c 24 10 00       	cmpl   $0x0,0x10(%rsp)
  4028f3:	48 89 c1             	mov    %rax,%rcx
  4028f6:	41 0f 94 c4          	sete   %r12b
  4028fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
          for (uintmax_t n_incr = step; n_incr; n_incr--)
  402900:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  402905:	48 85 c0             	test   %rax,%rax
  402908:	74 3a                	je     402944 <seq_fast+0x284>
  40290a:	48 89 c6             	mov    %rax,%rsi
  40290d:	0f 1f 00             	nopl   (%rax)
  char *endp = s + *s_len - 1;
  402910:	49 8d 44 2d ff       	lea    -0x1(%r13,%rbp,1),%rax
  402915:	eb 1a                	jmp    402931 <seq_fast+0x271>
  402917:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40291e:	00 00 
      *endp-- = '0';
  402920:	48 83 e8 01          	sub    $0x1,%rax
  402924:	c6 40 01 30          	movb   $0x30,0x1(%rax)
  while (endp >= s);
  402928:	49 39 c5             	cmp    %rax,%r13
  40292b:	0f 87 af 00 00 00    	ja     4029e0 <seq_fast+0x320>
      if ((*endp)++ < '9')
  402931:	0f b6 10             	movzbl (%rax),%edx
  402934:	80 fa 38             	cmp    $0x38,%dl
  402937:	7f e7                	jg     402920 <seq_fast+0x260>
  402939:	83 c2 01             	add    $0x1,%edx
  40293c:	88 10                	mov    %dl,(%rax)
          for (uintmax_t n_incr = step; n_incr; n_incr--)
  40293e:	48 83 ee 01          	sub    $0x1,%rsi
  402942:	75 cc                	jne    402910 <seq_fast+0x250>
  if (a_len < b_len)
  402944:	4c 39 f5             	cmp    %r14,%rbp
  402947:	72 2c                	jb     402975 <seq_fast+0x2b5>
  402949:	45 84 e4             	test   %r12b,%r12b
  40294c:	75 27                	jne    402975 <seq_fast+0x2b5>
  if (b_len < a_len)
  40294e:	4c 39 f5             	cmp    %r14,%rbp
  402951:	0f 87 9b 00 00 00    	ja     4029f2 <seq_fast+0x332>
  return (memcmp (a, b, a_len));
  402957:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  40295c:	48 89 ea             	mov    %rbp,%rdx
  40295f:	4c 89 ef             	mov    %r13,%rdi
  402962:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  402967:	e8 74 eb ff ff       	callq  4014e0 <memcmp@plt>
          if (! inf && 0 < cmp (p, p_len, q, q_len))
  40296c:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  402971:	85 c0                	test   %eax,%eax
  402973:	7f 7d                	jg     4029f2 <seq_fast+0x332>
          *bufp++ = *separator;
  402975:	48 8b 05 54 99 20 00 	mov    0x209954(%rip),%rax        # 60c2d0 <separator>
  40297c:	4c 8d 51 01          	lea    0x1(%rcx),%r10
  402980:	0f b6 00             	movzbl (%rax),%eax
  402983:	88 01                	mov    %al,(%rcx)
          if (p_len == inc_size)
  402985:	48 39 eb             	cmp    %rbp,%rbx
  402988:	0f 84 93 00 00 00    	je     402a21 <seq_fast+0x361>
  40298e:	48 89 ea             	mov    %rbp,%rdx
  402991:	4c 89 ee             	mov    %r13,%rsi
  402994:	4c 89 d7             	mov    %r10,%rdi
  402997:	e8 54 ec ff ff       	callq  4015f0 <mempcpy@plt>
  40299c:	48 89 c1             	mov    %rax,%rcx
          if (buf_end - (p_len + 1) < bufp)
  40299f:	48 89 e8             	mov    %rbp,%rax
  4029a2:	48 f7 d0             	not    %rax
  4029a5:	48 03 44 24 20       	add    0x20(%rsp),%rax
  4029aa:	48 39 c1             	cmp    %rax,%rcx
  4029ad:	0f 86 4d ff ff ff    	jbe    402900 <seq_fast+0x240>
              if (fwrite (buf, bufp - buf, 1, stdout) != 1)
  4029b3:	4c 29 f9             	sub    %r15,%rcx
  4029b6:	ba 01 00 00 00       	mov    $0x1,%edx
  4029bb:	4c 89 ff             	mov    %r15,%rdi
  4029be:	48 89 ce             	mov    %rcx,%rsi
  4029c1:	48 8b 0d a0 98 20 00 	mov    0x2098a0(%rip),%rcx        # 60c268 <stdout@@GLIBC_2.2.5>
  4029c8:	e8 e3 eb ff ff       	callq  4015b0 <fwrite_unlocked@plt>
  4029cd:	48 83 f8 01          	cmp    $0x1,%rax
  4029d1:	0f 85 ed 00 00 00    	jne    402ac4 <seq_fast+0x404>
  4029d7:	4c 89 f9             	mov    %r15,%rcx
  4029da:	e9 21 ff ff ff       	jmpq   402900 <seq_fast+0x240>
  4029df:	90                   	nop
  *--(*s0) = '1';
  4029e0:	41 c6 45 ff 31       	movb   $0x31,-0x1(%r13)
  ++*s_len;
  4029e5:	48 83 c5 01          	add    $0x1,%rbp
  *--(*s0) = '1';
  4029e9:	49 83 ed 01          	sub    $0x1,%r13
  4029ed:	e9 4c ff ff ff       	jmpq   40293e <seq_fast+0x27e>
      *bufp++ = *terminator;
  4029f2:	c6 01 0a             	movb   $0xa,(%rcx)
  4029f5:	48 8d 71 01          	lea    0x1(%rcx),%rsi
      if (fwrite (buf, bufp - buf, 1, stdout) != 1)
  4029f9:	ba 01 00 00 00       	mov    $0x1,%edx
  4029fe:	4c 89 ff             	mov    %r15,%rdi
  402a01:	48 8b 0d 60 98 20 00 	mov    0x209860(%rip),%rcx        # 60c268 <stdout@@GLIBC_2.2.5>
  402a08:	4c 29 fe             	sub    %r15,%rsi
  402a0b:	e8 a0 eb ff ff       	callq  4015b0 <fwrite_unlocked@plt>
  402a10:	48 83 e8 01          	sub    $0x1,%rax
  402a14:	0f 85 aa 00 00 00    	jne    402ac4 <seq_fast+0x404>
    exit (EXIT_SUCCESS);
  402a1a:	31 ff                	xor    %edi,%edi
  402a1c:	e8 2f ec ff ff       	callq  401650 <exit@plt>
              inc_size *= 2;
  402a21:	48 01 db             	add    %rbx,%rbx
              p0 = xrealloc (p0, inc_size + 1);
  402a24:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  402a29:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
  402a2e:	48 8d 4b 01          	lea    0x1(%rbx),%rcx
  402a32:	48 89 ce             	mov    %rcx,%rsi
  402a35:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  402a3a:	e8 91 2e 00 00       	callq  4058d0 <xrealloc>
              p = memmove (p0 + p_len, p0, p_len + 1);
  402a3f:	48 8d 55 01          	lea    0x1(%rbp),%rdx
              p0 = xrealloc (p0, inc_size + 1);
  402a43:	48 89 c6             	mov    %rax,%rsi
              p = memmove (p0 + p_len, p0, p_len + 1);
  402a46:	48 8d 3c 28          	lea    (%rax,%rbp,1),%rdi
              p0 = xrealloc (p0, inc_size + 1);
  402a4a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  402a4f:	e8 ac eb ff ff       	callq  401600 <memmove@plt>
              if (buf_size < (inc_size + 1) * 2)
  402a54:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  402a59:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
  402a5e:	49 89 c5             	mov    %rax,%r13
  402a61:	48 01 c9             	add    %rcx,%rcx
  402a64:	48 3b 4c 24 30       	cmp    0x30(%rsp),%rcx
  402a69:	0f 86 1f ff ff ff    	jbe    40298e <seq_fast+0x2ce>
                  size_t buf_offset = bufp - buf;
  402a6f:	4d 29 fa             	sub    %r15,%r10
                  buf = xrealloc (buf, buf_size);
  402a72:	48 89 ce             	mov    %rcx,%rsi
  402a75:	4c 89 ff             	mov    %r15,%rdi
  402a78:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
                  size_t buf_offset = bufp - buf;
  402a7d:	4c 89 54 24 10       	mov    %r10,0x10(%rsp)
                  buf = xrealloc (buf, buf_size);
  402a82:	e8 49 2e 00 00       	callq  4058d0 <xrealloc>
                  buf_end = buf + buf_size;
  402a87:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
                  bufp = buf + buf_offset;
  402a8c:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
                  buf = xrealloc (buf, buf_size);
  402a91:	49 89 c7             	mov    %rax,%r15
                  buf_end = buf + buf_size;
  402a94:	48 8d 04 08          	lea    (%rax,%rcx,1),%rax
                  bufp = buf + buf_offset;
  402a98:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  402a9d:	4d 01 fa             	add    %r15,%r10
                  buf_end = buf + buf_size;
  402aa0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
                  bufp = buf + buf_offset;
  402aa5:	e9 e4 fe ff ff       	jmpq   40298e <seq_fast+0x2ce>
  402aaa:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
  402aaf:	e9 fc fd ff ff       	jmpq   4028b0 <seq_fast+0x1f0>
  while (*s == '0')
  402ab4:	4d 89 c7             	mov    %r8,%r15
  402ab7:	e9 a5 fc ff ff       	jmpq   402761 <seq_fast+0xa1>
  402abc:	4d 89 cd             	mov    %r9,%r13
  402abf:	e9 65 fc ff ff       	jmpq   402729 <seq_fast+0x69>
                io_error ();
  402ac4:	e8 b7 fb ff ff       	callq  402680 <io_error>
  402ac9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000402ad0 <usage>:
{
  402ad0:	41 55                	push   %r13
    emit_try_help ();
  402ad2:	ba 05 00 00 00       	mov    $0x5,%edx
{
  402ad7:	41 54                	push   %r12
  402ad9:	55                   	push   %rbp
  402ada:	89 fd                	mov    %edi,%ebp
  402adc:	53                   	push   %rbx
  402add:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  402ae4:	4c 8b 25 05 98 20 00 	mov    0x209805(%rip),%r12        # 60c2f0 <program_name>
  402aeb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  402af2:	00 00 
  402af4:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  402af9:	31 c0                	xor    %eax,%eax
  if (status != EXIT_SUCCESS)
  402afb:	85 ff                	test   %edi,%edi
  402afd:	74 2e                	je     402b2d <usage+0x5d>
    emit_try_help ();
  402aff:	48 8d 35 2a 5a 00 00 	lea    0x5a2a(%rip),%rsi        # 408530 <_IO_stdin_used+0x1d0>
  402b06:	31 ff                	xor    %edi,%edi
  402b08:	e8 03 e9 ff ff       	callq  401410 <dcgettext@plt>
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  402b0d:	48 8b 3d 8c 97 20 00 	mov    0x20978c(%rip),%rdi        # 60c2a0 <stderr@@GLIBC_2.2.5>
  402b14:	4c 89 e1             	mov    %r12,%rcx
  402b17:	be 01 00 00 00       	mov    $0x1,%esi
  402b1c:	48 89 c2             	mov    %rax,%rdx
  402b1f:	31 c0                	xor    %eax,%eax
  402b21:	e8 4a eb ff ff       	callq  401670 <__fprintf_chk@plt>
  exit (status);
  402b26:	89 ef                	mov    %ebp,%edi
  402b28:	e8 23 eb ff ff       	callq  401650 <exit@plt>
      printf (_("\
  402b2d:	48 8d 35 24 5a 00 00 	lea    0x5a24(%rip),%rsi        # 408558 <_IO_stdin_used+0x1f8>
  402b34:	31 ff                	xor    %edi,%edi
}

static inline void
emit_ancillary_info (char const *program)
{
  struct infomap { char const *program; char const *node; } const infomap[] = {
  402b36:	48 8d 1d 87 58 00 00 	lea    0x5887(%rip),%rbx        # 4083c4 <_IO_stdin_used+0x64>
  402b3d:	e8 ce e8 ff ff       	callq  401410 <dcgettext@plt>
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  402b42:	4d 89 e0             	mov    %r12,%r8
  402b45:	4c 89 e1             	mov    %r12,%rcx
  402b48:	4c 89 e2             	mov    %r12,%rdx
  402b4b:	48 89 c6             	mov    %rax,%rsi
  402b4e:	bf 01 00 00 00       	mov    $0x1,%edi
  402b53:	31 c0                	xor    %eax,%eax
  402b55:	e8 86 ea ff ff       	callq  4015e0 <__printf_chk@plt>
      fputs (_("\
  402b5a:	4c 8b 25 07 97 20 00 	mov    0x209707(%rip),%r12        # 60c268 <stdout@@GLIBC_2.2.5>
  402b61:	ba 05 00 00 00       	mov    $0x5,%edx
  402b66:	31 ff                	xor    %edi,%edi
  402b68:	48 8d 35 51 5a 00 00 	lea    0x5a51(%rip),%rsi        # 4085c0 <_IO_stdin_used+0x260>
  402b6f:	e8 9c e8 ff ff       	callq  401410 <dcgettext@plt>
  402b74:	4c 89 e6             	mov    %r12,%rsi
  402b77:	48 89 c7             	mov    %rax,%rdi
  402b7a:	e8 71 e9 ff ff       	callq  4014f0 <fputs_unlocked@plt>
  fputs (_("\n\
  402b7f:	4c 8b 25 e2 96 20 00 	mov    0x2096e2(%rip),%r12        # 60c268 <stdout@@GLIBC_2.2.5>
  402b86:	ba 05 00 00 00       	mov    $0x5,%edx
  402b8b:	31 ff                	xor    %edi,%edi
  402b8d:	48 8d 35 6c 5a 00 00 	lea    0x5a6c(%rip),%rsi        # 408600 <_IO_stdin_used+0x2a0>
  402b94:	e8 77 e8 ff ff       	callq  401410 <dcgettext@plt>
  402b99:	4c 89 e6             	mov    %r12,%rsi
  402b9c:	48 89 c7             	mov    %rax,%rdi
  402b9f:	e8 4c e9 ff ff       	callq  4014f0 <fputs_unlocked@plt>
      fputs (_("\
  402ba4:	4c 8b 25 bd 96 20 00 	mov    0x2096bd(%rip),%r12        # 60c268 <stdout@@GLIBC_2.2.5>
  402bab:	ba 05 00 00 00       	mov    $0x5,%edx
  402bb0:	31 ff                	xor    %edi,%edi
  402bb2:	48 8d 35 97 5a 00 00 	lea    0x5a97(%rip),%rsi        # 408650 <_IO_stdin_used+0x2f0>
  402bb9:	e8 52 e8 ff ff       	callq  401410 <dcgettext@plt>
  402bbe:	4c 89 e6             	mov    %r12,%rsi
  402bc1:	48 89 c7             	mov    %rax,%rdi
  402bc4:	e8 27 e9 ff ff       	callq  4014f0 <fputs_unlocked@plt>
      fputs (HELP_OPTION_DESCRIPTION, stdout);
  402bc9:	4c 8b 25 98 96 20 00 	mov    0x209698(%rip),%r12        # 60c268 <stdout@@GLIBC_2.2.5>
  402bd0:	ba 05 00 00 00       	mov    $0x5,%edx
  402bd5:	31 ff                	xor    %edi,%edi
  402bd7:	48 8d 35 4a 5b 00 00 	lea    0x5b4a(%rip),%rsi        # 408728 <_IO_stdin_used+0x3c8>
  402bde:	e8 2d e8 ff ff       	callq  401410 <dcgettext@plt>
  402be3:	4c 89 e6             	mov    %r12,%rsi
  402be6:	48 89 c7             	mov    %rax,%rdi
  402be9:	e8 02 e9 ff ff       	callq  4014f0 <fputs_unlocked@plt>
      fputs (VERSION_OPTION_DESCRIPTION, stdout);
  402bee:	4c 8b 25 73 96 20 00 	mov    0x209673(%rip),%r12        # 60c268 <stdout@@GLIBC_2.2.5>
  402bf5:	ba 05 00 00 00       	mov    $0x5,%edx
  402bfa:	31 ff                	xor    %edi,%edi
  402bfc:	48 8d 35 55 5b 00 00 	lea    0x5b55(%rip),%rsi        # 408758 <_IO_stdin_used+0x3f8>
  402c03:	e8 08 e8 ff ff       	callq  401410 <dcgettext@plt>
  402c08:	4c 89 e6             	mov    %r12,%rsi
  402c0b:	48 89 c7             	mov    %rax,%rdi
  402c0e:	e8 dd e8 ff ff       	callq  4014f0 <fputs_unlocked@plt>
      fputs (_("\
  402c13:	4c 8b 25 4e 96 20 00 	mov    0x20964e(%rip),%r12        # 60c268 <stdout@@GLIBC_2.2.5>
  402c1a:	ba 05 00 00 00       	mov    $0x5,%edx
  402c1f:	31 ff                	xor    %edi,%edi
  402c21:	48 8d 35 70 5b 00 00 	lea    0x5b70(%rip),%rsi        # 408798 <_IO_stdin_used+0x438>
  402c28:	e8 e3 e7 ff ff       	callq  401410 <dcgettext@plt>
  402c2d:	4c 89 e6             	mov    %r12,%rsi
  402c30:	48 89 c7             	mov    %rax,%rdi
  402c33:	e8 b8 e8 ff ff       	callq  4014f0 <fputs_unlocked@plt>
      fputs (_("\
  402c38:	4c 8b 25 29 96 20 00 	mov    0x209629(%rip),%r12        # 60c268 <stdout@@GLIBC_2.2.5>
  402c3f:	ba 05 00 00 00       	mov    $0x5,%edx
  402c44:	31 ff                	xor    %edi,%edi
  402c46:	48 8d 35 53 5d 00 00 	lea    0x5d53(%rip),%rsi        # 4089a0 <_IO_stdin_used+0x640>
  402c4d:	e8 be e7 ff ff       	callq  401410 <dcgettext@plt>
  402c52:	4c 89 e6             	mov    %r12,%rsi
  402c55:	48 89 c7             	mov    %rax,%rdi
  402c58:	e8 93 e8 ff ff       	callq  4014f0 <fputs_unlocked@plt>
  struct infomap { char const *program; char const *node; } const infomap[] = {
  402c5d:	48 8d 05 1f 57 00 00 	lea    0x571f(%rip),%rax        # 408383 <_IO_stdin_used+0x23>
  402c64:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  402c69:	48 8d 1d 5e 57 00 00 	lea    0x575e(%rip),%rbx        # 4083ce <_IO_stdin_used+0x6e>
  402c70:	48 89 04 24          	mov    %rax,(%rsp)
  402c74:	48 8d 05 0a 57 00 00 	lea    0x570a(%rip),%rax        # 408385 <_IO_stdin_used+0x25>
  402c7b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  402c80:	48 8d 05 76 57 00 00 	lea    0x5776(%rip),%rax        # 4083fd <_IO_stdin_used+0x9d>
  402c87:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  402c8c:	48 8d 05 02 57 00 00 	lea    0x5702(%rip),%rax        # 408395 <_IO_stdin_used+0x35>
  402c93:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  402c98:	48 8d 05 0c 57 00 00 	lea    0x570c(%rip),%rax        # 4083ab <_IO_stdin_used+0x4b>
  402c9f:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
  402ca6:	00 00 
  402ca8:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  402caf:	00 00 
  402cb1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  402cb6:	48 8d 05 f8 56 00 00 	lea    0x56f8(%rip),%rax        # 4083b5 <_IO_stdin_used+0x55>
  402cbd:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  402cc2:	48 8d 1d 0f 57 00 00 	lea    0x570f(%rip),%rbx        # 4083d8 <_IO_stdin_used+0x78>
  402cc9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  402cce:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  402cd3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  402cd8:	48 89 5c 24 50       	mov    %rbx,0x50(%rsp)
  402cdd:	48 8d 1d 9b 56 00 00 	lea    0x569b(%rip),%rbx        # 40837f <_IO_stdin_used+0x1f>
  402ce4:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    { "sha512sum", "sha2 utilities" },
    { NULL, NULL }
  };

  char const *node = program;
  struct infomap const *map_prog = infomap;
  402ce9:	48 89 e0             	mov    %rsp,%rax
  402cec:	0f 1f 40 00          	nopl   0x0(%rax)

  while (map_prog->program && ! STREQ (program, map_prog->program))
  402cf0:	48 8b 78 10          	mov    0x10(%rax),%rdi
    map_prog++;
  402cf4:	48 83 c0 10          	add    $0x10,%rax
  while (map_prog->program && ! STREQ (program, map_prog->program))
  402cf8:	48 85 ff             	test   %rdi,%rdi
  402cfb:	74 14                	je     402d11 <usage+0x241>
  402cfd:	b9 04 00 00 00       	mov    $0x4,%ecx
  402d02:	48 89 de             	mov    %rbx,%rsi
  402d05:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  402d07:	0f 97 c2             	seta   %dl
  402d0a:	80 da 00             	sbb    $0x0,%dl
  402d0d:	84 d2                	test   %dl,%dl
  402d0f:	75 df                	jne    402cf0 <usage+0x220>

  if (map_prog->node)
  402d11:	4c 8b 60 08          	mov    0x8(%rax),%r12
    node = map_prog->node;

  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
  402d15:	ba 05 00 00 00       	mov    $0x5,%edx
  402d1a:	48 8d 35 c1 56 00 00 	lea    0x56c1(%rip),%rsi        # 4083e2 <_IO_stdin_used+0x82>
  402d21:	31 ff                	xor    %edi,%edi
  if (map_prog->node)
  402d23:	4d 85 e4             	test   %r12,%r12
  402d26:	0f 84 c1 00 00 00    	je     402ded <usage+0x31d>
  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
  402d2c:	e8 df e6 ff ff       	callq  401410 <dcgettext@plt>
  402d31:	48 8d 0d 38 5d 00 00 	lea    0x5d38(%rip),%rcx        # 408a70 <_IO_stdin_used+0x710>
  402d38:	bf 01 00 00 00       	mov    $0x1,%edi
  402d3d:	48 8d 15 b5 56 00 00 	lea    0x56b5(%rip),%rdx        # 4083f9 <_IO_stdin_used+0x99>
  402d44:	48 89 c6             	mov    %rax,%rsi
  402d47:	31 c0                	xor    %eax,%eax
  402d49:	e8 92 e8 ff ff       	callq  4015e0 <__printf_chk@plt>

  /* Don't output this redundant message for English locales.
     Note we still output for 'C' so that it gets included in the man page.  */
  char const *lc_messages = setlocale (LC_MESSAGES, NULL);
  402d4e:	bf 05 00 00 00       	mov    $0x5,%edi
  402d53:	31 f6                	xor    %esi,%esi
  402d55:	e8 76 e8 ff ff       	callq  4015d0 <setlocale@plt>
  402d5a:	48 89 c7             	mov    %rax,%rdi
  if (lc_messages && STRNCMP_LIT (lc_messages, "en_"))
  402d5d:	48 85 c0             	test   %rax,%rax
  402d60:	74 19                	je     402d7b <usage+0x2ab>
  402d62:	ba 03 00 00 00       	mov    $0x3,%edx
  402d67:	48 8d 35 99 56 00 00 	lea    0x5699(%rip),%rsi        # 408407 <_IO_stdin_used+0xa7>
  402d6e:	e8 0d e6 ff ff       	callq  401380 <strncmp@plt>
  402d73:	85 c0                	test   %eax,%eax
  402d75:	0f 85 07 01 00 00    	jne    402e82 <usage+0x3b2>
    }
  /* .htaccess on the coreutils web site maps programs to the appropriate page,
     however we explicitly handle "[" -> "test" here as the "[" is not
     recognized as part of a URL by default in terminals.  */
  char const *url_program = STREQ (program, "[") ? "test" : program;
  printf (_("Full documentation <%s%s>\n"),
  402d7b:	31 ff                	xor    %edi,%edi
  402d7d:	ba 05 00 00 00       	mov    $0x5,%edx
  402d82:	48 8d 35 82 56 00 00 	lea    0x5682(%rip),%rsi        # 40840b <_IO_stdin_used+0xab>
  402d89:	e8 82 e6 ff ff       	callq  401410 <dcgettext@plt>
  402d8e:	48 8d 0d ea 55 00 00 	lea    0x55ea(%rip),%rcx        # 40837f <_IO_stdin_used+0x1f>
  402d95:	48 8d 15 d4 5c 00 00 	lea    0x5cd4(%rip),%rdx        # 408a70 <_IO_stdin_used+0x710>
  402d9c:	bf 01 00 00 00       	mov    $0x1,%edi
  402da1:	48 89 c6             	mov    %rax,%rsi
  402da4:	31 c0                	xor    %eax,%eax
          PACKAGE_URL, url_program);
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
  402da6:	4c 8d 2d f2 55 00 00 	lea    0x55f2(%rip),%r13        # 40839f <_IO_stdin_used+0x3f>
  402dad:	e8 2e e8 ff ff       	callq  4015e0 <__printf_chk@plt>
  402db2:	49 39 dc             	cmp    %rbx,%r12
  402db5:	48 8d 0d 25 66 00 00 	lea    0x6625(%rip),%rcx        # 4093e1 <quoting_style_vals+0x81>
  402dbc:	4c 0f 45 e9          	cmovne %rcx,%r13
  402dc0:	31 ff                	xor    %edi,%edi
  402dc2:	48 8d 35 17 5d 00 00 	lea    0x5d17(%rip),%rsi        # 408ae0 <_IO_stdin_used+0x780>
  402dc9:	ba 05 00 00 00       	mov    $0x5,%edx
  402dce:	e8 3d e6 ff ff       	callq  401410 <dcgettext@plt>
  402dd3:	4c 89 e9             	mov    %r13,%rcx
  402dd6:	4c 89 e2             	mov    %r12,%rdx
  402dd9:	bf 01 00 00 00       	mov    $0x1,%edi
  402dde:	48 89 c6             	mov    %rax,%rsi
  402de1:	31 c0                	xor    %eax,%eax
  402de3:	e8 f8 e7 ff ff       	callq  4015e0 <__printf_chk@plt>
          node, node == program ? " invocation" : "");
}
  402de8:	e9 39 fd ff ff       	jmpq   402b26 <usage+0x56>
  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
  402ded:	e8 1e e6 ff ff       	callq  401410 <dcgettext@plt>
  402df2:	48 8d 0d 77 5c 00 00 	lea    0x5c77(%rip),%rcx        # 408a70 <_IO_stdin_used+0x710>
  402df9:	bf 01 00 00 00       	mov    $0x1,%edi
  402dfe:	48 8d 15 f4 55 00 00 	lea    0x55f4(%rip),%rdx        # 4083f9 <_IO_stdin_used+0x99>
  402e05:	48 89 c6             	mov    %rax,%rsi
  402e08:	31 c0                	xor    %eax,%eax
  402e0a:	e8 d1 e7 ff ff       	callq  4015e0 <__printf_chk@plt>
  char const *lc_messages = setlocale (LC_MESSAGES, NULL);
  402e0f:	bf 05 00 00 00       	mov    $0x5,%edi
  402e14:	31 f6                	xor    %esi,%esi
  402e16:	e8 b5 e7 ff ff       	callq  4015d0 <setlocale@plt>
  402e1b:	48 89 c7             	mov    %rax,%rdi
  if (lc_messages && STRNCMP_LIT (lc_messages, "en_"))
  402e1e:	48 85 c0             	test   %rax,%rax
  402e21:	74 15                	je     402e38 <usage+0x368>
  402e23:	ba 03 00 00 00       	mov    $0x3,%edx
  402e28:	48 8d 35 d8 55 00 00 	lea    0x55d8(%rip),%rsi        # 408407 <_IO_stdin_used+0xa7>
  402e2f:	e8 4c e5 ff ff       	callq  401380 <strncmp@plt>
  402e34:	85 c0                	test   %eax,%eax
  402e36:	75 43                	jne    402e7b <usage+0x3ab>
  printf (_("Full documentation <%s%s>\n"),
  402e38:	ba 05 00 00 00       	mov    $0x5,%edx
  402e3d:	48 8d 35 c7 55 00 00 	lea    0x55c7(%rip),%rsi        # 40840b <_IO_stdin_used+0xab>
  402e44:	31 ff                	xor    %edi,%edi
  402e46:	e8 c5 e5 ff ff       	callq  401410 <dcgettext@plt>
  402e4b:	48 8d 0d 2d 55 00 00 	lea    0x552d(%rip),%rcx        # 40837f <_IO_stdin_used+0x1f>
  402e52:	48 8d 15 17 5c 00 00 	lea    0x5c17(%rip),%rdx        # 408a70 <_IO_stdin_used+0x710>
  402e59:	bf 01 00 00 00       	mov    $0x1,%edi
  402e5e:	48 89 c6             	mov    %rax,%rsi
  402e61:	31 c0                	xor    %eax,%eax
  char const *node = program;
  402e63:	4c 8d 25 15 55 00 00 	lea    0x5515(%rip),%r12        # 40837f <_IO_stdin_used+0x1f>
  402e6a:	e8 71 e7 ff ff       	callq  4015e0 <__printf_chk@plt>
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
  402e6f:	4c 8d 2d 29 55 00 00 	lea    0x5529(%rip),%r13        # 40839f <_IO_stdin_used+0x3f>
  402e76:	e9 45 ff ff ff       	jmpq   402dc0 <usage+0x2f0>
  char const *node = program;
  402e7b:	4c 8d 25 fd 54 00 00 	lea    0x54fd(%rip),%r12        # 40837f <_IO_stdin_used+0x1f>
      fputs (_("Report any translation bugs to "
  402e82:	4c 8b 2d df 93 20 00 	mov    0x2093df(%rip),%r13        # 60c268 <stdout@@GLIBC_2.2.5>
  402e89:	31 ff                	xor    %edi,%edi
  402e8b:	ba 05 00 00 00       	mov    $0x5,%edx
  402e90:	48 8d 35 01 5c 00 00 	lea    0x5c01(%rip),%rsi        # 408a98 <_IO_stdin_used+0x738>
  402e97:	e8 74 e5 ff ff       	callq  401410 <dcgettext@plt>
  402e9c:	48 89 c7             	mov    %rax,%rdi
  402e9f:	4c 89 ee             	mov    %r13,%rsi
  402ea2:	e8 49 e6 ff ff       	callq  4014f0 <fputs_unlocked@plt>
  402ea7:	e9 cf fe ff ff       	jmpq   402d7b <usage+0x2ab>
  402eac:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000402eb0 <scan_arg>:
{
  402eb0:	41 57                	push   %r15
  402eb2:	41 56                	push   %r14
  402eb4:	41 55                	push   %r13
  402eb6:	41 54                	push   %r12
  402eb8:	49 89 fc             	mov    %rdi,%r12
  402ebb:	55                   	push   %rbp
  402ebc:	48 89 f5             	mov    %rsi,%rbp
  if (! xstrtold (arg, NULL, &ret.value, cl_strtold))
  402ebf:	31 f6                	xor    %esi,%esi
{
  402ec1:	53                   	push   %rbx
  if (! xstrtold (arg, NULL, &ret.value, cl_strtold))
  402ec2:	48 89 ef             	mov    %rbp,%rdi
{
  402ec5:	48 83 ec 48          	sub    $0x48,%rsp
  if (! xstrtold (arg, NULL, &ret.value, cl_strtold))
  402ec9:	48 c7 c1 50 32 40 00 	mov    $0x403250,%rcx
{
  402ed0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  402ed7:	00 00 
  402ed9:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  402ede:	31 c0                	xor    %eax,%eax
  if (! xstrtold (arg, NULL, &ret.value, cl_strtold))
  402ee0:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  402ee5:	e8 e6 2d 00 00       	callq  405cd0 <xstrtold>
  402eea:	84 c0                	test   %al,%al
  402eec:	0f 84 24 03 00 00    	je     403216 <scan_arg+0x366>
  if (isnan (ret.value))
  402ef2:	db 6c 24 10          	fldt   0x10(%rsp)
  402ef6:	d9 c0                	fld    %st(0)
  402ef8:	db 3c 24             	fstpt  (%rsp)
  402efb:	df e8                	fucomip %st(0),%st
  402efd:	0f 8a c1 02 00 00    	jp     4031c4 <scan_arg+0x314>
  402f03:	0f 85 bb 02 00 00    	jne    4031c4 <scan_arg+0x314>
  while (isspace (to_uchar (*arg)) || *arg == '+')
  402f09:	e8 92 e7 ff ff       	callq  4016a0 <__ctype_b_loc@plt>
  402f0e:	48 8b 08             	mov    (%rax),%rcx
  402f11:	eb 09                	jmp    402f1c <scan_arg+0x6c>
  402f13:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    arg++;
  402f18:	48 83 c5 01          	add    $0x1,%rbp
  while (isspace (to_uchar (*arg)) || *arg == '+')
  402f1c:	0f b6 55 00          	movzbl 0x0(%rbp),%edx
  402f20:	f6 44 51 01 20       	testb  $0x20,0x1(%rcx,%rdx,2)
  402f25:	75 f1                	jne    402f18 <scan_arg+0x68>
  402f27:	80 fa 2b             	cmp    $0x2b,%dl
  402f2a:	74 ec                	je     402f18 <scan_arg+0x68>
  char const *decimal_point = strchr (arg, '.');
  402f2c:	be 2e 00 00 00       	mov    $0x2e,%esi
  402f31:	48 89 ef             	mov    %rbp,%rdi
  ret.width = 0;
  402f34:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  402f3b:	00 00 
  ret.precision = INT_MAX;
  402f3d:	c7 44 24 28 ff ff ff 	movl   $0x7fffffff,0x28(%rsp)
  402f44:	7f 
  char const *decimal_point = strchr (arg, '.');
  402f45:	e8 26 e5 ff ff       	callq  401470 <strchr@plt>
  402f4a:	48 89 c3             	mov    %rax,%rbx
  if (! decimal_point && ! strchr (arg, 'p') /* not a hex float */)
  402f4d:	48 85 c0             	test   %rax,%rax
  402f50:	0f 84 77 01 00 00    	je     4030cd <scan_arg+0x21d>
  if (! arg[strcspn (arg, "xX")] && isfinite (ret.value))
  402f56:	48 8d 35 ee 54 00 00 	lea    0x54ee(%rip),%rsi        # 40844b <_IO_stdin_used+0xeb>
  402f5d:	48 89 ef             	mov    %rbp,%rdi
  402f60:	e8 6b e5 ff ff       	callq  4014d0 <strcspn@plt>
  402f65:	80 7c 05 00 00       	cmpb   $0x0,0x0(%rbp,%rax,1)
  402f6a:	0f 85 20 01 00 00    	jne    403090 <scan_arg+0x1e0>
  402f70:	d9 ee                	fldz   
  402f72:	db 2c 24             	fldt   (%rsp)
  402f75:	d8 c9                	fmul   %st(1),%st
  402f77:	df e9                	fucomip %st(1),%st
  402f79:	dd d8                	fstp   %st(0)
  402f7b:	0f 8a 0f 01 00 00    	jp     403090 <scan_arg+0x1e0>
  402f81:	0f 85 09 01 00 00    	jne    403090 <scan_arg+0x1e0>
      ret.width = strlen (arg);
  402f87:	31 c0                	xor    %eax,%eax
  402f89:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  402f8d:	48 89 ef             	mov    %rbp,%rdi
  402f90:	f2 ae                	repnz scas %es:(%rdi),%al
  402f92:	48 89 c8             	mov    %rcx,%rax
  402f95:	48 f7 d0             	not    %rax
  402f98:	4c 8d 68 ff          	lea    -0x1(%rax),%r13
  402f9c:	4c 89 6c 24 20       	mov    %r13,0x20(%rsp)
      if (decimal_point)
  402fa1:	48 85 db             	test   %rbx,%rbx
  402fa4:	0f 84 46 01 00 00    	je     4030f0 <scan_arg+0x240>
          fraction_len = strcspn (decimal_point + 1, "eE");
  402faa:	48 8d 7b 01          	lea    0x1(%rbx),%rdi
  402fae:	48 8d 35 99 54 00 00 	lea    0x5499(%rip),%rsi        # 40844e <_IO_stdin_used+0xee>
  402fb5:	e8 16 e5 ff ff       	callq  4014d0 <strcspn@plt>
  402fba:	49 89 c6             	mov    %rax,%r14
          if (fraction_len <= INT_MAX)
  402fbd:	48 3d ff ff ff 7f    	cmp    $0x7fffffff,%rax
  402fc3:	0f 86 49 01 00 00    	jbe    403112 <scan_arg+0x262>
                           || ! ISDIGIT (decimal_point[-1]))); /* -.# -> 0.# */
  402fc9:	48 39 dd             	cmp    %rbx,%rbp
  402fcc:	0f 84 ca 01 00 00    	je     40319c <scan_arg+0x2ec>
  402fd2:	0f be 43 ff          	movsbl -0x1(%rbx),%eax
  402fd6:	83 e8 30             	sub    $0x30,%eax
  402fd9:	83 f8 09             	cmp    $0x9,%eax
  402fdc:	0f 97 c0             	seta   %al
  402fdf:	0f b6 c0             	movzbl %al,%eax
          ret.width += (fraction_len == 0                      /* #.  -> #   */
  402fe2:	49 01 c5             	add    %rax,%r13
  402fe5:	4c 89 6c 24 20       	mov    %r13,0x20(%rsp)
      char const *e = strchr (arg, 'e');
  402fea:	be 65 00 00 00       	mov    $0x65,%esi
  402fef:	48 89 ef             	mov    %rbp,%rdi
  402ff2:	e8 79 e4 ff ff       	callq  401470 <strchr@plt>
  402ff7:	49 89 c5             	mov    %rax,%r13
      if (! e)
  402ffa:	48 85 c0             	test   %rax,%rax
  402ffd:	0f 84 f5 00 00 00    	je     4030f8 <scan_arg+0x248>
          long exponent = MAX (strtol (e + 1, NULL, 10), -LONG_MAX);
  403003:	49 8d 7d 01          	lea    0x1(%r13),%rdi
  403007:	31 f6                	xor    %esi,%esi
  403009:	ba 0a 00 00 00       	mov    $0xa,%edx
  40300e:	4d 89 ef             	mov    %r13,%r15
  403011:	48 89 3c 24          	mov    %rdi,(%rsp)
  403015:	49 29 ef             	sub    %rbp,%r15
  403018:	e8 13 e5 ff ff       	callq  401530 <strtol@plt>
  40301d:	48 8b 3c 24          	mov    (%rsp),%rdi
  403021:	49 89 c0             	mov    %rax,%r8
  403024:	48 b8 02 00 00 00 00 	movabs $0x8000000000000002,%rax
  40302b:	00 00 80 
  40302e:	49 39 c0             	cmp    %rax,%r8
  403031:	0f 8d f1 00 00 00    	jge    403128 <scan_arg+0x278>
  403037:	48 ba 01 00 00 00 00 	movabs $0x8000000000000001,%rdx
  40303e:	00 00 80 
          ret.precision += exponent < 0 ? -exponent
  403041:	8b 44 24 28          	mov    0x28(%rsp),%eax
  403045:	29 d0                	sub    %edx,%eax
          ret.width -= strlen (arg) - (e - arg);
  403047:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  40304b:	48 89 ef             	mov    %rbp,%rdi
  40304e:	4c 03 7c 24 20       	add    0x20(%rsp),%r15
          ret.precision += exponent < 0 ? -exponent
  403053:	89 44 24 28          	mov    %eax,0x28(%rsp)
          ret.width -= strlen (arg) - (e - arg);
  403057:	31 c0                	xor    %eax,%eax
  403059:	f2 ae                	repnz scas %es:(%rdi),%al
  40305b:	4a 8d 44 39 02       	lea    0x2(%rcx,%r15,1),%rax
              if (decimal_point)
  403060:	48 85 db             	test   %rbx,%rbx
  403063:	0f 84 3d 01 00 00    	je     4031a6 <scan_arg+0x2f6>
                  if (e == decimal_point + 1) /* undo #. -> # above  */
  403069:	48 83 c3 01          	add    $0x1,%rbx
          ret.width -= strlen (arg) - (e - arg);
  40306d:	48 8d 48 01          	lea    0x1(%rax),%rcx
  403071:	49 39 dd             	cmp    %rbx,%r13
  403074:	48 0f 44 c1          	cmove  %rcx,%rax
  403078:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
              exponent = -exponent;
  40307d:	48 89 d0             	mov    %rdx,%rax
  403080:	48 f7 d8             	neg    %rax
          ret.width += exponent;
  403083:	48 01 44 24 20       	add    %rax,0x20(%rsp)
  403088:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40308f:	00 
  return ret;
  403090:	66 0f 6f 44 24 10    	movdqa 0x10(%rsp),%xmm0
  403096:	66 0f 6f 4c 24 20    	movdqa 0x20(%rsp),%xmm1
  40309c:	41 0f 29 04 24       	movaps %xmm0,(%r12)
  4030a1:	41 0f 29 4c 24 10    	movaps %xmm1,0x10(%r12)
}
  4030a7:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4030ac:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4030b3:	00 00 
  4030b5:	0f 85 04 01 00 00    	jne    4031bf <scan_arg+0x30f>
  4030bb:	48 83 c4 48          	add    $0x48,%rsp
  4030bf:	4c 89 e0             	mov    %r12,%rax
  4030c2:	5b                   	pop    %rbx
  4030c3:	5d                   	pop    %rbp
  4030c4:	41 5c                	pop    %r12
  4030c6:	41 5d                	pop    %r13
  4030c8:	41 5e                	pop    %r14
  4030ca:	41 5f                	pop    %r15
  4030cc:	c3                   	retq   
  if (! decimal_point && ! strchr (arg, 'p') /* not a hex float */)
  4030cd:	be 70 00 00 00       	mov    $0x70,%esi
  4030d2:	48 89 ef             	mov    %rbp,%rdi
  4030d5:	e8 96 e3 ff ff       	callq  401470 <strchr@plt>
  4030da:	48 85 c0             	test   %rax,%rax
  4030dd:	0f 85 73 fe ff ff    	jne    402f56 <scan_arg+0xa6>
    ret.precision = 0;
  4030e3:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%rsp)
  4030ea:	00 
  4030eb:	e9 66 fe ff ff       	jmpq   402f56 <scan_arg+0xa6>
      size_t fraction_len = 0;
  4030f0:	45 31 f6             	xor    %r14d,%r14d
  4030f3:	e9 f2 fe ff ff       	jmpq   402fea <scan_arg+0x13a>
        e = strchr (arg, 'E');
  4030f8:	be 45 00 00 00       	mov    $0x45,%esi
  4030fd:	48 89 ef             	mov    %rbp,%rdi
  403100:	e8 6b e3 ff ff       	callq  401470 <strchr@plt>
  403105:	49 89 c5             	mov    %rax,%r13
      if (e)
  403108:	48 85 c0             	test   %rax,%rax
  40310b:	74 83                	je     403090 <scan_arg+0x1e0>
  40310d:	e9 f1 fe ff ff       	jmpq   403003 <scan_arg+0x153>
            ret.precision = fraction_len;
  403112:	89 44 24 28          	mov    %eax,0x28(%rsp)
                        : (decimal_point == arg                /* .#  -> 0.# */
  403116:	48 85 c0             	test   %rax,%rax
  403119:	0f 85 aa fe ff ff    	jne    402fc9 <scan_arg+0x119>
  40311f:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
  403123:	e9 ba fe ff ff       	jmpq   402fe2 <scan_arg+0x132>
          long exponent = MAX (strtol (e + 1, NULL, 10), -LONG_MAX);
  403128:	ba 0a 00 00 00       	mov    $0xa,%edx
  40312d:	31 f6                	xor    %esi,%esi
  40312f:	e8 fc e3 ff ff       	callq  401530 <strtol@plt>
          ret.precision += exponent < 0 ? -exponent
  403134:	8b 4c 24 28          	mov    0x28(%rsp),%ecx
          long exponent = MAX (strtol (e + 1, NULL, 10), -LONG_MAX);
  403138:	48 89 c2             	mov    %rax,%rdx
          ret.precision += exponent < 0 ? -exponent
  40313b:	89 c8                	mov    %ecx,%eax
  40313d:	48 85 d2             	test   %rdx,%rdx
  403140:	0f 88 ff fe ff ff    	js     403045 <scan_arg+0x195>
                                        : - MIN (ret.precision, exponent);
  403146:	48 63 c1             	movslq %ecx,%rax
          ret.width -= strlen (arg) - (e - arg);
  403149:	48 89 ef             	mov    %rbp,%rdi
                                        : - MIN (ret.precision, exponent);
  40314c:	48 39 d0             	cmp    %rdx,%rax
  40314f:	48 0f 4f c2          	cmovg  %rdx,%rax
          ret.width -= strlen (arg) - (e - arg);
  403153:	4c 03 7c 24 20       	add    0x20(%rsp),%r15
          ret.precision += exponent < 0 ? -exponent
  403158:	29 c1                	sub    %eax,%ecx
          ret.width -= strlen (arg) - (e - arg);
  40315a:	31 c0                	xor    %eax,%eax
          ret.precision += exponent < 0 ? -exponent
  40315c:	89 4c 24 28          	mov    %ecx,0x28(%rsp)
  403160:	41 89 c8             	mov    %ecx,%r8d
          ret.width -= strlen (arg) - (e - arg);
  403163:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  403167:	f2 ae                	repnz scas %es:(%rdi),%al
              if (decimal_point && ret.precision == 0 && fraction_len)
  403169:	4d 85 f6             	test   %r14,%r14
  40316c:	40 0f 95 c6          	setne  %sil
  403170:	48 85 db             	test   %rbx,%rbx
          ret.width -= strlen (arg) - (e - arg);
  403173:	4a 8d 44 39 02       	lea    0x2(%rcx,%r15,1),%rax
              if (decimal_point && ret.precision == 0 && fraction_len)
  403178:	0f 95 c1             	setne  %cl
          ret.width -= strlen (arg) - (e - arg);
  40317b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
              if (decimal_point && ret.precision == 0 && fraction_len)
  403180:	40 84 ce             	test   %cl,%sil
  403183:	74 05                	je     40318a <scan_arg+0x2da>
  403185:	45 85 c0             	test   %r8d,%r8d
  403188:	74 2a                	je     4031b4 <scan_arg+0x304>
              exponent -= MIN (fraction_len, exponent);
  40318a:	4c 39 f2             	cmp    %r14,%rdx
  40318d:	48 89 d0             	mov    %rdx,%rax
  403190:	4c 0f 46 f2          	cmovbe %rdx,%r14
  403194:	4c 29 f0             	sub    %r14,%rax
  403197:	e9 e7 fe ff ff       	jmpq   403083 <scan_arg+0x1d3>
                           || ! ISDIGIT (decimal_point[-1]))); /* -.# -> 0.# */
  40319c:	b8 01 00 00 00       	mov    $0x1,%eax
  4031a1:	e9 3c fe ff ff       	jmpq   402fe2 <scan_arg+0x132>
                ret.width++;
  4031a6:	48 83 c0 01          	add    $0x1,%rax
  4031aa:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4031af:	e9 c9 fe ff ff       	jmpq   40307d <scan_arg+0x1cd>
                ret.width--; /* discount space for '.'  */
  4031b4:	48 83 e8 01          	sub    $0x1,%rax
  4031b8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4031bd:	eb cb                	jmp    40318a <scan_arg+0x2da>
}
  4031bf:	e8 7c e2 ff ff       	callq  401440 <__stack_chk_fail@plt>
      error (0, 0, _("invalid %s argument: %s"), quote_n (0, "not-a-number"),
  4031c4:	48 89 ee             	mov    %rbp,%rsi
  4031c7:	bf 01 00 00 00       	mov    $0x1,%edi
  4031cc:	e8 cf 1f 00 00       	callq  4051a0 <quote_n>
  4031d1:	48 8d 35 4e 52 00 00 	lea    0x524e(%rip),%rsi        # 408426 <_IO_stdin_used+0xc6>
  4031d8:	31 ff                	xor    %edi,%edi
  4031da:	48 89 c3             	mov    %rax,%rbx
  4031dd:	e8 be 1f 00 00       	callq  4051a0 <quote_n>
  4031e2:	ba 05 00 00 00       	mov    $0x5,%edx
  4031e7:	48 8d 35 45 52 00 00 	lea    0x5245(%rip),%rsi        # 408433 <_IO_stdin_used+0xd3>
  4031ee:	31 ff                	xor    %edi,%edi
  4031f0:	49 89 c4             	mov    %rax,%r12
  4031f3:	e8 18 e2 ff ff       	callq  401410 <dcgettext@plt>
  4031f8:	31 ff                	xor    %edi,%edi
  4031fa:	49 89 d8             	mov    %rbx,%r8
  4031fd:	4c 89 e1             	mov    %r12,%rcx
  403200:	48 89 c2             	mov    %rax,%rdx
  403203:	31 f6                	xor    %esi,%esi
  403205:	31 c0                	xor    %eax,%eax
  403207:	e8 14 e4 ff ff       	callq  401620 <error@plt>
      usage (EXIT_FAILURE);
  40320c:	bf 01 00 00 00       	mov    $0x1,%edi
  403211:	e8 ba f8 ff ff       	callq  402ad0 <usage>
      error (0, 0, _("invalid floating point argument: %s"), quote (arg));
  403216:	48 89 ef             	mov    %rbp,%rdi
  403219:	e8 a2 1f 00 00       	callq  4051c0 <quote>
  40321e:	ba 05 00 00 00       	mov    $0x5,%edx
  403223:	48 8d 35 ee 58 00 00 	lea    0x58ee(%rip),%rsi        # 408b18 <_IO_stdin_used+0x7b8>
  40322a:	31 ff                	xor    %edi,%edi
  40322c:	49 89 c4             	mov    %rax,%r12
  40322f:	e8 dc e1 ff ff       	callq  401410 <dcgettext@plt>
  403234:	31 ff                	xor    %edi,%edi
  403236:	4c 89 e1             	mov    %r12,%rcx
  403239:	31 f6                	xor    %esi,%esi
  40323b:	48 89 c2             	mov    %rax,%rdx
  40323e:	31 c0                	xor    %eax,%eax
  403240:	e8 db e3 ff ff       	callq  401620 <error@plt>
      usage (EXIT_FAILURE);
  403245:	bf 01 00 00 00       	mov    $0x1,%edi
  40324a:	e8 81 f8 ff ff       	callq  402ad0 <usage>
  40324f:	90                   	nop

0000000000403250 <cl_strtold>:
   If the number underflows, return a value close to 0 and set errno to ERANGE.
   If there is some other error, return 0 and set errno.  */

DOUBLE
CL_STRTOD (char const *nptr, char **restrict endptr)
{
  403250:	41 55                	push   %r13
  403252:	41 54                	push   %r12
  403254:	55                   	push   %rbp
  403255:	48 89 fd             	mov    %rdi,%rbp
  403258:	53                   	push   %rbx
  403259:	48 89 f3             	mov    %rsi,%rbx
  40325c:	48 83 ec 38          	sub    $0x38,%rsp
  403260:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  403267:	00 00 
  403269:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40326e:	31 c0                	xor    %eax,%eax
  char *end;
  DOUBLE d = STRTOD (nptr, &end);
  403270:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  403275:	e8 96 e3 ff ff       	callq  401610 <strtold@plt>
  if (*end)
  40327a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  DOUBLE d = STRTOD (nptr, &end);
  40327f:	d9 c0                	fld    %st(0)
  if (*end)
  403281:	80 38 00             	cmpb   $0x0,(%rax)
  403284:	75 2a                	jne    4032b0 <cl_strtold+0x60>
  403286:	dd d9                	fstp   %st(1)
      if (end < c_end)
        d = c, end = c_end;
      else
        errno = strtod_errno;
    }
  if (endptr)
  403288:	48 85 db             	test   %rbx,%rbx
  40328b:	74 08                	je     403295 <cl_strtold+0x45>
    *endptr = end;
  40328d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  403292:	48 89 03             	mov    %rax,(%rbx)
  return d;
}
  403295:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  40329a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4032a1:	00 00 
  4032a3:	75 4b                	jne    4032f0 <cl_strtold+0xa0>
  4032a5:	48 83 c4 38          	add    $0x38,%rsp
  4032a9:	5b                   	pop    %rbx
  4032aa:	5d                   	pop    %rbp
  4032ab:	41 5c                	pop    %r12
  4032ad:	41 5d                	pop    %r13
  4032af:	c3                   	retq   
  4032b0:	dd d8                	fstp   %st(0)
  4032b2:	db 3c 24             	fstpt  (%rsp)
      int strtod_errno = errno;
  4032b5:	e8 b6 e0 ff ff       	callq  401370 <__errno_location@plt>
      DOUBLE c = C_STRTOD (nptr, &c_end);
  4032ba:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4032bf:	48 89 ef             	mov    %rbp,%rdi
      int strtod_errno = errno;
  4032c2:	44 8b 28             	mov    (%rax),%r13d
  4032c5:	49 89 c4             	mov    %rax,%r12
      DOUBLE c = C_STRTOD (nptr, &c_end);
  4032c8:	e8 13 2c 00 00       	callq  405ee0 <c_strtold>
      if (end < c_end)
  4032cd:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  4032d2:	48 39 44 24 18       	cmp    %rax,0x18(%rsp)
  4032d7:	db 2c 24             	fldt   (%rsp)
  4032da:	73 0c                	jae    4032e8 <cl_strtold+0x98>
  4032dc:	dd d8                	fstp   %st(0)
        d = c, end = c_end;
  4032de:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  4032e3:	eb a3                	jmp    403288 <cl_strtold+0x38>
  4032e5:	0f 1f 00             	nopl   (%rax)
  4032e8:	dd d9                	fstp   %st(1)
        errno = strtod_errno;
  4032ea:	45 89 2c 24          	mov    %r13d,(%r12)
  4032ee:	eb 98                	jmp    403288 <cl_strtold+0x38>
  4032f0:	dd d8                	fstp   %st(0)
}
  4032f2:	e8 49 e1 ff ff       	callq  401440 <__stack_chk_fail@plt>
  4032f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4032fe:	00 00 

0000000000403300 <close_stdout_set_file_name>:
/* Set the file name to be reported in the event an error is detected
   by close_stdout.  */
void
close_stdout_set_file_name (const char *file)
{
  file_name = file;
  403300:	48 89 3d e1 8f 20 00 	mov    %rdi,0x208fe1(%rip)        # 60c2e8 <file_name>
}
  403307:	c3                   	retq   
  403308:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40330f:	00 

0000000000403310 <close_stdout_set_ignore_EPIPE>:
   and should not lead to a diagnostic message.  */

void
close_stdout_set_ignore_EPIPE (bool ignore)
{
  ignore_EPIPE = ignore;
  403310:	40 88 3d c9 8f 20 00 	mov    %dil,0x208fc9(%rip)        # 60c2e0 <ignore_EPIPE>
}
  403317:	c3                   	retq   
  403318:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40331f:	00 

0000000000403320 <close_stdout>:
   tools (most notably 'make' and other build-management systems) depend
   on being able to detect failure in other tools via their exit status.  */

void
close_stdout (void)
{
  403320:	41 54                	push   %r12
  403322:	53                   	push   %rbx
  403323:	48 83 ec 08          	sub    $0x8,%rsp
  if (close_stream (stdout) != 0
  403327:	48 8b 3d 3a 8f 20 00 	mov    0x208f3a(%rip),%rdi        # 60c268 <stdout@@GLIBC_2.2.5>
  40332e:	e8 6d 2c 00 00       	callq  405fa0 <close_stream>
  403333:	85 c0                	test   %eax,%eax
  403335:	74 16                	je     40334d <close_stdout+0x2d>
  403337:	e8 34 e0 ff ff       	callq  401370 <__errno_location@plt>
      && !(ignore_EPIPE && errno == EPIPE))
  40333c:	80 3d 9d 8f 20 00 00 	cmpb   $0x0,0x208f9d(%rip)        # 60c2e0 <ignore_EPIPE>
  403343:	48 89 c3             	mov    %rax,%rbx
  403346:	74 1d                	je     403365 <close_stdout+0x45>
  403348:	83 38 20             	cmpl   $0x20,(%rax)
  40334b:	75 18                	jne    403365 <close_stdout+0x45>
      _exit (exit_failure);
    }

  /* Close stderr only if not sanitizing, as sanitizers may report to
     stderr after this function returns.  */
  if (!SANITIZE_ADDRESS && close_stream (stderr) != 0)
  40334d:	48 8b 3d 4c 8f 20 00 	mov    0x208f4c(%rip),%rdi        # 60c2a0 <stderr@@GLIBC_2.2.5>
  403354:	e8 47 2c 00 00       	callq  405fa0 <close_stream>
  403359:	85 c0                	test   %eax,%eax
  40335b:	75 47                	jne    4033a4 <close_stdout+0x84>
    _exit (exit_failure);
}
  40335d:	48 83 c4 08          	add    $0x8,%rsp
  403361:	5b                   	pop    %rbx
  403362:	41 5c                	pop    %r12
  403364:	c3                   	retq   
      char const *write_error = _("write error");
  403365:	31 ff                	xor    %edi,%edi
  403367:	ba 05 00 00 00       	mov    $0x5,%edx
  40336c:	48 8d 35 fc 4f 00 00 	lea    0x4ffc(%rip),%rsi        # 40836f <_IO_stdin_used+0xf>
  403373:	e8 98 e0 ff ff       	callq  401410 <dcgettext@plt>
      if (file_name)
  403378:	48 8b 3d 69 8f 20 00 	mov    0x208f69(%rip),%rdi        # 60c2e8 <file_name>
      char const *write_error = _("write error");
  40337f:	49 89 c4             	mov    %rax,%r12
      if (file_name)
  403382:	48 85 ff             	test   %rdi,%rdi
  403385:	74 28                	je     4033af <close_stdout+0x8f>
        error (0, errno, "%s: %s", quotearg_colon (file_name),
  403387:	e8 24 1c 00 00       	callq  404fb0 <quotearg_colon>
  40338c:	8b 33                	mov    (%rbx),%esi
  40338e:	4d 89 e0             	mov    %r12,%r8
  403391:	31 ff                	xor    %edi,%edi
  403393:	48 89 c1             	mov    %rax,%rcx
  403396:	48 8d 15 74 58 00 00 	lea    0x5874(%rip),%rdx        # 408c11 <terminator+0x18>
  40339d:	31 c0                	xor    %eax,%eax
  40339f:	e8 7c e2 ff ff       	callq  401620 <error@plt>
    _exit (exit_failure);
  4033a4:	8b 3d 4e 8e 20 00    	mov    0x208e4e(%rip),%edi        # 60c1f8 <exit_failure>
  4033aa:	e8 e1 df ff ff       	callq  401390 <_exit@plt>
        error (0, errno, "%s", write_error);
  4033af:	8b 33                	mov    (%rbx),%esi
  4033b1:	48 89 c1             	mov    %rax,%rcx
  4033b4:	48 8d 15 5a 58 00 00 	lea    0x585a(%rip),%rdx        # 408c15 <terminator+0x1c>
  4033bb:	31 ff                	xor    %edi,%edi
  4033bd:	31 c0                	xor    %eax,%eax
  4033bf:	e8 5c e2 ff ff       	callq  401620 <error@plt>
      _exit (exit_failure);
  4033c4:	eb de                	jmp    4033a4 <close_stdout+0x84>
  4033c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4033cd:	00 00 00 

00000000004033d0 <rpl_free>:
# include <errno.h>

void
rpl_free (void *p)
# undef free
{
  4033d0:	55                   	push   %rbp
  4033d1:	48 89 fd             	mov    %rdi,%rbp
  4033d4:	53                   	push   %rbx
  4033d5:	48 83 ec 18          	sub    $0x18,%rsp
  4033d9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4033e0:	00 00 
  4033e2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4033e7:	31 c0                	xor    %eax,%eax
     <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98396>
     would optimize away the assignments in the code below, when link-time
     optimization (LTO) is enabled.  Make the code more complicated, so that
     GCC does not grok how to optimize it.  */
  int err[2];
  err[0] = errno;
  4033e9:	e8 82 df ff ff       	callq  401370 <__errno_location@plt>
  err[1] = errno;
  errno = 0;
  free (p);
  4033ee:	48 89 ef             	mov    %rbp,%rdi
  err[0] = errno;
  4033f1:	48 89 c3             	mov    %rax,%rbx
  4033f4:	8b 00                	mov    (%rax),%eax
  errno = 0;
  4033f6:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  err[0] = errno;
  4033fc:	89 04 24             	mov    %eax,(%rsp)
  err[1] = errno;
  4033ff:	89 44 24 04          	mov    %eax,0x4(%rsp)
  free (p);
  403403:	e8 48 df ff ff       	callq  401350 <free@plt>
  errno = err[errno == 0];
  403408:	8b 13                	mov    (%rbx),%edx
  40340a:	31 c0                	xor    %eax,%eax
  40340c:	85 d2                	test   %edx,%edx
  40340e:	0f 94 c0             	sete   %al
  403411:	8b 04 84             	mov    (%rsp,%rax,4),%eax
  403414:	89 03                	mov    %eax,(%rbx)
# else
  int err = errno;
  free (p);
  errno = err;
# endif
}
  403416:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40341b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  403422:	00 00 
  403424:	75 07                	jne    40342d <rpl_free+0x5d>
  403426:	48 83 c4 18          	add    $0x18,%rsp
  40342a:	5b                   	pop    %rbx
  40342b:	5d                   	pop    %rbp
  40342c:	c3                   	retq   
  40342d:	e8 0e e0 ff ff       	callq  401440 <__stack_chk_fail@plt>
  403432:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  403439:	00 00 00 
  40343c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000403440 <set_program_name>:
/* Set program_name, based on argv[0].
   argv0 must be a string allocated with indefinite extent, and must not be
   modified after this call.  */
void
set_program_name (const char *argv0)
{
  403440:	53                   	push   %rbx
  const char *slash;
  const char *base;

  /* Sanity check.  POSIX requires the invoking process to pass a non-NULL
     argv[0].  */
  if (argv0 == NULL)
  403441:	48 85 ff             	test   %rdi,%rdi
  403444:	0f 84 89 00 00 00    	je     4034d3 <set_program_name+0x93>
      fputs ("A NULL argv[0] was passed through an exec system call.\n",
             stderr);
      abort ();
    }

  slash = strrchr (argv0, '/');
  40344a:	be 2f 00 00 00       	mov    $0x2f,%esi
  40344f:	48 89 fb             	mov    %rdi,%rbx
  403452:	e8 39 e0 ff ff       	callq  401490 <strrchr@plt>
  base = (slash != NULL ? slash + 1 : argv0);
  403457:	48 85 c0             	test   %rax,%rax
  40345a:	74 4b                	je     4034a7 <set_program_name+0x67>
  40345c:	4c 8d 40 01          	lea    0x1(%rax),%r8
  if (base - argv0 >= 7 && strncmp (base - 7, "/.libs/", 7) == 0)
  403460:	4c 89 c2             	mov    %r8,%rdx
  403463:	48 29 da             	sub    %rbx,%rdx
  403466:	48 83 fa 06          	cmp    $0x6,%rdx
  40346a:	7e 3b                	jle    4034a7 <set_program_name+0x67>
  40346c:	48 8d 70 fa          	lea    -0x6(%rax),%rsi
  403470:	b9 07 00 00 00       	mov    $0x7,%ecx
  403475:	48 8d 3d d4 57 00 00 	lea    0x57d4(%rip),%rdi        # 408c50 <terminator+0x57>
  40347c:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  40347e:	0f 97 c2             	seta   %dl
  403481:	80 da 00             	sbb    $0x0,%dl
  403484:	84 d2                	test   %dl,%dl
  403486:	75 1f                	jne    4034a7 <set_program_name+0x67>
    {
      argv0 = base;
      if (strncmp (base, "lt-", 3) == 0)
  403488:	80 78 01 6c          	cmpb   $0x6c,0x1(%rax)
  40348c:	75 32                	jne    4034c0 <set_program_name+0x80>
  40348e:	41 80 78 01 74       	cmpb   $0x74,0x1(%r8)
  403493:	75 2b                	jne    4034c0 <set_program_name+0x80>
  403495:	41 80 78 02 2d       	cmpb   $0x2d,0x2(%r8)
  40349a:	75 24                	jne    4034c0 <set_program_name+0x80>
        {
          argv0 = base + 3;
  40349c:	48 8d 58 04          	lea    0x4(%rax),%rbx
          /* On glibc systems, remove the "lt-" prefix from the variable
             program_invocation_short_name.  */
#if HAVE_DECL_PROGRAM_INVOCATION_SHORT_NAME
          program_invocation_short_name = (char *) argv0;
  4034a0:	48 89 1d b9 8d 20 00 	mov    %rbx,0x208db9(%rip)        # 60c260 <__progname@@GLIBC_2.2.5>
         /some/hidden/place/bin/cp: `foo' and `foo' are the same file
     not
         cp: `foo' and `foo' are the same file
   */

  program_name = argv0;
  4034a7:	48 89 1d 42 8e 20 00 	mov    %rbx,0x208e42(%rip)        # 60c2f0 <program_name>

  /* On glibc systems, the error() function comes from libc and uses the
     variable program_invocation_name, not program_name.  So set this variable
     as well.  */
#if HAVE_DECL_PROGRAM_INVOCATION_NAME
  program_invocation_name = (char *) argv0;
  4034ae:	48 89 1d cb 8d 20 00 	mov    %rbx,0x208dcb(%rip)        # 60c280 <__progname_full@@GLIBC_2.2.5>
#endif
}
  4034b5:	5b                   	pop    %rbx
  4034b6:	c3                   	retq   
  4034b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4034be:	00 00 
  4034c0:	4c 89 c3             	mov    %r8,%rbx
  program_name = argv0;
  4034c3:	48 89 1d 26 8e 20 00 	mov    %rbx,0x208e26(%rip)        # 60c2f0 <program_name>
  program_invocation_name = (char *) argv0;
  4034ca:	48 89 1d af 8d 20 00 	mov    %rbx,0x208daf(%rip)        # 60c280 <__progname_full@@GLIBC_2.2.5>
}
  4034d1:	5b                   	pop    %rbx
  4034d2:	c3                   	retq   
      fputs ("A NULL argv[0] was passed through an exec system call.\n",
  4034d3:	48 8b 0d c6 8d 20 00 	mov    0x208dc6(%rip),%rcx        # 60c2a0 <stderr@@GLIBC_2.2.5>
  4034da:	ba 37 00 00 00       	mov    $0x37,%edx
  4034df:	be 01 00 00 00       	mov    $0x1,%esi
  4034e4:	48 8d 3d 2d 57 00 00 	lea    0x572d(%rip),%rdi        # 408c18 <terminator+0x1f>
  4034eb:	e8 70 e1 ff ff       	callq  401660 <fwrite@plt>
      abort ();
  4034f0:	e8 6b de ff ff       	callq  401360 <abort@plt>
  4034f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4034fc:	00 00 00 
  4034ff:	90                   	nop

0000000000403500 <gettext_quote.part.0>:
gettext_quote (char const *msgid, enum quoting_style s)
  403500:	55                   	push   %rbp
  403501:	48 89 fd             	mov    %rdi,%rbp
  403504:	53                   	push   %rbx
  403505:	89 f3                	mov    %esi,%ebx
  403507:	48 83 ec 08          	sub    $0x8,%rsp
  locale_code = locale_charset ();
  40350b:	e8 20 2c 00 00       	callq  406130 <locale_charset>
}

static inline int
strcaseeq0 (const char *s1, const char *s2, char s20, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[0], s20))
  403510:	0f b6 10             	movzbl (%rax),%edx
  403513:	83 e2 df             	and    $0xffffffdf,%edx
  403516:	80 fa 55             	cmp    $0x55,%dl
  403519:	75 4d                	jne    403568 <gettext_quote.part.0+0x68>
  if (CASEEQ (s1[1], s21))
  40351b:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  40351f:	83 e2 df             	and    $0xffffffdf,%edx
  403522:	80 fa 54             	cmp    $0x54,%dl
  403525:	75 5e                	jne    403585 <gettext_quote.part.0+0x85>
  if (CASEEQ (s1[2], s22))
  403527:	0f b6 50 02          	movzbl 0x2(%rax),%edx
  40352b:	83 e2 df             	and    $0xffffffdf,%edx
  40352e:	80 fa 46             	cmp    $0x46,%dl
  403531:	75 52                	jne    403585 <gettext_quote.part.0+0x85>
  if (CASEEQ (s1[3], s23))
  403533:	80 78 03 2d          	cmpb   $0x2d,0x3(%rax)
  403537:	75 4c                	jne    403585 <gettext_quote.part.0+0x85>
  if (CASEEQ (s1[4], s24))
  403539:	80 78 04 38          	cmpb   $0x38,0x4(%rax)
  40353d:	75 46                	jne    403585 <gettext_quote.part.0+0x85>
  if (CASEEQ (s1[5], s25))
  40353f:	80 78 05 00          	cmpb   $0x0,0x5(%rax)
  403543:	75 40                	jne    403585 <gettext_quote.part.0+0x85>
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
  403545:	80 7d 00 60          	cmpb   $0x60,0x0(%rbp)
  403549:	48 8d 05 15 57 00 00 	lea    0x5715(%rip),%rax        # 408c65 <terminator+0x6c>
  403550:	48 8d 15 03 57 00 00 	lea    0x5703(%rip),%rdx        # 408c5a <terminator+0x61>
  403557:	48 0f 45 c2          	cmovne %rdx,%rax
}
  40355b:	48 83 c4 08          	add    $0x8,%rsp
  40355f:	5b                   	pop    %rbx
  403560:	5d                   	pop    %rbp
  403561:	c3                   	retq   
  403562:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  if (CASEEQ (s1[0], s20))
  403568:	80 fa 47             	cmp    $0x47,%dl
  40356b:	75 18                	jne    403585 <gettext_quote.part.0+0x85>
  if (CASEEQ (s1[1], s21))
  40356d:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  403571:	83 e2 df             	and    $0xffffffdf,%edx
  403574:	80 fa 42             	cmp    $0x42,%dl
  403577:	75 0c                	jne    403585 <gettext_quote.part.0+0x85>
  if (CASEEQ (s1[2], s22))
  403579:	80 78 02 31          	cmpb   $0x31,0x2(%rax)
  40357d:	75 06                	jne    403585 <gettext_quote.part.0+0x85>
  if (CASEEQ (s1[3], s23))
  40357f:	80 78 03 38          	cmpb   $0x38,0x3(%rax)
  403583:	74 23                	je     4035a8 <gettext_quote.part.0+0xa8>
  return (s == clocale_quoting_style ? "\"" : "'");
  403585:	83 fb 09             	cmp    $0x9,%ebx
  403588:	48 8d 05 c9 56 00 00 	lea    0x56c9(%rip),%rax        # 408c58 <terminator+0x5f>
  40358f:	48 8d 15 33 4f 00 00 	lea    0x4f33(%rip),%rdx        # 4084c9 <_IO_stdin_used+0x169>
  403596:	48 0f 45 c2          	cmovne %rdx,%rax
}
  40359a:	48 83 c4 08          	add    $0x8,%rsp
  40359e:	5b                   	pop    %rbx
  40359f:	5d                   	pop    %rbp
  4035a0:	c3                   	retq   
  4035a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  if (CASEEQ (s1[4], s24))
  4035a8:	80 78 04 30          	cmpb   $0x30,0x4(%rax)
  4035ac:	75 d7                	jne    403585 <gettext_quote.part.0+0x85>
  if (CASEEQ (s1[5], s25))
  4035ae:	80 78 05 33          	cmpb   $0x33,0x5(%rax)
  4035b2:	75 d1                	jne    403585 <gettext_quote.part.0+0x85>
  if (CASEEQ (s1[6], s26))
  4035b4:	80 78 06 30          	cmpb   $0x30,0x6(%rax)
  4035b8:	75 cb                	jne    403585 <gettext_quote.part.0+0x85>
  if (CASEEQ (s1[7], s27))
  4035ba:	80 78 07 00          	cmpb   $0x0,0x7(%rax)
  4035be:	75 c5                	jne    403585 <gettext_quote.part.0+0x85>
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";
  4035c0:	80 7d 00 60          	cmpb   $0x60,0x0(%rbp)
  4035c4:	48 8d 05 93 56 00 00 	lea    0x5693(%rip),%rax        # 408c5e <terminator+0x65>
  4035cb:	48 8d 15 90 56 00 00 	lea    0x5690(%rip),%rdx        # 408c62 <terminator+0x69>
  4035d2:	48 0f 45 c2          	cmovne %rdx,%rax
}
  4035d6:	48 83 c4 08          	add    $0x8,%rsp
  4035da:	5b                   	pop    %rbx
  4035db:	5d                   	pop    %rbp
  4035dc:	c3                   	retq   
  4035dd:	0f 1f 00             	nopl   (%rax)

00000000004035e0 <quotearg_buffer_restyled>:
{
  4035e0:	41 57                	push   %r15
  4035e2:	49 89 ff             	mov    %rdi,%r15
  4035e5:	41 56                	push   %r14
  4035e7:	49 89 f6             	mov    %rsi,%r14
  4035ea:	41 55                	push   %r13
  4035ec:	41 54                	push   %r12
  4035ee:	55                   	push   %rbp
  4035ef:	53                   	push   %rbx
  4035f0:	44 89 cb             	mov    %r9d,%ebx
  4035f3:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  4035fa:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  403601:	00 
  403602:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  403607:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  40360c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  403611:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  403618:	00 
  403619:	44 89 44 24 08       	mov    %r8d,0x8(%rsp)
  40361e:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  403623:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  40362a:	00 
  40362b:	44 89 4c 24 64       	mov    %r9d,0x64(%rsp)
  403630:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  403635:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40363c:	00 00 
  40363e:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  403645:	00 
  403646:	31 c0                	xor    %eax,%eax
  bool unibyte_locale = MB_CUR_MAX == 1;
  403648:	e8 d3 dd ff ff       	callq  401420 <__ctype_get_mb_cur_max@plt>
  40364d:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
  403652:	83 e3 02             	and    $0x2,%ebx
  bool unibyte_locale = MB_CUR_MAX == 1;
  403655:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
  40365a:	0f 95 44 24 63       	setne  0x63(%rsp)
  40365f:	41 83 fa 0a          	cmp    $0xa,%r10d
  403663:	0f 87 57 e0 ff ff    	ja     4016c0 <quotearg_buffer_restyled.cold>
  403669:	48 8d 0d 50 56 00 00 	lea    0x5650(%rip),%rcx        # 408cc0 <terminator+0xc7>
  403670:	44 89 d2             	mov    %r10d,%edx
  403673:	4c 8b 5c 24 10       	mov    0x10(%rsp),%r11
  403678:	48 63 04 91          	movslq (%rcx,%rdx,4),%rax
  40367c:	48 01 c8             	add    %rcx,%rax
  40367f:	ff e0                	jmpq   *%rax
  403681:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if (quoting_style != custom_quoting_style)
  403688:	41 83 fa 0a          	cmp    $0xa,%r10d
  40368c:	74 7e                	je     40370c <quotearg_buffer_restyled+0x12c>
  char const *translation = _(msgid);
  40368e:	31 ff                	xor    %edi,%edi
  403690:	ba 05 00 00 00       	mov    $0x5,%edx
  403695:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
  40369a:	48 8d 35 c8 55 00 00 	lea    0x55c8(%rip),%rsi        # 408c69 <terminator+0x70>
  4036a1:	4c 89 5c 24 08       	mov    %r11,0x8(%rsp)
  4036a6:	e8 65 dd ff ff       	callq  401410 <dcgettext@plt>
  if (translation != msgid)
  4036ab:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
  4036b0:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
  char const *translation = _(msgid);
  4036b5:	48 89 c7             	mov    %rax,%rdi
  4036b8:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  if (translation != msgid)
  4036bd:	48 8d 05 a5 55 00 00 	lea    0x55a5(%rip),%rax        # 408c69 <terminator+0x70>
  4036c4:	48 39 c7             	cmp    %rax,%rdi
  4036c7:	0f 84 6f 10 00 00    	je     40473c <quotearg_buffer_restyled+0x115c>
  char const *translation = _(msgid);
  4036cd:	31 ff                	xor    %edi,%edi
  4036cf:	ba 05 00 00 00       	mov    $0x5,%edx
  4036d4:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
  4036d9:	48 8d 35 e9 4d 00 00 	lea    0x4de9(%rip),%rsi        # 4084c9 <_IO_stdin_used+0x169>
  4036e0:	4c 89 5c 24 08       	mov    %r11,0x8(%rsp)
  4036e5:	e8 26 dd ff ff       	callq  401410 <dcgettext@plt>
  if (translation != msgid)
  4036ea:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
  4036ef:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
  char const *translation = _(msgid);
  4036f4:	48 89 c7             	mov    %rax,%rdi
  4036f7:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  if (translation != msgid)
  4036fc:	48 8d 05 c6 4d 00 00 	lea    0x4dc6(%rip),%rax        # 4084c9 <_IO_stdin_used+0x169>
  403703:	48 39 c7             	cmp    %rax,%rdi
  403706:	0f 84 0a 10 00 00    	je     404716 <quotearg_buffer_restyled+0x1136>
        if (!elide_outer_quotes)
  40370c:	45 31 e4             	xor    %r12d,%r12d
  40370f:	85 db                	test   %ebx,%ebx
  403711:	0f 84 23 0e 00 00    	je     40453a <quotearg_buffer_restyled+0xf5a>
        quote_string_len = strlen (quote_string);
  403717:	48 8b 5c 24 70       	mov    0x70(%rsp),%rbx
  40371c:	44 89 54 24 38       	mov    %r10d,0x38(%rsp)
  bool pending_shell_escape_end = false;
  403721:	45 31 ed             	xor    %r13d,%r13d
  403724:	4c 89 5c 24 30       	mov    %r11,0x30(%rsp)
        quote_string_len = strlen (quote_string);
  403729:	48 89 df             	mov    %rbx,%rdi
  40372c:	e8 ff dc ff ff       	callq  401430 <strlen@plt>
      break;
  403731:	48 89 5c 24 50       	mov    %rbx,0x50(%rsp)
  403736:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
        quote_string_len = strlen (quote_string);
  40373b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      break;
  403740:	44 8b 54 24 38       	mov    0x38(%rsp),%r10d
  bool all_c_and_shell_quote_compat = true;
  403745:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  bool encountered_single_quote = false;
  40374a:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  403751:	00 
  size_t orig_buffersize = 0;
  403752:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  403759:	00 00 
        backslash_escapes = true;
  40375b:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
  403760:	31 db                	xor    %ebx,%ebx
  403762:	45 89 e8             	mov    %r13d,%r8d
  403765:	0f 1f 00             	nopl   (%rax)
  403768:	49 39 db             	cmp    %rbx,%r11
  40376b:	41 0f 95 c5          	setne  %r13b
  40376f:	49 83 fb ff          	cmp    $0xffffffffffffffff,%r11
  403773:	75 0d                	jne    403782 <quotearg_buffer_restyled+0x1a2>
  403775:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40377a:	80 3c 18 00          	cmpb   $0x0,(%rax,%rbx,1)
  40377e:	41 0f 95 c5          	setne  %r13b
  403782:	45 84 ed             	test   %r13b,%r13b
  403785:	0f 84 7d 08 00 00    	je     404008 <quotearg_buffer_restyled+0xa28>
          && quoting_style != shell_always_quoting_style
  40378b:	41 83 fa 02          	cmp    $0x2,%r10d
  40378f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  403794:	0f 95 c0             	setne  %al
      if (backslash_escapes
  403797:	22 44 24 10          	and    0x10(%rsp),%al
  40379b:	48 8d 2c 1f          	lea    (%rdi,%rbx,1),%rbp
  40379f:	41 89 c1             	mov    %eax,%r9d
  4037a2:	0f 84 b8 06 00 00    	je     403e60 <quotearg_buffer_restyled+0x880>
          && quote_string_len
  4037a8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  4037ad:	48 85 c0             	test   %rax,%rax
  4037b0:	0f 84 fa 07 00 00    	je     403fb0 <quotearg_buffer_restyled+0x9d0>
          && (i + quote_string_len
  4037b6:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
                  ? (argsize = strlen (arg)) : argsize))
  4037ba:	49 83 fb ff          	cmp    $0xffffffffffffffff,%r11
  4037be:	75 38                	jne    4037f8 <quotearg_buffer_restyled+0x218>
  4037c0:	48 83 f8 01          	cmp    $0x1,%rax
  4037c4:	76 32                	jbe    4037f8 <quotearg_buffer_restyled+0x218>
  4037c6:	44 89 54 24 48       	mov    %r10d,0x48(%rsp)
  4037cb:	44 88 44 24 40       	mov    %r8b,0x40(%rsp)
  4037d0:	44 88 4c 24 38       	mov    %r9b,0x38(%rsp)
  4037d5:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  4037da:	e8 51 dc ff ff       	callq  401430 <strlen@plt>
  4037df:	44 8b 54 24 48       	mov    0x48(%rsp),%r10d
  4037e4:	44 0f b6 44 24 40    	movzbl 0x40(%rsp),%r8d
  4037ea:	44 0f b6 4c 24 38    	movzbl 0x38(%rsp),%r9d
  4037f0:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  4037f5:	49 89 c3             	mov    %rax,%r11
          && (i + quote_string_len
  4037f8:	4c 39 da             	cmp    %r11,%rdx
  4037fb:	0f 87 af 07 00 00    	ja     403fb0 <quotearg_buffer_restyled+0x9d0>
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
  403801:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  403806:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  40380b:	48 89 ef             	mov    %rbp,%rdi
  40380e:	44 89 54 24 48       	mov    %r10d,0x48(%rsp)
  403813:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
  403818:	44 88 44 24 38       	mov    %r8b,0x38(%rsp)
  40381d:	44 88 4c 24 30       	mov    %r9b,0x30(%rsp)
  403822:	e8 b9 dc ff ff       	callq  4014e0 <memcmp@plt>
  403827:	44 0f b6 4c 24 30    	movzbl 0x30(%rsp),%r9d
  40382d:	44 0f b6 44 24 38    	movzbl 0x38(%rsp),%r8d
  403833:	85 c0                	test   %eax,%eax
  403835:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
  40383a:	44 8b 54 24 48       	mov    0x48(%rsp),%r10d
  40383f:	0f 85 6b 07 00 00    	jne    403fb0 <quotearg_buffer_restyled+0x9d0>
          if (elide_outer_quotes)
  403845:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  40384a:	0f 85 fe 03 00 00    	jne    403c4e <quotearg_buffer_restyled+0x66e>
      c = arg[i];
  403850:	0f b6 6d 00          	movzbl 0x0(%rbp),%ebp
      switch (c)
  403854:	40 80 fd 7e          	cmp    $0x7e,%bpl
  403858:	0f 87 25 01 00 00    	ja     403983 <quotearg_buffer_restyled+0x3a3>
  40385e:	48 8d 0d 87 54 00 00 	lea    0x5487(%rip),%rcx        # 408cec <terminator+0xf3>
  403865:	40 0f b6 d5          	movzbl %bpl,%edx
  403869:	48 63 04 91          	movslq (%rcx,%rdx,4),%rax
  40386d:	48 01 c8             	add    %rcx,%rax
  403870:	ff e0                	jmpq   *%rax
  403872:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
          is_right_quote = true;
  403878:	44 89 c8             	mov    %r9d,%eax
  40387b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      if (! (((backslash_escapes && quoting_style != shell_always_quoting_style)
  403880:	45 89 cd             	mov    %r9d,%r13d
  403883:	41 89 c1             	mov    %eax,%r9d
  403886:	31 c0                	xor    %eax,%eax
  403888:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40388f:	00 
             && quote_these_too
  403890:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  403895:	48 85 f6             	test   %rsi,%rsi
  403898:	74 14                	je     4038ae <quotearg_buffer_restyled+0x2ce>
             && quote_these_too[c / INT_BITS] >> (c % INT_BITS) & 1)
  40389a:	89 ea                	mov    %ebp,%edx
  40389c:	89 e9                	mov    %ebp,%ecx
  40389e:	c0 ea 05             	shr    $0x5,%dl
  4038a1:	0f b6 d2             	movzbl %dl,%edx
  4038a4:	8b 14 96             	mov    (%rsi,%rdx,4),%edx
  4038a7:	d3 ea                	shr    %cl,%edx
      if (! (((backslash_escapes && quoting_style != shell_always_quoting_style)
  4038a9:	83 e2 01             	and    $0x1,%edx
  4038ac:	75 09                	jne    4038b7 <quotearg_buffer_restyled+0x2d7>
          && !is_right_quote)
  4038ae:	45 84 c9             	test   %r9b,%r9b
  4038b1:	0f 84 ba 00 00 00    	je     403971 <quotearg_buffer_restyled+0x391>
      START_ESC ();
  4038b7:	41 83 fa 02          	cmp    $0x2,%r10d
  4038bb:	0f 94 c2             	sete   %dl
  4038be:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  4038c3:	89 d0                	mov    %edx,%eax
  4038c5:	0f 85 e5 04 00 00    	jne    403db0 <quotearg_buffer_restyled+0x7d0>
  4038cb:	44 89 c0             	mov    %r8d,%eax
  4038ce:	83 f0 01             	xor    $0x1,%eax
  4038d1:	20 d0                	and    %dl,%al
  4038d3:	74 31                	je     403906 <quotearg_buffer_restyled+0x326>
  4038d5:	4d 39 e6             	cmp    %r12,%r14
  4038d8:	76 05                	jbe    4038df <quotearg_buffer_restyled+0x2ff>
  4038da:	43 c6 04 27 27       	movb   $0x27,(%r15,%r12,1)
  4038df:	49 8d 54 24 01       	lea    0x1(%r12),%rdx
  4038e4:	49 39 d6             	cmp    %rdx,%r14
  4038e7:	76 06                	jbe    4038ef <quotearg_buffer_restyled+0x30f>
  4038e9:	43 c6 44 27 01 24    	movb   $0x24,0x1(%r15,%r12,1)
  4038ef:	49 8d 54 24 02       	lea    0x2(%r12),%rdx
  4038f4:	49 39 d6             	cmp    %rdx,%r14
  4038f7:	76 06                	jbe    4038ff <quotearg_buffer_restyled+0x31f>
  4038f9:	43 c6 44 27 02 27    	movb   $0x27,0x2(%r15,%r12,1)
  4038ff:	49 83 c4 03          	add    $0x3,%r12
  403903:	41 89 c0             	mov    %eax,%r8d
  403906:	4d 39 e6             	cmp    %r12,%r14
  403909:	76 05                	jbe    403910 <quotearg_buffer_restyled+0x330>
  40390b:	43 c6 04 27 5c       	movb   $0x5c,(%r15,%r12,1)
  403910:	49 83 c4 01          	add    $0x1,%r12
      END_ESC ();
  403914:	48 83 c3 01          	add    $0x1,%rbx
      STORE (c);
  403918:	4d 39 f4             	cmp    %r14,%r12
  40391b:	73 04                	jae    403921 <quotearg_buffer_restyled+0x341>
  40391d:	43 88 2c 27          	mov    %bpl,(%r15,%r12,1)
        all_c_and_shell_quote_compat = false;
  403921:	0f b6 7c 24 08       	movzbl 0x8(%rsp),%edi
      STORE (c);
  403926:	49 83 c4 01          	add    $0x1,%r12
        all_c_and_shell_quote_compat = false;
  40392a:	b8 00 00 00 00       	mov    $0x0,%eax
  40392f:	45 84 ed             	test   %r13b,%r13b
  403932:	0f 44 f8             	cmove  %eax,%edi
  403935:	40 88 7c 24 08       	mov    %dil,0x8(%rsp)
  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
  40393a:	e9 29 fe ff ff       	jmpq   403768 <quotearg_buffer_restyled+0x188>
  40393f:	90                   	nop
      c = arg[i];
  403940:	45 31 c9             	xor    %r9d,%r9d
              break;
  403943:	31 c0                	xor    %eax,%eax
  403945:	45 31 ed             	xor    %r13d,%r13d
      if (! (((backslash_escapes && quoting_style != shell_always_quoting_style)
  403948:	0f b6 54 24 10       	movzbl 0x10(%rsp),%edx
  40394d:	83 f2 01             	xor    $0x1,%edx
  403950:	08 d0                	or     %dl,%al
  403952:	0f 84 38 ff ff ff    	je     403890 <quotearg_buffer_restyled+0x2b0>
  403958:	31 c0                	xor    %eax,%eax
              || elide_outer_quotes)
  40395a:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  40395f:	0f 85 2b ff ff ff    	jne    403890 <quotearg_buffer_restyled+0x2b0>
  403965:	0f 1f 00             	nopl   (%rax)
          && !is_right_quote)
  403968:	45 84 c9             	test   %r9b,%r9b
  40396b:	0f 85 46 ff ff ff    	jne    4038b7 <quotearg_buffer_restyled+0x2d7>
  403971:	83 f0 01             	xor    $0x1,%eax
  403974:	48 83 c3 01          	add    $0x1,%rbx
  403978:	44 21 c0             	and    %r8d,%eax
  40397b:	e9 50 05 00 00       	jmpq   403ed0 <quotearg_buffer_restyled+0x8f0>
      c = arg[i];
  403980:	45 31 c9             	xor    %r9d,%r9d
            if (unibyte_locale)
  403983:	48 83 7c 24 68 01    	cmpq   $0x1,0x68(%rsp)
  403989:	0f 85 59 07 00 00    	jne    4040e8 <quotearg_buffer_restyled+0xb08>
  40398f:	44 89 54 24 48       	mov    %r10d,0x48(%rsp)
  403994:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
  403999:	44 88 44 24 38       	mov    %r8b,0x38(%rsp)
  40399e:	44 88 4c 24 30       	mov    %r9b,0x30(%rsp)
                printable = isprint (c) != 0;
  4039a3:	e8 f8 dc ff ff       	callq  4016a0 <__ctype_b_loc@plt>
  4039a8:	44 0f b6 4c 24 30    	movzbl 0x30(%rsp),%r9d
  4039ae:	44 0f b6 44 24 38    	movzbl 0x38(%rsp),%r8d
                m = 1;
  4039b4:	bf 01 00 00 00       	mov    $0x1,%edi
                printable = isprint (c) != 0;
  4039b9:	49 89 c5             	mov    %rax,%r13
  4039bc:	40 0f b6 c5          	movzbl %bpl,%eax
  4039c0:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
  4039c5:	44 8b 54 24 48       	mov    0x48(%rsp),%r10d
  4039ca:	49 8b 55 00          	mov    0x0(%r13),%rdx
  4039ce:	0f b7 04 42          	movzwl (%rdx,%rax,2),%eax
  4039d2:	66 25 00 40          	and    $0x4000,%ax
  4039d6:	41 0f 95 c5          	setne  %r13b
            if (1 < m || (backslash_escapes && ! printable))
  4039da:	0f 94 c2             	sete   %dl
  4039dd:	22 54 24 10          	and    0x10(%rsp),%dl
  4039e1:	84 d2                	test   %dl,%dl
  4039e3:	0f 85 b8 0a 00 00    	jne    4044a1 <quotearg_buffer_restyled+0xec1>
  4039e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4039f0:	41 83 fa 02          	cmp    $0x2,%r10d
  4039f4:	0f 94 c0             	sete   %al
  4039f7:	e9 4c ff ff ff       	jmpq   403948 <quotearg_buffer_restyled+0x368>
  4039fc:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  403a01:	45 31 ed             	xor    %r13d,%r13d
  403a04:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  403a0b:	00 
  403a0c:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  403a13:	00 00 
  403a15:	c6 44 24 63 01       	movb   $0x1,0x63(%rsp)
  403a1a:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
      quote_string = "'";
  403a1f:	48 8d 05 a3 4a 00 00 	lea    0x4aa3(%rip),%rax        # 4084c9 <_IO_stdin_used+0x169>
  403a26:	45 31 e4             	xor    %r12d,%r12d
      quoting_style = shell_always_quoting_style;
  403a29:	41 ba 02 00 00 00    	mov    $0x2,%r10d
      quote_string_len = 1;
  403a2f:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  403a36:	00 00 
      quote_string = "'";
  403a38:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  403a3d:	e9 1e fd ff ff       	jmpq   403760 <quotearg_buffer_restyled+0x180>
      if (!elide_outer_quotes)
  403a42:	85 db                	test   %ebx,%ebx
  403a44:	0f 85 49 0c 00 00    	jne    404693 <quotearg_buffer_restyled+0x10b3>
        STORE ('"');
  403a4a:	4d 85 f6             	test   %r14,%r14
  403a4d:	0f 84 82 0a 00 00    	je     4044d5 <quotearg_buffer_restyled+0xef5>
  403a53:	41 c6 07 22          	movb   $0x22,(%r15)
  bool pending_shell_escape_end = false;
  403a57:	45 31 ed             	xor    %r13d,%r13d
  bool all_c_and_shell_quote_compat = true;
  403a5a:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  bool encountered_single_quote = false;
  403a5f:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  403a66:	00 
  size_t orig_buffersize = 0;
  403a67:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  403a6e:	00 00 
      quote_string = "\"";
  403a70:	48 8d 05 e1 51 00 00 	lea    0x51e1(%rip),%rax        # 408c58 <terminator+0x5f>
  403a77:	c6 44 24 63 00       	movb   $0x0,0x63(%rsp)
        STORE ('"');
  403a7c:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      backslash_escapes = true;
  403a82:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
      quote_string_len = 1;
  403a87:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  403a8e:	00 00 
      quote_string = "\"";
  403a90:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  403a95:	e9 c6 fc ff ff       	jmpq   403760 <quotearg_buffer_restyled+0x180>
      if (!elide_outer_quotes)
  403a9a:	85 db                	test   %ebx,%ebx
  403a9c:	0f 85 5a ff ff ff    	jne    4039fc <quotearg_buffer_restyled+0x41c>
        backslash_escapes = true;
  403aa2:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
        STORE ('\'');
  403aa7:	4d 85 f6             	test   %r14,%r14
  403aaa:	0f 85 21 0d 00 00    	jne    4047d1 <quotearg_buffer_restyled+0x11f1>
  403ab0:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  403ab7:	00 00 
  403ab9:	45 31 ed             	xor    %r13d,%r13d
  403abc:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  403ac1:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  403ac8:	00 
      quote_string = "'";
  403ac9:	48 8d 05 f9 49 00 00 	lea    0x49f9(%rip),%rax        # 4084c9 <_IO_stdin_used+0x169>
  403ad0:	c6 44 24 63 00       	movb   $0x0,0x63(%rsp)
        STORE ('\'');
  403ad5:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      quoting_style = shell_always_quoting_style;
  403adb:	41 ba 02 00 00 00    	mov    $0x2,%r10d
      quote_string_len = 1;
  403ae1:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  403ae8:	00 00 
      quote_string = "'";
  403aea:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  403aef:	e9 6c fc ff ff       	jmpq   403760 <quotearg_buffer_restyled+0x180>
      quote_string = "\"";
  403af4:	48 8d 05 5d 51 00 00 	lea    0x515d(%rip),%rax        # 408c58 <terminator+0x5f>
  bool pending_shell_escape_end = false;
  403afb:	45 31 ed             	xor    %r13d,%r13d
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
  403afe:	45 31 e4             	xor    %r12d,%r12d
  bool all_c_and_shell_quote_compat = true;
  403b01:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  bool encountered_single_quote = false;
  403b06:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  403b0d:	00 
      quoting_style = c_quoting_style;
  403b0e:	41 ba 05 00 00 00    	mov    $0x5,%r10d
  size_t orig_buffersize = 0;
  403b14:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  403b1b:	00 00 
      elide_outer_quotes = true;
  403b1d:	c6 44 24 63 01       	movb   $0x1,0x63(%rsp)
      backslash_escapes = true;
  403b22:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
      quote_string_len = 1;
  403b27:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  403b2e:	00 00 
      quote_string = "\"";
  403b30:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  403b35:	e9 26 fc ff ff       	jmpq   403760 <quotearg_buffer_restyled+0x180>
  bool all_c_and_shell_quote_compat = true;
  403b3a:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  bool pending_shell_escape_end = false;
  403b3f:	45 31 ed             	xor    %r13d,%r13d
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
  403b42:	45 31 e4             	xor    %r12d,%r12d
  bool encountered_single_quote = false;
  403b45:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  403b4c:	00 
  size_t orig_buffersize = 0;
  403b4d:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  403b54:	00 00 
      elide_outer_quotes = false;
  403b56:	c6 44 24 63 00       	movb   $0x0,0x63(%rsp)
      backslash_escapes = true;
  403b5b:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
  size_t quote_string_len = 0;
  403b60:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  403b67:	00 00 
  char const *quote_string = 0;
  403b69:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  403b70:	00 00 
  403b72:	e9 e9 fb ff ff       	jmpq   403760 <quotearg_buffer_restyled+0x180>
  bool all_c_and_shell_quote_compat = true;
  403b77:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  bool pending_shell_escape_end = false;
  403b7c:	45 31 ed             	xor    %r13d,%r13d
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
  403b7f:	45 31 e4             	xor    %r12d,%r12d
  bool encountered_single_quote = false;
  403b82:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  403b89:	00 
  size_t orig_buffersize = 0;
  403b8a:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  403b91:	00 00 
      elide_outer_quotes = false;
  403b93:	c6 44 24 63 00       	movb   $0x0,0x63(%rsp)
  bool backslash_escapes = false;
  403b98:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  size_t quote_string_len = 0;
  403b9d:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  403ba4:	00 00 
  char const *quote_string = 0;
  403ba6:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  403bad:	00 00 
  403baf:	e9 ac fb ff ff       	jmpq   403760 <quotearg_buffer_restyled+0x180>
  bool all_c_and_shell_quote_compat = true;
  403bb4:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  bool pending_shell_escape_end = false;
  403bb9:	45 31 ed             	xor    %r13d,%r13d
  bool encountered_single_quote = false;
  403bbc:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  403bc3:	00 
  size_t orig_buffersize = 0;
  403bc4:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  403bcb:	00 00 
      elide_outer_quotes = true;
  403bcd:	c6 44 24 63 01       	movb   $0x1,0x63(%rsp)
      backslash_escapes = true;
  403bd2:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
  403bd7:	e9 43 fe ff ff       	jmpq   403a1f <quotearg_buffer_restyled+0x43f>
      if (!elide_outer_quotes)
  403bdc:	85 db                	test   %ebx,%ebx
  403bde:	0f 85 0a 0c 00 00    	jne    4047ee <quotearg_buffer_restyled+0x120e>
  403be4:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  403be9:	e9 b9 fe ff ff       	jmpq   403aa7 <quotearg_buffer_restyled+0x4c7>
  403bee:	66 90                	xchg   %ax,%ax
      c = arg[i];
  403bf0:	45 31 c9             	xor    %r9d,%r9d
          if (! (argsize == SIZE_MAX ? arg[1] == '\0' : argsize == 1))
  403bf3:	49 83 fb 01          	cmp    $0x1,%r11
  403bf7:	0f 95 c2             	setne  %dl
  403bfa:	49 83 fb ff          	cmp    $0xffffffffffffffff,%r11
  403bfe:	75 0c                	jne    403c0c <quotearg_buffer_restyled+0x62c>
  403c00:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  403c05:	80 78 01 00          	cmpb   $0x0,0x1(%rax)
  403c09:	0f 95 c2             	setne  %dl
  403c0c:	41 83 fa 02          	cmp    $0x2,%r10d
  403c10:	0f 94 c0             	sete   %al
  403c13:	84 d2                	test   %dl,%dl
  403c15:	0f 85 2a fd ff ff    	jne    403945 <quotearg_buffer_restyled+0x365>
          if (i != 0)
  403c1b:	48 85 db             	test   %rbx,%rbx
  403c1e:	0f 85 21 fd ff ff    	jne    403945 <quotearg_buffer_restyled+0x365>
          if (quoting_style == shell_always_quoting_style
  403c24:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  403c29:	0f 84 19 fd ff ff    	je     403948 <quotearg_buffer_restyled+0x368>
  403c2f:	84 c0                	test   %al,%al
  403c31:	0f 84 11 fd ff ff    	je     403948 <quotearg_buffer_restyled+0x368>
  403c37:	41 ba 02 00 00 00    	mov    $0x2,%r10d
  403c3d:	0f 1f 00             	nopl   (%rax)
    quoting_style = shell_escape_always_quoting_style;
  403c40:	80 7c 24 10 00       	cmpb   $0x0,0x10(%rsp)
  403c45:	b8 04 00 00 00       	mov    $0x4,%eax
  403c4a:	44 0f 45 d0          	cmovne %eax,%r10d
  return quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
  403c4e:	48 83 ec 08          	sub    $0x8,%rsp
  403c52:	45 89 d0             	mov    %r10d,%r8d
  403c55:	4c 89 d9             	mov    %r11,%rcx
  403c58:	ff 74 24 78          	pushq  0x78(%rsp)
  403c5c:	4c 89 f6             	mov    %r14,%rsi
  403c5f:	4c 89 ff             	mov    %r15,%rdi
  403c62:	ff b4 24 88 00 00 00 	pushq  0x88(%rsp)
  403c69:	6a 00                	pushq  $0x0
  403c6b:	44 8b 8c 24 84 00 00 	mov    0x84(%rsp),%r9d
  403c72:	00 
  403c73:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  403c78:	41 83 e1 fd          	and    $0xfffffffd,%r9d
  403c7c:	e8 5f f9 ff ff       	callq  4035e0 <quotearg_buffer_restyled>
  403c81:	48 83 c4 20          	add    $0x20,%rsp
  403c85:	49 89 c4             	mov    %rax,%r12
}
  403c88:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  403c8f:	00 
  403c90:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  403c97:	00 00 
  403c99:	0f 85 2d 0b 00 00    	jne    4047cc <quotearg_buffer_restyled+0x11ec>
  403c9f:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  403ca6:	4c 89 e0             	mov    %r12,%rax
  403ca9:	5b                   	pop    %rbx
  403caa:	5d                   	pop    %rbp
  403cab:	41 5c                	pop    %r12
  403cad:	41 5d                	pop    %r13
  403caf:	41 5e                	pop    %r14
  403cb1:	41 5f                	pop    %r15
  403cb3:	c3                   	retq   
      c = arg[i];
  403cb4:	45 31 c9             	xor    %r9d,%r9d
          switch (quoting_style)
  403cb7:	41 83 fa 02          	cmp    $0x2,%r10d
  403cbb:	0f 84 07 04 00 00    	je     4040c8 <quotearg_buffer_restyled+0xae8>
  403cc1:	41 83 fa 05          	cmp    $0x5,%r10d
  403cc5:	75 29                	jne    403cf0 <quotearg_buffer_restyled+0x710>
              if ((flags & QA_SPLIT_TRIGRAPHS)
  403cc7:	f6 44 24 64 04       	testb  $0x4,0x64(%rsp)
  403ccc:	74 22                	je     403cf0 <quotearg_buffer_restyled+0x710>
                  && i + 2 < argsize && arg[i + 1] == '?')
  403cce:	48 8d 43 02          	lea    0x2(%rbx),%rax
  403cd2:	4c 39 d8             	cmp    %r11,%rax
  403cd5:	73 19                	jae    403cf0 <quotearg_buffer_restyled+0x710>
  403cd7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  403cdc:	80 7c 1f 01 3f       	cmpb   $0x3f,0x1(%rdi,%rbx,1)
  403ce1:	0f 84 c6 08 00 00    	je     4045ad <quotearg_buffer_restyled+0xfcd>
  403ce7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  403cee:	00 00 
                switch (arg[i + 2])
  403cf0:	31 c0                	xor    %eax,%eax
      bool c_and_shell_quote_compat = false;
  403cf2:	45 31 ed             	xor    %r13d,%r13d
                switch (arg[i + 2])
  403cf5:	bd 3f 00 00 00       	mov    $0x3f,%ebp
  403cfa:	e9 49 fc ff ff       	jmpq   403948 <quotearg_buffer_restyled+0x368>
      c = arg[i];
  403cff:	45 31 c9             	xor    %r9d,%r9d
          if (quoting_style == shell_always_quoting_style)
  403d02:	41 83 fa 02          	cmp    $0x2,%r10d
  403d06:	0f 84 74 03 00 00    	je     404080 <quotearg_buffer_restyled+0xaa0>
          encountered_single_quote = true;
  403d0c:	44 88 ac 24 84 00 00 	mov    %r13b,0x84(%rsp)
  403d13:	00 
  403d14:	31 c0                	xor    %eax,%eax
  403d16:	bd 27 00 00 00       	mov    $0x27,%ebp
  403d1b:	e9 28 fc ff ff       	jmpq   403948 <quotearg_buffer_restyled+0x368>
      c = arg[i];
  403d20:	45 31 c9             	xor    %r9d,%r9d
          if (quoting_style == shell_always_quoting_style)
  403d23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
          if (backslash_escapes && elide_outer_quotes && quote_string_len)
  403d28:	0f b6 4c 24 63       	movzbl 0x63(%rsp),%ecx
  403d2d:	84 4c 24 10          	test   %cl,0x10(%rsp)
  403d31:	74 0c                	je     403d3f <quotearg_buffer_restyled+0x75f>
  403d33:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
  403d39:	0f 85 79 01 00 00    	jne    403eb8 <quotearg_buffer_restyled+0x8d8>
        c_and_shell_escape:
  403d3f:	bd 5c 00 00 00       	mov    $0x5c,%ebp
  403d44:	ba 5c 00 00 00       	mov    $0x5c,%edx
  403d49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
          if (backslash_escapes)
  403d50:	80 7c 24 10 00       	cmpb   $0x0,0x10(%rsp)
  403d55:	0f 85 8c 0a 00 00    	jne    4047e7 <quotearg_buffer_restyled+0x1207>
          if (i != 0)
  403d5b:	45 31 ed             	xor    %r13d,%r13d
  403d5e:	31 c0                	xor    %eax,%eax
              || elide_outer_quotes)
  403d60:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  403d65:	0f 85 25 fb ff ff    	jne    403890 <quotearg_buffer_restyled+0x2b0>
  403d6b:	e9 f8 fb ff ff       	jmpq   403968 <quotearg_buffer_restyled+0x388>
        case '\a': esc = 'a'; goto c_escape;
  403d70:	bd 61 00 00 00       	mov    $0x61,%ebp
      START_ESC ();
  403d75:	41 83 fa 02          	cmp    $0x2,%r10d
  403d79:	0f 94 c0             	sete   %al
  403d7c:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  403d81:	75 2d                	jne    403db0 <quotearg_buffer_restyled+0x7d0>
      bool c_and_shell_quote_compat = false;
  403d83:	45 31 ed             	xor    %r13d,%r13d
  403d86:	e9 7b fb ff ff       	jmpq   403906 <quotearg_buffer_restyled+0x326>
        case '\r': esc = 'r'; goto c_and_shell_escape;
  403d8b:	bd 72 00 00 00       	mov    $0x72,%ebp
      bool c_and_shell_quote_compat = false;
  403d90:	45 31 ed             	xor    %r13d,%r13d
      START_ESC ();
  403d93:	41 83 fa 02          	cmp    $0x2,%r10d
  403d97:	0f 94 c2             	sete   %dl
  403d9a:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  403d9f:	89 d0                	mov    %edx,%eax
  403da1:	0f 84 24 fb ff ff    	je     4038cb <quotearg_buffer_restyled+0x2eb>
  403da7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  403dae:	00 00 
  403db0:	20 44 24 10          	and    %al,0x10(%rsp)
  403db4:	e9 87 fe ff ff       	jmpq   403c40 <quotearg_buffer_restyled+0x660>
        case '\f': esc = 'f'; goto c_escape;
  403db9:	bd 66 00 00 00       	mov    $0x66,%ebp
  403dbe:	eb b5                	jmp    403d75 <quotearg_buffer_restyled+0x795>
        case '\n': esc = 'n'; goto c_and_shell_escape;
  403dc0:	bd 6e 00 00 00       	mov    $0x6e,%ebp
  403dc5:	eb c9                	jmp    403d90 <quotearg_buffer_restyled+0x7b0>
        case '\b': esc = 'b'; goto c_escape;
  403dc7:	bd 62 00 00 00       	mov    $0x62,%ebp
  403dcc:	eb a7                	jmp    403d75 <quotearg_buffer_restyled+0x795>
              START_ESC ();
  403dce:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  403dd3:	0f 85 89 09 00 00    	jne    404762 <quotearg_buffer_restyled+0x1182>
  403dd9:	45 31 c9             	xor    %r9d,%r9d
  403ddc:	41 83 fa 02          	cmp    $0x2,%r10d
  403de0:	44 89 c0             	mov    %r8d,%eax
  403de3:	0f 94 c2             	sete   %dl
  403de6:	83 f0 01             	xor    $0x1,%eax
  403de9:	20 d0                	and    %dl,%al
  403deb:	0f 84 0f 06 00 00    	je     404400 <quotearg_buffer_restyled+0xe20>
  403df1:	4d 39 e6             	cmp    %r12,%r14
  403df4:	76 05                	jbe    403dfb <quotearg_buffer_restyled+0x81b>
  403df6:	43 c6 04 27 27       	movb   $0x27,(%r15,%r12,1)
  403dfb:	49 8d 4c 24 01       	lea    0x1(%r12),%rcx
  403e00:	49 39 ce             	cmp    %rcx,%r14
  403e03:	76 06                	jbe    403e0b <quotearg_buffer_restyled+0x82b>
  403e05:	43 c6 44 27 01 24    	movb   $0x24,0x1(%r15,%r12,1)
  403e0b:	49 8d 4c 24 02       	lea    0x2(%r12),%rcx
  403e10:	49 39 ce             	cmp    %rcx,%r14
  403e13:	76 06                	jbe    403e1b <quotearg_buffer_restyled+0x83b>
  403e15:	43 c6 44 27 02 27    	movb   $0x27,0x2(%r15,%r12,1)
  403e1b:	49 8d 4c 24 03       	lea    0x3(%r12),%rcx
  403e20:	49 39 ce             	cmp    %rcx,%r14
  403e23:	0f 87 e2 05 00 00    	ja     40440b <quotearg_buffer_restyled+0xe2b>
  403e29:	49 83 c4 04          	add    $0x4,%r12
  403e2d:	41 89 c0             	mov    %eax,%r8d
      bool c_and_shell_quote_compat = false;
  403e30:	45 31 ed             	xor    %r13d,%r13d
              c = '0';
  403e33:	bd 30 00 00 00       	mov    $0x30,%ebp
  403e38:	e9 71 fa ff ff       	jmpq   4038ae <quotearg_buffer_restyled+0x2ce>
      c = arg[i];
  403e3d:	45 31 c9             	xor    %r9d,%r9d
        c_and_shell_escape:
  403e40:	bd 09 00 00 00       	mov    $0x9,%ebp
  403e45:	ba 74 00 00 00       	mov    $0x74,%edx
  403e4a:	e9 01 ff ff ff       	jmpq   403d50 <quotearg_buffer_restyled+0x770>
      if (! (((backslash_escapes && quoting_style != shell_always_quoting_style)
  403e4f:	bd 76 00 00 00       	mov    $0x76,%ebp
  403e54:	e9 37 ff ff ff       	jmpq   403d90 <quotearg_buffer_restyled+0x7b0>
  403e59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      c = arg[i];
  403e60:	0f b6 6d 00          	movzbl 0x0(%rbp),%ebp
      switch (c)
  403e64:	40 80 fd 7e          	cmp    $0x7e,%bpl
  403e68:	0f 87 15 fb ff ff    	ja     403983 <quotearg_buffer_restyled+0x3a3>
  403e6e:	48 8d 0d 73 50 00 00 	lea    0x5073(%rip),%rcx        # 408ee8 <terminator+0x2ef>
  403e75:	40 0f b6 d5          	movzbl %bpl,%edx
  403e79:	48 63 04 91          	movslq (%rcx,%rdx,4),%rax
  403e7d:	48 01 c8             	add    %rcx,%rax
  403e80:	ff e0                	jmpq   *%rax
  403e82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  403e88:	41 83 fa 02          	cmp    $0x2,%r10d
  403e8c:	0f 94 c0             	sete   %al
      bool c_and_shell_quote_compat = false;
  403e8f:	45 31 ed             	xor    %r13d,%r13d
  403e92:	e9 8d fd ff ff       	jmpq   403c24 <quotearg_buffer_restyled+0x644>
  403e97:	41 83 fa 02          	cmp    $0x2,%r10d
  403e9b:	0f 94 c0             	sete   %al
  403e9e:	e9 78 fd ff ff       	jmpq   403c1b <quotearg_buffer_restyled+0x63b>
          if (quoting_style == shell_always_quoting_style)
  403ea3:	41 83 fa 02          	cmp    $0x2,%r10d
  403ea7:	0f 85 7b fe ff ff    	jne    403d28 <quotearg_buffer_restyled+0x748>
              if (elide_outer_quotes)
  403ead:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  403eb2:	0f 85 88 fd ff ff    	jne    403c40 <quotearg_buffer_restyled+0x660>
  403eb8:	48 83 c3 01          	add    $0x1,%rbx
  403ebc:	44 89 c0             	mov    %r8d,%eax
      bool c_and_shell_quote_compat = false;
  403ebf:	45 31 ed             	xor    %r13d,%r13d
              if (elide_outer_quotes)
  403ec2:	bd 5c 00 00 00       	mov    $0x5c,%ebp
  403ec7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  403ece:	00 00 
      END_ESC ();
  403ed0:	84 c0                	test   %al,%al
  403ed2:	0f 84 40 fa ff ff    	je     403918 <quotearg_buffer_restyled+0x338>
  403ed8:	4d 39 e6             	cmp    %r12,%r14
  403edb:	76 05                	jbe    403ee2 <quotearg_buffer_restyled+0x902>
  403edd:	43 c6 04 27 27       	movb   $0x27,(%r15,%r12,1)
  403ee2:	49 8d 44 24 01       	lea    0x1(%r12),%rax
  403ee7:	49 39 c6             	cmp    %rax,%r14
  403eea:	76 06                	jbe    403ef2 <quotearg_buffer_restyled+0x912>
  403eec:	43 c6 44 27 01 27    	movb   $0x27,0x1(%r15,%r12,1)
  403ef2:	49 83 c4 02          	add    $0x2,%r12
  403ef6:	45 31 c0             	xor    %r8d,%r8d
  403ef9:	e9 1a fa ff ff       	jmpq   403918 <quotearg_buffer_restyled+0x338>
  403efe:	41 83 fa 02          	cmp    $0x2,%r10d
      c = arg[i];
  403f02:	bd 20 00 00 00       	mov    $0x20,%ebp
  403f07:	0f 94 c0             	sete   %al
  403f0a:	e9 15 fd ff ff       	jmpq   403c24 <quotearg_buffer_restyled+0x644>
  403f0f:	bd 0c 00 00 00       	mov    $0xc,%ebp
        case '\f': esc = 'f'; goto c_escape;
  403f14:	ba 66 00 00 00       	mov    $0x66,%edx
  403f19:	e9 32 fe ff ff       	jmpq   403d50 <quotearg_buffer_restyled+0x770>
      c = arg[i];
  403f1e:	bd 09 00 00 00       	mov    $0x9,%ebp
        case '\t': esc = 't'; goto c_and_shell_escape;
  403f23:	ba 74 00 00 00       	mov    $0x74,%edx
          if (quoting_style == shell_always_quoting_style
  403f28:	41 83 fa 02          	cmp    $0x2,%r10d
  403f2c:	0f 94 c0             	sete   %al
  403f2f:	22 44 24 63          	and    0x63(%rsp),%al
  403f33:	41 89 c1             	mov    %eax,%r9d
  403f36:	0f 84 14 fe ff ff    	je     403d50 <quotearg_buffer_restyled+0x770>
  403f3c:	e9 f6 fc ff ff       	jmpq   403c37 <quotearg_buffer_restyled+0x657>
      c = arg[i];
  403f41:	bd 08 00 00 00       	mov    $0x8,%ebp
        case '\b': esc = 'b'; goto c_escape;
  403f46:	ba 62 00 00 00       	mov    $0x62,%edx
  403f4b:	e9 00 fe ff ff       	jmpq   403d50 <quotearg_buffer_restyled+0x770>
          if (backslash_escapes)
  403f50:	80 7c 24 10 00       	cmpb   $0x0,0x10(%rsp)
  403f55:	0f 85 73 fe ff ff    	jne    403dce <quotearg_buffer_restyled+0x7ee>
      bool is_right_quote = false;
  403f5b:	45 31 c9             	xor    %r9d,%r9d
  403f5e:	31 ed                	xor    %ebp,%ebp
          else if (flags & QA_ELIDE_NULL_BYTES)
  403f60:	f6 44 24 64 01       	testb  $0x1,0x64(%rsp)
  403f65:	0f 84 f0 fd ff ff    	je     403d5b <quotearg_buffer_restyled+0x77b>
  403f6b:	48 83 c3 01          	add    $0x1,%rbx
  403f6f:	e9 f4 f7 ff ff       	jmpq   403768 <quotearg_buffer_restyled+0x188>
      c = arg[i];
  403f74:	bd 0d 00 00 00       	mov    $0xd,%ebp
        case '\r': esc = 'r'; goto c_and_shell_escape;
  403f79:	ba 72 00 00 00       	mov    $0x72,%edx
  403f7e:	eb a8                	jmp    403f28 <quotearg_buffer_restyled+0x948>
      c = arg[i];
  403f80:	bd 0b 00 00 00       	mov    $0xb,%ebp
        case '\v': esc = 'v'; goto c_escape;
  403f85:	ba 76 00 00 00       	mov    $0x76,%edx
  403f8a:	e9 c1 fd ff ff       	jmpq   403d50 <quotearg_buffer_restyled+0x770>
      c = arg[i];
  403f8f:	bd 0a 00 00 00       	mov    $0xa,%ebp
  403f94:	ba 6e 00 00 00       	mov    $0x6e,%edx
  403f99:	eb 8d                	jmp    403f28 <quotearg_buffer_restyled+0x948>
  403f9b:	bd 07 00 00 00       	mov    $0x7,%ebp
  403fa0:	ba 61 00 00 00       	mov    $0x61,%edx
  403fa5:	e9 a6 fd ff ff       	jmpq   403d50 <quotearg_buffer_restyled+0x770>
  403faa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  403fb0:	0f b6 6d 00          	movzbl 0x0(%rbp),%ebp
      switch (c)
  403fb4:	40 80 fd 7e          	cmp    $0x7e,%bpl
  403fb8:	0f 87 c2 f9 ff ff    	ja     403980 <quotearg_buffer_restyled+0x3a0>
  403fbe:	48 8d 0d 1f 51 00 00 	lea    0x511f(%rip),%rcx        # 4090e4 <terminator+0x4eb>
  403fc5:	40 0f b6 d5          	movzbl %bpl,%edx
  403fc9:	48 63 04 91          	movslq (%rcx,%rdx,4),%rax
  403fcd:	48 01 c8             	add    %rcx,%rax
  403fd0:	ff e0                	jmpq   *%rax
  403fd2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      c = arg[i];
  403fd8:	31 c0                	xor    %eax,%eax
  403fda:	e9 a1 f8 ff ff       	jmpq   403880 <quotearg_buffer_restyled+0x2a0>
  403fdf:	31 c0                	xor    %eax,%eax
          if (i != 0)
  403fe1:	48 85 db             	test   %rbx,%rbx
  403fe4:	0f 85 06 04 00 00    	jne    4043f0 <quotearg_buffer_restyled+0xe10>
          c_and_shell_quote_compat = true;
  403fea:	45 89 cd             	mov    %r9d,%r13d
          if (i != 0)
  403fed:	41 89 c1             	mov    %eax,%r9d
  403ff0:	31 c0                	xor    %eax,%eax
  403ff2:	e9 51 f9 ff ff       	jmpq   403948 <quotearg_buffer_restyled+0x368>
      c = arg[i];
  403ff7:	31 c0                	xor    %eax,%eax
  403ff9:	bd 20 00 00 00       	mov    $0x20,%ebp
  403ffe:	e9 7d f8 ff ff       	jmpq   403880 <quotearg_buffer_restyled+0x2a0>
  404003:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  if (len == 0 && quoting_style == shell_always_quoting_style
  404008:	41 83 fa 02          	cmp    $0x2,%r10d
  40400c:	45 89 c5             	mov    %r8d,%r13d
  40400f:	0f 94 c2             	sete   %dl
      && elide_outer_quotes)
  404012:	4d 85 e4             	test   %r12,%r12
  404015:	75 0a                	jne    404021 <quotearg_buffer_restyled+0xa41>
  404017:	84 54 24 63          	test   %dl,0x63(%rsp)
  40401b:	0f 85 16 fc ff ff    	jne    403c37 <quotearg_buffer_restyled+0x657>
  if (quoting_style == shell_always_quoting_style && ! elide_outer_quotes
  404021:	0f b6 44 24 63       	movzbl 0x63(%rsp),%eax
  404026:	83 f0 01             	xor    $0x1,%eax
  404029:	20 c2                	and    %al,%dl
  40402b:	0f 84 a2 06 00 00    	je     4046d3 <quotearg_buffer_restyled+0x10f3>
      && encountered_single_quote)
  404031:	80 bc 24 84 00 00 00 	cmpb   $0x0,0x84(%rsp)
  404038:	00 
  404039:	0f 84 96 06 00 00    	je     4046d5 <quotearg_buffer_restyled+0x10f5>
      if (all_c_and_shell_quote_compat)
  40403f:	80 7c 24 08 00       	cmpb   $0x0,0x8(%rsp)
  404044:	0f 85 33 07 00 00    	jne    40477d <quotearg_buffer_restyled+0x119d>
      else if (! buffersize && orig_buffersize)
  40404a:	4d 85 f6             	test   %r14,%r14
  40404d:	0f 94 c0             	sete   %al
  404050:	48 83 7c 24 58 00    	cmpq   $0x0,0x58(%rsp)
  404056:	0f 95 c2             	setne  %dl
  404059:	20 d0                	and    %dl,%al
  40405b:	0f 84 0f 07 00 00    	je     404770 <quotearg_buffer_restyled+0x1190>
  404061:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
        STORE ('\'');
  404066:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
  40406b:	41 c6 07 27          	movb   $0x27,(%r15)
  40406f:	88 84 24 84 00 00 00 	mov    %al,0x84(%rsp)
  404076:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  40407b:	e9 49 fa ff ff       	jmpq   403ac9 <quotearg_buffer_restyled+0x4e9>
              if (elide_outer_quotes)
  404080:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  404085:	0f 85 b5 fb ff ff    	jne    403c40 <quotearg_buffer_restyled+0x660>
              if (buffersize && ! orig_buffersize)
  40408b:	4d 85 f6             	test   %r14,%r14
  40408e:	0f 84 d2 03 00 00    	je     404466 <quotearg_buffer_restyled+0xe86>
                  buffersize = 0;
  404094:	31 d2                	xor    %edx,%edx
              if (buffersize && ! orig_buffersize)
  404096:	48 83 7c 24 58 00    	cmpq   $0x0,0x58(%rsp)
  40409c:	0f 85 c4 03 00 00    	jne    404466 <quotearg_buffer_restyled+0xe86>
              STORE ('\'');
  4040a2:	4c 89 74 24 58       	mov    %r14,0x58(%rsp)
  4040a7:	49 83 c4 03          	add    $0x3,%r12
      bool escaping = false;
  4040ab:	31 c0                	xor    %eax,%eax
              pending_shell_escape_end = false;
  4040ad:	45 31 c0             	xor    %r8d,%r8d
          encountered_single_quote = true;
  4040b0:	44 88 ac 24 84 00 00 	mov    %r13b,0x84(%rsp)
  4040b7:	00 
              STORE ('\'');
  4040b8:	49 89 d6             	mov    %rdx,%r14
  4040bb:	bd 27 00 00 00       	mov    $0x27,%ebp
  4040c0:	e9 e9 f7 ff ff       	jmpq   4038ae <quotearg_buffer_restyled+0x2ce>
  4040c5:	0f 1f 00             	nopl   (%rax)
              if (elide_outer_quotes)
  4040c8:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  4040cd:	0f 85 6d fb ff ff    	jne    403c40 <quotearg_buffer_restyled+0x660>
      bool c_and_shell_quote_compat = false;
  4040d3:	45 31 ed             	xor    %r13d,%r13d
      bool escaping = false;
  4040d6:	31 c0                	xor    %eax,%eax
  4040d8:	bd 3f 00 00 00       	mov    $0x3f,%ebp
  4040dd:	e9 cc f7 ff ff       	jmpq   4038ae <quotearg_buffer_restyled+0x2ce>
  4040e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
  4040e8:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
  4040ef:	00 
  4040f0:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
  4040f7:	00 00 00 00 00 
  4040fc:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
                if (argsize == SIZE_MAX)
  404101:	49 83 fb ff          	cmp    $0xffffffffffffffff,%r11
  404105:	75 2d                	jne    404134 <quotearg_buffer_restyled+0xb54>
                  argsize = strlen (arg);
  404107:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  40410c:	44 89 54 24 48       	mov    %r10d,0x48(%rsp)
  404111:	44 88 44 24 40       	mov    %r8b,0x40(%rsp)
  404116:	44 88 4c 24 30       	mov    %r9b,0x30(%rsp)
  40411b:	e8 10 d3 ff ff       	callq  401430 <strlen@plt>
  404120:	44 8b 54 24 48       	mov    0x48(%rsp),%r10d
  404125:	44 0f b6 44 24 40    	movzbl 0x40(%rsp),%r8d
  40412b:	44 0f b6 4c 24 30    	movzbl 0x30(%rsp),%r9d
  404131:	49 89 c3             	mov    %rax,%r11
  404134:	48 8d 84 24 9c 00 00 	lea    0x9c(%rsp),%rax
  40413b:	00 
  40413c:	44 88 6c 24 30       	mov    %r13b,0x30(%rsp)
      c = arg[i];
  404141:	31 ff                	xor    %edi,%edi
  404143:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  404148:	44 88 84 24 85 00 00 	mov    %r8b,0x85(%rsp)
  40414f:	00 
  404150:	44 88 8c 24 87 00 00 	mov    %r9b,0x87(%rsp)
  404157:	00 
  404158:	44 89 94 24 80 00 00 	mov    %r10d,0x80(%rsp)
  40415f:	00 
  404160:	4c 89 a4 24 88 00 00 	mov    %r12,0x88(%rsp)
  404167:	00 
  404168:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  40416d:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  404172:	4c 89 db             	mov    %r11,%rbx
  404175:	40 88 ac 24 86 00 00 	mov    %bpl,0x86(%rsp)
  40417c:	00 
  40417d:	48 89 fd             	mov    %rdi,%rbp
                                            argsize - (i + m), &mbstate);
  404180:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                    size_t bytes = mbrtowc (&w, &arg[i + m],
  404185:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  40418a:	48 89 da             	mov    %rbx,%rdx
  40418d:	4c 89 e1             	mov    %r12,%rcx
                                            argsize - (i + m), &mbstate);
  404190:	4c 8d 2c 28          	lea    (%rax,%rbp,1),%r13
                    size_t bytes = mbrtowc (&w, &arg[i + m],
  404194:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  404199:	4c 29 ea             	sub    %r13,%rdx
  40419c:	4a 8d 34 28          	lea    (%rax,%r13,1),%rsi
  4041a0:	e8 cb 1f 00 00       	callq  406170 <rpl_mbrtowc>
  4041a5:	48 89 c2             	mov    %rax,%rdx
                    if (bytes == 0)
  4041a8:	48 85 c0             	test   %rax,%rax
  4041ab:	74 66                	je     404213 <quotearg_buffer_restyled+0xc33>
                    else if (bytes == (size_t) -1)
  4041ad:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  4041b1:	0f 84 b4 03 00 00    	je     40456b <quotearg_buffer_restyled+0xf8b>
                    else if (bytes == (size_t) -2)
  4041b7:	48 83 f8 fe          	cmp    $0xfffffffffffffffe,%rax
  4041bb:	0f 84 65 04 00 00    	je     404626 <quotearg_buffer_restyled+0x1046>
                        if ('[' == 0x5b && elide_outer_quotes
  4041c1:	83 bc 24 80 00 00 00 	cmpl   $0x2,0x80(%rsp)
  4041c8:	02 
  4041c9:	75 0b                	jne    4041d6 <quotearg_buffer_restyled+0xbf6>
  4041cb:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  4041d0:	0f 85 ba 01 00 00    	jne    404390 <quotearg_buffer_restyled+0xdb0>
                        if (! iswprint (w))
  4041d6:	8b bc 24 9c 00 00 00 	mov    0x9c(%rsp),%edi
  4041dd:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  4041e2:	e8 a9 d4 ff ff       	callq  401690 <iswprint@plt>
                          printable = false;
  4041e7:	0f b6 7c 24 30       	movzbl 0x30(%rsp),%edi
                        m += bytes;
  4041ec:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
                          printable = false;
  4041f1:	85 c0                	test   %eax,%eax
  4041f3:	b8 00 00 00 00       	mov    $0x0,%eax
  4041f8:	0f 44 f8             	cmove  %eax,%edi
                        m += bytes;
  4041fb:	48 01 d5             	add    %rdx,%rbp
                          printable = false;
  4041fe:	40 88 7c 24 30       	mov    %dil,0x30(%rsp)
                while (! mbsinit (&mbstate));
  404203:	4c 89 e7             	mov    %r12,%rdi
  404206:	e8 75 d4 ff ff       	callq  401680 <mbsinit@plt>
  40420b:	85 c0                	test   %eax,%eax
  40420d:	0f 84 6d ff ff ff    	je     404180 <quotearg_buffer_restyled+0xba0>
  404213:	44 0f b6 6c 24 30    	movzbl 0x30(%rsp),%r13d
  404219:	48 89 ef             	mov    %rbp,%rdi
  40421c:	49 89 db             	mov    %rbx,%r11
  40421f:	44 0f b6 84 24 85 00 	movzbl 0x85(%rsp),%r8d
  404226:	00 00 
  404228:	0f b6 ac 24 86 00 00 	movzbl 0x86(%rsp),%ebp
  40422f:	00 
  404230:	4c 8b a4 24 88 00 00 	mov    0x88(%rsp),%r12
  404237:	00 
  404238:	44 89 ea             	mov    %r13d,%edx
  40423b:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
  404240:	44 0f b6 8c 24 87 00 	movzbl 0x87(%rsp),%r9d
  404247:	00 00 
  404249:	44 8b 94 24 80 00 00 	mov    0x80(%rsp),%r10d
  404250:	00 
  404251:	83 f2 01             	xor    $0x1,%edx
  404254:	22 54 24 10          	and    0x10(%rsp),%dl
            if (1 < m || (backslash_escapes && ! printable))
  404258:	48 83 ff 01          	cmp    $0x1,%rdi
  40425c:	0f 86 7f f7 ff ff    	jbe    4039e1 <quotearg_buffer_restyled+0x401>
                size_t ilim = i + m;
  404262:	48 89 f9             	mov    %rdi,%rcx
      bool escaping = false;
  404265:	44 88 6c 24 30       	mov    %r13b,0x30(%rsp)
  40426a:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  40426f:	31 f6                	xor    %esi,%esi
  404271:	44 0f b6 6c 24 63    	movzbl 0x63(%rsp),%r13d
                size_t ilim = i + m;
  404277:	48 01 d9             	add    %rbx,%rcx
  40427a:	e9 b2 00 00 00       	jmpq   404331 <quotearg_buffer_restyled+0xd51>
  40427f:	90                   	nop
                        START_ESC ();
  404280:	41 83 fa 02          	cmp    $0x2,%r10d
  404284:	0f 94 c0             	sete   %al
  404287:	45 84 ed             	test   %r13b,%r13b
  40428a:	0f 85 29 02 00 00    	jne    4044b9 <quotearg_buffer_restyled+0xed9>
  404290:	44 89 c6             	mov    %r8d,%esi
  404293:	83 f6 01             	xor    $0x1,%esi
  404296:	40 20 f0             	and    %sil,%al
  404299:	74 31                	je     4042cc <quotearg_buffer_restyled+0xcec>
  40429b:	4d 39 e6             	cmp    %r12,%r14
  40429e:	76 05                	jbe    4042a5 <quotearg_buffer_restyled+0xcc5>
  4042a0:	43 c6 04 27 27       	movb   $0x27,(%r15,%r12,1)
  4042a5:	49 8d 74 24 01       	lea    0x1(%r12),%rsi
  4042aa:	49 39 f6             	cmp    %rsi,%r14
  4042ad:	76 06                	jbe    4042b5 <quotearg_buffer_restyled+0xcd5>
  4042af:	43 c6 44 27 01 24    	movb   $0x24,0x1(%r15,%r12,1)
  4042b5:	49 8d 74 24 02       	lea    0x2(%r12),%rsi
  4042ba:	49 39 f6             	cmp    %rsi,%r14
  4042bd:	76 06                	jbe    4042c5 <quotearg_buffer_restyled+0xce5>
  4042bf:	43 c6 44 27 02 27    	movb   $0x27,0x2(%r15,%r12,1)
  4042c5:	49 83 c4 03          	add    $0x3,%r12
  4042c9:	41 89 c0             	mov    %eax,%r8d
  4042cc:	4d 39 e6             	cmp    %r12,%r14
  4042cf:	76 05                	jbe    4042d6 <quotearg_buffer_restyled+0xcf6>
  4042d1:	43 c6 04 27 5c       	movb   $0x5c,(%r15,%r12,1)
  4042d6:	49 8d 44 24 01       	lea    0x1(%r12),%rax
                        STORE ('0' + (c >> 6));
  4042db:	49 39 c6             	cmp    %rax,%r14
  4042de:	76 0d                	jbe    4042ed <quotearg_buffer_restyled+0xd0d>
  4042e0:	89 e8                	mov    %ebp,%eax
  4042e2:	c0 e8 06             	shr    $0x6,%al
  4042e5:	83 c0 30             	add    $0x30,%eax
  4042e8:	43 88 44 27 01       	mov    %al,0x1(%r15,%r12,1)
  4042ed:	49 8d 44 24 02       	lea    0x2(%r12),%rax
                        STORE ('0' + ((c >> 3) & 7));
  4042f2:	49 39 c6             	cmp    %rax,%r14
  4042f5:	76 10                	jbe    404307 <quotearg_buffer_restyled+0xd27>
  4042f7:	89 e8                	mov    %ebp,%eax
  4042f9:	c0 e8 03             	shr    $0x3,%al
  4042fc:	83 e0 07             	and    $0x7,%eax
  4042ff:	83 c0 30             	add    $0x30,%eax
  404302:	43 88 44 27 02       	mov    %al,0x2(%r15,%r12,1)
                        c = '0' + (c & 7);
  404307:	83 e5 07             	and    $0x7,%ebp
                    if (ilim <= i + 1)
  40430a:	48 83 c3 01          	add    $0x1,%rbx
                        STORE ('0' + ((c >> 3) & 7));
  40430e:	49 83 c4 03          	add    $0x3,%r12
                        c = '0' + (c & 7);
  404312:	83 c5 30             	add    $0x30,%ebp
                    if (ilim <= i + 1)
  404315:	48 39 cb             	cmp    %rcx,%rbx
  404318:	0f 83 a4 01 00 00    	jae    4044c2 <quotearg_buffer_restyled+0xee2>
                        START_ESC ();
  40431e:	89 d6                	mov    %edx,%esi
                    STORE (c);
  404320:	4d 39 e6             	cmp    %r12,%r14
  404323:	76 04                	jbe    404329 <quotearg_buffer_restyled+0xd49>
  404325:	43 88 2c 27          	mov    %bpl,(%r15,%r12,1)
                    c = arg[++i];
  404329:	0f b6 2c 1f          	movzbl (%rdi,%rbx,1),%ebp
                    STORE (c);
  40432d:	49 83 c4 01          	add    $0x1,%r12
                    if (backslash_escapes && ! printable)
  404331:	84 d2                	test   %dl,%dl
  404333:	0f 85 47 ff ff ff    	jne    404280 <quotearg_buffer_restyled+0xca0>
                    else if (is_right_quote)
  404339:	89 f0                	mov    %esi,%eax
  40433b:	83 f0 01             	xor    $0x1,%eax
  40433e:	44 21 c0             	and    %r8d,%eax
  404341:	45 84 c9             	test   %r9b,%r9b
  404344:	74 0e                	je     404354 <quotearg_buffer_restyled+0xd74>
                        STORE ('\\');
  404346:	4d 39 e6             	cmp    %r12,%r14
  404349:	76 05                	jbe    404350 <quotearg_buffer_restyled+0xd70>
  40434b:	43 c6 04 27 5c       	movb   $0x5c,(%r15,%r12,1)
  404350:	49 83 c4 01          	add    $0x1,%r12
                    if (ilim <= i + 1)
  404354:	48 83 c3 01          	add    $0x1,%rbx
  404358:	48 39 cb             	cmp    %rcx,%rbx
  40435b:	0f 83 4d 01 00 00    	jae    4044ae <quotearg_buffer_restyled+0xece>
                    END_ESC ();
  404361:	84 c0                	test   %al,%al
  404363:	0f 84 64 01 00 00    	je     4044cd <quotearg_buffer_restyled+0xeed>
  404369:	4d 39 e6             	cmp    %r12,%r14
  40436c:	76 05                	jbe    404373 <quotearg_buffer_restyled+0xd93>
  40436e:	43 c6 04 27 27       	movb   $0x27,(%r15,%r12,1)
  404373:	49 8d 44 24 01       	lea    0x1(%r12),%rax
  404378:	49 39 c6             	cmp    %rax,%r14
  40437b:	76 06                	jbe    404383 <quotearg_buffer_restyled+0xda3>
  40437d:	43 c6 44 27 01 27    	movb   $0x27,0x1(%r15,%r12,1)
  404383:	49 83 c4 02          	add    $0x2,%r12
  404387:	45 31 c9             	xor    %r9d,%r9d
  40438a:	45 31 c0             	xor    %r8d,%r8d
  40438d:	eb 91                	jmp    404320 <quotearg_buffer_restyled+0xd40>
  40438f:	90                   	nop
                            for (j = 1; j < bytes; j++)
  404390:	48 83 f8 01          	cmp    $0x1,%rax
  404394:	0f 84 3c fe ff ff    	je     4041d6 <quotearg_buffer_restyled+0xbf6>
  40439a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40439f:	4a 8d 74 28 01       	lea    0x1(%rax,%r13,1),%rsi
  4043a4:	48 01 d0             	add    %rdx,%rax
  4043a7:	4e 8d 04 28          	lea    (%rax,%r13,1),%r8
  4043ab:	eb 0d                	jmp    4043ba <quotearg_buffer_restyled+0xdda>
  4043ad:	48 83 c6 01          	add    $0x1,%rsi
  4043b1:	49 39 f0             	cmp    %rsi,%r8
  4043b4:	0f 84 1c fe ff ff    	je     4041d6 <quotearg_buffer_restyled+0xbf6>
                              switch (arg[i + m + j])
  4043ba:	0f b6 06             	movzbl (%rsi),%eax
  4043bd:	8d 48 a5             	lea    -0x5b(%rax),%ecx
  4043c0:	80 f9 21             	cmp    $0x21,%cl
  4043c3:	77 e8                	ja     4043ad <quotearg_buffer_restyled+0xdcd>
  4043c5:	b8 01 00 00 00       	mov    $0x1,%eax
  4043ca:	48 d3 e0             	shl    %cl,%rax
  4043cd:	48 b9 2b 00 00 00 02 	movabs $0x20000002b,%rcx
  4043d4:	00 00 00 
  4043d7:	48 85 c8             	test   %rcx,%rax
  4043da:	74 d1                	je     4043ad <quotearg_buffer_restyled+0xdcd>
  4043dc:	49 89 db             	mov    %rbx,%r11
                                  goto force_outer_quoting_style;
  4043df:	41 ba 02 00 00 00    	mov    $0x2,%r10d
  4043e5:	e9 56 f8 ff ff       	jmpq   403c40 <quotearg_buffer_restyled+0x660>
  4043ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
          if (i != 0)
  4043f0:	41 89 c1             	mov    %eax,%r9d
      bool c_and_shell_quote_compat = false;
  4043f3:	45 31 ed             	xor    %r13d,%r13d
          if (i != 0)
  4043f6:	31 c0                	xor    %eax,%eax
  4043f8:	e9 93 f4 ff ff       	jmpq   403890 <quotearg_buffer_restyled+0x2b0>
  4043fd:	0f 1f 00             	nopl   (%rax)
              START_ESC ();
  404400:	4c 89 e1             	mov    %r12,%rcx
  404403:	4d 39 e6             	cmp    %r12,%r14
  404406:	76 0b                	jbe    404413 <quotearg_buffer_restyled+0xe33>
  404408:	44 89 c0             	mov    %r8d,%eax
  40440b:	41 c6 04 0f 5c       	movb   $0x5c,(%r15,%rcx,1)
  404410:	41 89 c0             	mov    %eax,%r8d
  404413:	4c 8d 61 01          	lea    0x1(%rcx),%r12
              if (quoting_style != shell_always_quoting_style
  404417:	41 83 fa 02          	cmp    $0x2,%r10d
  40441b:	0f 84 d2 00 00 00    	je     4044f3 <quotearg_buffer_restyled+0xf13>
                  && i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
  404421:	48 8d 43 01          	lea    0x1(%rbx),%rax
              c = '0';
  404425:	bd 30 00 00 00       	mov    $0x30,%ebp
                  && i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
  40442a:	4c 39 d8             	cmp    %r11,%rax
  40442d:	73 19                	jae    404448 <quotearg_buffer_restyled+0xe68>
  40442f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  404434:	0f b6 44 18 01       	movzbl 0x1(%rax,%rbx,1),%eax
  404439:	88 44 24 30          	mov    %al,0x30(%rsp)
  40443d:	83 e8 30             	sub    $0x30,%eax
  404440:	3c 09                	cmp    $0x9,%al
  404442:	0f 86 bb 00 00 00    	jbe    404503 <quotearg_buffer_restyled+0xf23>
      if (! (((backslash_escapes && quoting_style != shell_always_quoting_style)
  404448:	0f b6 44 24 10       	movzbl 0x10(%rsp),%eax
  40444d:	83 f0 01             	xor    $0x1,%eax
  404450:	08 d0                	or     %dl,%al
  404452:	44 89 e8             	mov    %r13d,%eax
  404455:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  40445b:	0f 84 2f f4 ff ff    	je     403890 <quotearg_buffer_restyled+0x2b0>
  404461:	e9 48 f4 ff ff       	jmpq   4038ae <quotearg_buffer_restyled+0x2ce>
              STORE ('\'');
  404466:	4d 39 e6             	cmp    %r12,%r14
  404469:	76 05                	jbe    404470 <quotearg_buffer_restyled+0xe90>
  40446b:	43 c6 04 27 27       	movb   $0x27,(%r15,%r12,1)
  404470:	49 8d 44 24 01       	lea    0x1(%r12),%rax
              STORE ('\\');
  404475:	49 39 c6             	cmp    %rax,%r14
  404478:	76 06                	jbe    404480 <quotearg_buffer_restyled+0xea0>
  40447a:	43 c6 44 27 01 5c    	movb   $0x5c,0x1(%r15,%r12,1)
  404480:	49 8d 44 24 02       	lea    0x2(%r12),%rax
              STORE ('\'');
  404485:	49 39 c6             	cmp    %rax,%r14
  404488:	0f 86 31 03 00 00    	jbe    4047bf <quotearg_buffer_restyled+0x11df>
  40448e:	4c 89 f2             	mov    %r14,%rdx
  404491:	43 c6 44 27 02 27    	movb   $0x27,0x2(%r15,%r12,1)
  404497:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
  40449c:	e9 01 fc ff ff       	jmpq   4040a2 <quotearg_buffer_restyled+0xac2>
  4044a1:	0f b6 54 24 10       	movzbl 0x10(%rsp),%edx
  4044a6:	45 31 ed             	xor    %r13d,%r13d
  4044a9:	e9 b4 fd ff ff       	jmpq   404262 <quotearg_buffer_restyled+0xc82>
  4044ae:	44 0f b6 6c 24 30    	movzbl 0x30(%rsp),%r13d
  4044b4:	e9 17 fa ff ff       	jmpq   403ed0 <quotearg_buffer_restyled+0x8f0>
  4044b9:	88 44 24 10          	mov    %al,0x10(%rsp)
  4044bd:	e9 7e f7 ff ff       	jmpq   403c40 <quotearg_buffer_restyled+0x660>
  4044c2:	44 0f b6 6c 24 30    	movzbl 0x30(%rsp),%r13d
  4044c8:	e9 4b f4 ff ff       	jmpq   403918 <quotearg_buffer_restyled+0x338>
  4044cd:	45 31 c9             	xor    %r9d,%r9d
  4044d0:	e9 4b fe ff ff       	jmpq   404320 <quotearg_buffer_restyled+0xd40>
  size_t orig_buffersize = 0;
  4044d5:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  4044dc:	00 00 
  bool pending_shell_escape_end = false;
  4044de:	45 31 ed             	xor    %r13d,%r13d
  bool all_c_and_shell_quote_compat = true;
  4044e1:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  bool encountered_single_quote = false;
  4044e6:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  4044ed:	00 
  4044ee:	e9 7d f5 ff ff       	jmpq   403a70 <quotearg_buffer_restyled+0x490>
              START_ESC ();
  4044f3:	44 89 e8             	mov    %r13d,%eax
              c = '0';
  4044f6:	bd 30 00 00 00       	mov    $0x30,%ebp
      bool c_and_shell_quote_compat = false;
  4044fb:	45 31 ed             	xor    %r13d,%r13d
  4044fe:	e9 ab f3 ff ff       	jmpq   4038ae <quotearg_buffer_restyled+0x2ce>
                  STORE ('0');
  404503:	4d 39 e6             	cmp    %r12,%r14
  404506:	76 05                	jbe    40450d <quotearg_buffer_restyled+0xf2d>
  404508:	43 c6 04 27 30       	movb   $0x30,(%r15,%r12,1)
  40450d:	48 8d 41 02          	lea    0x2(%rcx),%rax
                  STORE ('0');
  404511:	49 39 c6             	cmp    %rax,%r14
  404514:	76 06                	jbe    40451c <quotearg_buffer_restyled+0xf3c>
  404516:	41 c6 44 0f 02 30    	movb   $0x30,0x2(%r15,%rcx,1)
  40451c:	4c 8d 61 03          	lea    0x3(%rcx),%r12
              c = '0';
  404520:	bd 30 00 00 00       	mov    $0x30,%ebp
  404525:	e9 1e ff ff ff       	jmpq   404448 <quotearg_buffer_restyled+0xe68>
          is_right_quote = true;
  40452a:	44 89 c8             	mov    %r9d,%eax
  40452d:	e9 af fa ff ff       	jmpq   403fe1 <quotearg_buffer_restyled+0xa01>
      c = arg[i];
  404532:	44 89 c8             	mov    %r9d,%eax
  404535:	e9 bf fa ff ff       	jmpq   403ff9 <quotearg_buffer_restyled+0xa19>
          for (quote_string = left_quote; *quote_string; quote_string++)
  40453a:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  40453f:	0f b6 02             	movzbl (%rdx),%eax
  404542:	84 c0                	test   %al,%al
  404544:	0f 84 cd f1 ff ff    	je     403717 <quotearg_buffer_restyled+0x137>
  40454a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            STORE (*quote_string);
  404550:	4d 39 e6             	cmp    %r12,%r14
  404553:	76 04                	jbe    404559 <quotearg_buffer_restyled+0xf79>
  404555:	43 88 04 27          	mov    %al,(%r15,%r12,1)
  404559:	49 83 c4 01          	add    $0x1,%r12
          for (quote_string = left_quote; *quote_string; quote_string++)
  40455d:	42 0f b6 04 22       	movzbl (%rdx,%r12,1),%eax
  404562:	84 c0                	test   %al,%al
  404564:	75 ea                	jne    404550 <quotearg_buffer_restyled+0xf70>
  404566:	e9 ac f1 ff ff       	jmpq   403717 <quotearg_buffer_restyled+0x137>
  40456b:	48 89 ef             	mov    %rbp,%rdi
  40456e:	49 89 db             	mov    %rbx,%r11
  404571:	0f b6 54 24 10       	movzbl 0x10(%rsp),%edx
  404576:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
  40457b:	44 0f b6 84 24 85 00 	movzbl 0x85(%rsp),%r8d
  404582:	00 00 
  404584:	0f b6 ac 24 86 00 00 	movzbl 0x86(%rsp),%ebp
  40458b:	00 
                        printable = false;
  40458c:	45 31 ed             	xor    %r13d,%r13d
  40458f:	4c 8b a4 24 88 00 00 	mov    0x88(%rsp),%r12
  404596:	00 
  404597:	44 8b 94 24 80 00 00 	mov    0x80(%rsp),%r10d
  40459e:	00 
  40459f:	44 0f b6 8c 24 87 00 	movzbl 0x87(%rsp),%r9d
  4045a6:	00 00 
  4045a8:	e9 ab fc ff ff       	jmpq   404258 <quotearg_buffer_restyled+0xc78>
                switch (arg[i + 2])
  4045ad:	0f b6 2c 07          	movzbl (%rdi,%rax,1),%ebp
  4045b1:	8d 55 df             	lea    -0x21(%rbp),%edx
  4045b4:	80 fa 1d             	cmp    $0x1d,%dl
  4045b7:	0f 87 33 f7 ff ff    	ja     403cf0 <quotearg_buffer_restyled+0x710>
  4045bd:	48 8d 3d 1c 4d 00 00 	lea    0x4d1c(%rip),%rdi        # 4092e0 <terminator+0x6e7>
  4045c4:	0f b6 d2             	movzbl %dl,%edx
  4045c7:	48 63 14 97          	movslq (%rdi,%rdx,4),%rdx
  4045cb:	48 01 fa             	add    %rdi,%rdx
  4045ce:	ff e2                	jmpq   *%rdx
                    if (elide_outer_quotes)
  4045d0:	80 7c 24 63 00       	cmpb   $0x0,0x63(%rsp)
  4045d5:	0f 85 73 f6 ff ff    	jne    403c4e <quotearg_buffer_restyled+0x66e>
                    STORE ('?');
  4045db:	4d 39 e6             	cmp    %r12,%r14
  4045de:	76 05                	jbe    4045e5 <quotearg_buffer_restyled+0x1005>
  4045e0:	43 c6 04 27 3f       	movb   $0x3f,(%r15,%r12,1)
  4045e5:	49 8d 54 24 01       	lea    0x1(%r12),%rdx
                    STORE ('"');
  4045ea:	49 39 d6             	cmp    %rdx,%r14
  4045ed:	76 06                	jbe    4045f5 <quotearg_buffer_restyled+0x1015>
  4045ef:	43 c6 44 27 01 22    	movb   $0x22,0x1(%r15,%r12,1)
  4045f5:	49 8d 54 24 02       	lea    0x2(%r12),%rdx
                    STORE ('"');
  4045fa:	49 39 d6             	cmp    %rdx,%r14
  4045fd:	76 06                	jbe    404605 <quotearg_buffer_restyled+0x1025>
  4045ff:	43 c6 44 27 02 22    	movb   $0x22,0x2(%r15,%r12,1)
  404605:	49 8d 54 24 03       	lea    0x3(%r12),%rdx
                    STORE ('?');
  40460a:	49 39 d6             	cmp    %rdx,%r14
  40460d:	76 06                	jbe    404615 <quotearg_buffer_restyled+0x1035>
  40460f:	43 c6 44 27 03 3f    	movb   $0x3f,0x3(%r15,%r12,1)
  404615:	49 83 c4 04          	add    $0x4,%r12
                    break;
  404619:	31 d2                	xor    %edx,%edx
      bool escaping = false;
  40461b:	45 31 ed             	xor    %r13d,%r13d
                    break;
  40461e:	48 89 c3             	mov    %rax,%rbx
  404621:	e9 22 fe ff ff       	jmpq   404448 <quotearg_buffer_restyled+0xe68>
  404626:	48 89 ef             	mov    %rbp,%rdi
  404629:	49 89 db             	mov    %rbx,%r11
  40462c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  404631:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
  404636:	44 0f b6 84 24 85 00 	movzbl 0x85(%rsp),%r8d
  40463d:	00 00 
  40463f:	4c 89 e8             	mov    %r13,%rax
  404642:	48 89 fa             	mov    %rdi,%rdx
  404645:	0f b6 ac 24 86 00 00 	movzbl 0x86(%rsp),%ebp
  40464c:	00 
  40464d:	4c 8b a4 24 88 00 00 	mov    0x88(%rsp),%r12
  404654:	00 
  404655:	44 8b 94 24 80 00 00 	mov    0x80(%rsp),%r10d
  40465c:	00 
                        while (i + m < argsize && arg[i + m])
  40465d:	44 0f b6 8c 24 87 00 	movzbl 0x87(%rsp),%r9d
  404664:	00 00 
  404666:	4d 39 dd             	cmp    %r11,%r13
  404669:	72 12                	jb     40467d <quotearg_buffer_restyled+0x109d>
  40466b:	eb 19                	jmp    404686 <quotearg_buffer_restyled+0x10a6>
  40466d:	0f 1f 00             	nopl   (%rax)
                          m++;
  404670:	48 83 c2 01          	add    $0x1,%rdx
                        while (i + m < argsize && arg[i + m])
  404674:	48 8d 04 13          	lea    (%rbx,%rdx,1),%rax
  404678:	49 39 c3             	cmp    %rax,%r11
  40467b:	76 06                	jbe    404683 <quotearg_buffer_restyled+0x10a3>
  40467d:	80 3c 01 00          	cmpb   $0x0,(%rcx,%rax,1)
  404681:	75 ed                	jne    404670 <quotearg_buffer_restyled+0x1090>
  404683:	48 89 d7             	mov    %rdx,%rdi
  404686:	0f b6 54 24 10       	movzbl 0x10(%rsp),%edx
                        printable = false;
  40468b:	45 31 ed             	xor    %r13d,%r13d
  40468e:	e9 c5 fb ff ff       	jmpq   404258 <quotearg_buffer_restyled+0xc78>
      quote_string = "\"";
  404693:	48 8d 05 be 45 00 00 	lea    0x45be(%rip),%rax        # 408c58 <terminator+0x5f>
  bool pending_shell_escape_end = false;
  40469a:	45 31 ed             	xor    %r13d,%r13d
  40469d:	45 31 e4             	xor    %r12d,%r12d
  bool all_c_and_shell_quote_compat = true;
  4046a0:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  bool encountered_single_quote = false;
  4046a5:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  4046ac:	00 
  size_t orig_buffersize = 0;
  4046ad:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  4046b4:	00 00 
  4046b6:	c6 44 24 63 01       	movb   $0x1,0x63(%rsp)
      backslash_escapes = true;
  4046bb:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
      quote_string_len = 1;
  4046c0:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  4046c7:	00 00 
      quote_string = "\"";
  4046c9:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  4046ce:	e9 8d f0 ff ff       	jmpq   403760 <quotearg_buffer_restyled+0x180>
  if (quoting_style == shell_always_quoting_style && ! elide_outer_quotes
  4046d3:	89 c2                	mov    %eax,%edx
  if (quote_string && !elide_outer_quotes)
  4046d5:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  4046da:	48 85 c0             	test   %rax,%rax
  4046dd:	74 24                	je     404703 <quotearg_buffer_restyled+0x1123>
  4046df:	84 d2                	test   %dl,%dl
  4046e1:	74 20                	je     404703 <quotearg_buffer_restyled+0x1123>
    for (; *quote_string; quote_string++)
  4046e3:	0f b6 10             	movzbl (%rax),%edx
  4046e6:	84 d2                	test   %dl,%dl
  4046e8:	74 19                	je     404703 <quotearg_buffer_restyled+0x1123>
  4046ea:	4c 29 e0             	sub    %r12,%rax
      STORE (*quote_string);
  4046ed:	4d 39 e6             	cmp    %r12,%r14
  4046f0:	76 04                	jbe    4046f6 <quotearg_buffer_restyled+0x1116>
  4046f2:	43 88 14 27          	mov    %dl,(%r15,%r12,1)
  4046f6:	49 83 c4 01          	add    $0x1,%r12
    for (; *quote_string; quote_string++)
  4046fa:	42 0f b6 14 20       	movzbl (%rax,%r12,1),%edx
  4046ff:	84 d2                	test   %dl,%dl
  404701:	75 ea                	jne    4046ed <quotearg_buffer_restyled+0x110d>
  if (len < buffersize)
  404703:	4d 39 e6             	cmp    %r12,%r14
  404706:	0f 86 7c f5 ff ff    	jbe    403c88 <quotearg_buffer_restyled+0x6a8>
    buffer[len] = '\0';
  40470c:	43 c6 04 27 00       	movb   $0x0,(%r15,%r12,1)
  404711:	e9 72 f5 ff ff       	jmpq   403c88 <quotearg_buffer_restyled+0x6a8>
  404716:	44 89 d6             	mov    %r10d,%esi
  404719:	4c 89 5c 24 10       	mov    %r11,0x10(%rsp)
  40471e:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
  404723:	e8 d8 ed ff ff       	callq  403500 <gettext_quote.part.0>
  404728:	4c 8b 5c 24 10       	mov    0x10(%rsp),%r11
  40472d:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
  404732:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  404737:	e9 d0 ef ff ff       	jmpq   40370c <quotearg_buffer_restyled+0x12c>
  40473c:	44 89 d6             	mov    %r10d,%esi
  40473f:	4c 89 5c 24 10       	mov    %r11,0x10(%rsp)
  404744:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
  404749:	e8 b2 ed ff ff       	callq  403500 <gettext_quote.part.0>
  40474e:	4c 8b 5c 24 10       	mov    0x10(%rsp),%r11
  404753:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
  404758:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40475d:	e9 6b ef ff ff       	jmpq   4036cd <quotearg_buffer_restyled+0xed>
  404762:	41 83 fa 02          	cmp    $0x2,%r10d
  404766:	0f 94 44 24 10       	sete   0x10(%rsp)
  40476b:	e9 d0 f4 ff ff       	jmpq   403c40 <quotearg_buffer_restyled+0x660>
  if (quoting_style == shell_always_quoting_style && ! elide_outer_quotes
  404770:	0f b6 94 24 84 00 00 	movzbl 0x84(%rsp),%edx
  404777:	00 
  404778:	e9 58 ff ff ff       	jmpq   4046d5 <quotearg_buffer_restyled+0x10f5>
        return quotearg_buffer_restyled (buffer, orig_buffersize, arg, argsize,
  40477d:	48 83 ec 08          	sub    $0x8,%rsp
  404781:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  404787:	4c 89 d9             	mov    %r11,%rcx
  40478a:	4c 89 ff             	mov    %r15,%rdi
  40478d:	ff 74 24 78          	pushq  0x78(%rsp)
  404791:	ff b4 24 88 00 00 00 	pushq  0x88(%rsp)
  404798:	ff 74 24 40          	pushq  0x40(%rsp)
  40479c:	44 8b 8c 24 84 00 00 	mov    0x84(%rsp),%r9d
  4047a3:	00 
  4047a4:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  4047a9:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  4047ae:	e8 2d ee ff ff       	callq  4035e0 <quotearg_buffer_restyled>
  4047b3:	48 83 c4 20          	add    $0x20,%rsp
  4047b7:	49 89 c4             	mov    %rax,%r12
  4047ba:	e9 c9 f4 ff ff       	jmpq   403c88 <quotearg_buffer_restyled+0x6a8>
  4047bf:	4c 89 f2             	mov    %r14,%rdx
  4047c2:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
  4047c7:	e9 d6 f8 ff ff       	jmpq   4040a2 <quotearg_buffer_restyled+0xac2>
}
  4047cc:	e8 6f cc ff ff       	callq  401440 <__stack_chk_fail@plt>
  4047d1:	4c 89 74 24 58       	mov    %r14,0x58(%rsp)
  4047d6:	31 d2                	xor    %edx,%edx
  4047d8:	45 31 ed             	xor    %r13d,%r13d
  4047db:	31 c0                	xor    %eax,%eax
  4047dd:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  4047e2:	e9 7f f8 ff ff       	jmpq   404066 <quotearg_buffer_restyled+0xa86>
  4047e7:	89 d5                	mov    %edx,%ebp
  4047e9:	e9 a2 f5 ff ff       	jmpq   403d90 <quotearg_buffer_restyled+0x7b0>
      quote_string = "'";
  4047ee:	48 8d 05 d4 3c 00 00 	lea    0x3cd4(%rip),%rax        # 4084c9 <_IO_stdin_used+0x169>
  4047f5:	45 31 ed             	xor    %r13d,%r13d
  4047f8:	45 31 e4             	xor    %r12d,%r12d
  4047fb:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  404800:	c6 84 24 84 00 00 00 	movb   $0x0,0x84(%rsp)
  404807:	00 
  404808:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  40480f:	00 00 
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
  404811:	c6 44 24 63 01       	movb   $0x1,0x63(%rsp)
  404816:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
      quote_string_len = 1;
  40481b:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  404822:	00 00 
      quote_string = "'";
  404824:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  404829:	e9 32 ef ff ff       	jmpq   403760 <quotearg_buffer_restyled+0x180>
  40482e:	66 90                	xchg   %ax,%ax

0000000000404830 <quotearg_n_options>:
{
  404830:	41 57                	push   %r15
  404832:	41 56                	push   %r14
  404834:	41 55                	push   %r13
  404836:	49 89 d5             	mov    %rdx,%r13
  404839:	41 54                	push   %r12
  40483b:	49 89 f4             	mov    %rsi,%r12
  40483e:	55                   	push   %rbp
  40483f:	48 89 cd             	mov    %rcx,%rbp
  404842:	53                   	push   %rbx
  404843:	48 63 df             	movslq %edi,%rbx
  404846:	48 83 ec 38          	sub    $0x38,%rsp
  40484a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  404851:	00 00 
  404853:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  404858:	31 c0                	xor    %eax,%eax
  int e = errno;
  40485a:	e8 11 cb ff ff       	callq  401370 <__errno_location@plt>
  struct slotvec *sv = slotvec;
  40485f:	4c 8b 3d da 79 20 00 	mov    0x2079da(%rip),%r15        # 60c240 <slotvec>
  int e = errno;
  404866:	48 89 04 24          	mov    %rax,(%rsp)
  40486a:	8b 00                	mov    (%rax),%eax
  40486c:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  if (! (0 <= n && n < nslots_max))
  404870:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
  404876:	0f 87 49 ce ff ff    	ja     4016c5 <quotearg_n_options.cold>

  if (nslots <= n)
  40487c:	8b 05 b6 79 20 00    	mov    0x2079b6(%rip),%eax        # 60c238 <nslots>
  404882:	39 d8                	cmp    %ebx,%eax
  404884:	7f 70                	jg     4048f6 <quotearg_n_options+0xc6>
    {
      bool preallocated = (sv == &slotvec0);
      idx_t new_nslots = nslots;
  404886:	48 63 d0             	movslq %eax,%rdx
  404889:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)

      slotvec = sv = xpalloc (preallocated ? NULL : sv, &new_nslots,
                              n - nslots + 1, nslots_max, sizeof *sv);
  40488e:	89 da                	mov    %ebx,%edx
  404890:	29 c2                	sub    %eax,%edx
      slotvec = sv = xpalloc (preallocated ? NULL : sv, &new_nslots,
  404892:	48 8d 05 b7 79 20 00 	lea    0x2079b7(%rip),%rax        # 60c250 <slotvec0>
                              n - nslots + 1, nslots_max, sizeof *sv);
  404899:	83 c2 01             	add    $0x1,%edx
      slotvec = sv = xpalloc (preallocated ? NULL : sv, &new_nslots,
  40489c:	48 63 d2             	movslq %edx,%rdx
  40489f:	49 39 c7             	cmp    %rax,%r15
  4048a2:	0f 84 38 01 00 00    	je     4049e0 <quotearg_n_options+0x1b0>
  4048a8:	4c 89 ff             	mov    %r15,%rdi
  4048ab:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4048b0:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  4048b6:	b9 ff ff ff 7f       	mov    $0x7fffffff,%ecx
  4048bb:	e8 a0 11 00 00       	callq  405a60 <xpalloc>
  4048c0:	48 89 05 79 79 20 00 	mov    %rax,0x207979(%rip)        # 60c240 <slotvec>
  4048c7:	49 89 c7             	mov    %rax,%r15
      if (preallocated)
        *sv = slotvec0;
      memset (sv + nslots, 0, (new_nslots - nslots) * sizeof *sv);
  4048ca:	48 63 3d 67 79 20 00 	movslq 0x207967(%rip),%rdi        # 60c238 <nslots>
  4048d1:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  4048d6:	31 f6                	xor    %esi,%esi
  4048d8:	48 29 fa             	sub    %rdi,%rdx
  4048db:	48 c1 e7 04          	shl    $0x4,%rdi
  4048df:	48 c1 e2 04          	shl    $0x4,%rdx
  4048e3:	4c 01 ff             	add    %r15,%rdi
  4048e6:	e8 c5 cb ff ff       	callq  4014b0 <memset@plt>
      nslots = new_nslots;
  4048eb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  4048f0:	89 05 42 79 20 00    	mov    %eax,0x207942(%rip)        # 60c238 <nslots>
    char *val = sv[n].val;
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
                                             options->style, flags,
                                             options->quote_these_too,
  4048f6:	48 8d 45 08          	lea    0x8(%rbp),%rax
    size_t size = sv[n].size;
  4048fa:	48 c1 e3 04          	shl    $0x4,%rbx
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
  4048fe:	48 83 ec 08          	sub    $0x8,%rsp
  404902:	44 8b 45 00          	mov    0x0(%rbp),%r8d
    size_t size = sv[n].size;
  404906:	4c 01 fb             	add    %r15,%rbx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
  404909:	44 8b 7d 04          	mov    0x4(%rbp),%r15d
                                             options->quote_these_too,
  40490d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
  404912:	4c 89 e9             	mov    %r13,%rcx
    size_t size = sv[n].size;
  404915:	48 8b 33             	mov    (%rbx),%rsi
    char *val = sv[n].val;
  404918:	4c 8b 73 08          	mov    0x8(%rbx),%r14
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
  40491c:	ff 75 30             	pushq  0x30(%rbp)
  40491f:	4c 89 e2             	mov    %r12,%rdx
  404922:	ff 75 28             	pushq  0x28(%rbp)
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
  404925:	41 83 cf 01          	or     $0x1,%r15d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
  404929:	50                   	push   %rax
  40492a:	45 89 f9             	mov    %r15d,%r9d
  40492d:	4c 89 f7             	mov    %r14,%rdi
  404930:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  404935:	e8 a6 ec ff ff       	callq  4035e0 <quotearg_buffer_restyled>
                                             options->left_quote,
                                             options->right_quote);

    if (size <= qsize)
  40493a:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  40493f:	48 83 c4 20          	add    $0x20,%rsp
  404943:	48 39 c6             	cmp    %rax,%rsi
  404946:	77 65                	ja     4049ad <quotearg_n_options+0x17d>
      {
        sv[n].size = size = qsize + 1;
  404948:	48 8d 70 01          	lea    0x1(%rax),%rsi
        if (val != slot0)
  40494c:	48 8d 05 ad 79 20 00 	lea    0x2079ad(%rip),%rax        # 60c300 <slot0>
        sv[n].size = size = qsize + 1;
  404953:	48 89 33             	mov    %rsi,(%rbx)
        if (val != slot0)
  404956:	49 39 c6             	cmp    %rax,%r14
  404959:	74 12                	je     40496d <quotearg_n_options+0x13d>
          free (val);
  40495b:	4c 89 f7             	mov    %r14,%rdi
  40495e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  404963:	e8 68 ea ff ff       	callq  4033d0 <rpl_free>
  404968:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
        sv[n].val = val = xcharalloc (size);
  40496d:	48 89 f7             	mov    %rsi,%rdi
  404970:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  404975:	e8 36 0f 00 00       	callq  4058b0 <xcharalloc>
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
  40497a:	48 83 ec 08          	sub    $0x8,%rsp
  40497e:	44 8b 45 00          	mov    0x0(%rbp),%r8d
  404982:	45 89 f9             	mov    %r15d,%r9d
        sv[n].val = val = xcharalloc (size);
  404985:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
  404989:	4c 89 e9             	mov    %r13,%rcx
  40498c:	4c 89 e2             	mov    %r12,%rdx
  40498f:	48 89 c7             	mov    %rax,%rdi
  404992:	ff 75 30             	pushq  0x30(%rbp)
        sv[n].val = val = xcharalloc (size);
  404995:	49 89 c6             	mov    %rax,%r14
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
  404998:	ff 75 28             	pushq  0x28(%rbp)
  40499b:	ff 74 24 30          	pushq  0x30(%rsp)
  40499f:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  4049a4:	e8 37 ec ff ff       	callq  4035e0 <quotearg_buffer_restyled>
  4049a9:	48 83 c4 20          	add    $0x20,%rsp
                                  flags, options->quote_these_too,
                                  options->left_quote,
                                  options->right_quote);
      }

    errno = e;
  4049ad:	48 8b 04 24          	mov    (%rsp),%rax
  4049b1:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
  4049b5:	89 08                	mov    %ecx,(%rax)
    return val;
  }
}
  4049b7:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4049bc:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4049c3:	00 00 
  4049c5:	75 4a                	jne    404a11 <quotearg_n_options+0x1e1>
  4049c7:	48 83 c4 38          	add    $0x38,%rsp
  4049cb:	4c 89 f0             	mov    %r14,%rax
  4049ce:	5b                   	pop    %rbx
  4049cf:	5d                   	pop    %rbp
  4049d0:	41 5c                	pop    %r12
  4049d2:	41 5d                	pop    %r13
  4049d4:	41 5e                	pop    %r14
  4049d6:	41 5f                	pop    %r15
  4049d8:	c3                   	retq   
  4049d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      slotvec = sv = xpalloc (preallocated ? NULL : sv, &new_nslots,
  4049e0:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4049e5:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  4049eb:	b9 ff ff ff 7f       	mov    $0x7fffffff,%ecx
  4049f0:	31 ff                	xor    %edi,%edi
  4049f2:	e8 69 10 00 00       	callq  405a60 <xpalloc>
        *sv = slotvec0;
  4049f7:	66 0f 6f 05 51 78 20 	movdqa 0x207851(%rip),%xmm0        # 60c250 <slotvec0>
  4049fe:	00 
      slotvec = sv = xpalloc (preallocated ? NULL : sv, &new_nslots,
  4049ff:	48 89 05 3a 78 20 00 	mov    %rax,0x20783a(%rip)        # 60c240 <slotvec>
  404a06:	49 89 c7             	mov    %rax,%r15
        *sv = slotvec0;
  404a09:	0f 11 00             	movups %xmm0,(%rax)
  404a0c:	e9 b9 fe ff ff       	jmpq   4048ca <quotearg_n_options+0x9a>
}
  404a11:	e8 2a ca ff ff       	callq  401440 <__stack_chk_fail@plt>
  404a16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404a1d:	00 00 00 

0000000000404a20 <clone_quoting_options>:
{
  404a20:	41 54                	push   %r12
  404a22:	55                   	push   %rbp
  404a23:	48 89 fd             	mov    %rdi,%rbp
  404a26:	53                   	push   %rbx
  int e = errno;
  404a27:	e8 44 c9 ff ff       	callq  401370 <__errno_location@plt>
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
  404a2c:	48 85 ed             	test   %rbp,%rbp
  404a2f:	be 38 00 00 00       	mov    $0x38,%esi
  int e = errno;
  404a34:	44 8b 20             	mov    (%rax),%r12d
  404a37:	48 89 c3             	mov    %rax,%rbx
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
  404a3a:	48 8d 05 bf 79 20 00 	lea    0x2079bf(%rip),%rax        # 60c400 <default_quoting_options>
  404a41:	48 0f 44 e8          	cmove  %rax,%rbp
  404a45:	48 89 ef             	mov    %rbp,%rdi
  404a48:	e8 63 11 00 00       	callq  405bb0 <xmemdup>
  errno = e;
  404a4d:	44 89 23             	mov    %r12d,(%rbx)
}
  404a50:	5b                   	pop    %rbx
  404a51:	5d                   	pop    %rbp
  404a52:	41 5c                	pop    %r12
  404a54:	c3                   	retq   
  404a55:	90                   	nop
  404a56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404a5d:	00 00 00 

0000000000404a60 <get_quoting_style>:
  return (o ? o : &default_quoting_options)->style;
  404a60:	48 85 ff             	test   %rdi,%rdi
  404a63:	48 8d 05 96 79 20 00 	lea    0x207996(%rip),%rax        # 60c400 <default_quoting_options>
  404a6a:	48 0f 44 f8          	cmove  %rax,%rdi
  404a6e:	8b 07                	mov    (%rdi),%eax
}
  404a70:	c3                   	retq   
  404a71:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  404a76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404a7d:	00 00 00 

0000000000404a80 <set_quoting_style>:
  (o ? o : &default_quoting_options)->style = s;
  404a80:	48 85 ff             	test   %rdi,%rdi
  404a83:	48 8d 05 76 79 20 00 	lea    0x207976(%rip),%rax        # 60c400 <default_quoting_options>
  404a8a:	48 0f 44 f8          	cmove  %rax,%rdi
  404a8e:	89 37                	mov    %esi,(%rdi)
}
  404a90:	c3                   	retq   
  404a91:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  404a96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404a9d:	00 00 00 

0000000000404aa0 <set_char_quoting>:
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  404aa0:	48 85 ff             	test   %rdi,%rdi
  404aa3:	48 8d 05 56 79 20 00 	lea    0x207956(%rip),%rax        # 60c400 <default_quoting_options>
{
  404aaa:	89 f1                	mov    %esi,%ecx
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  404aac:	48 0f 44 f8          	cmove  %rax,%rdi
  404ab0:	89 f0                	mov    %esi,%eax
  int shift = uc % INT_BITS;
  404ab2:	83 e1 1f             	and    $0x1f,%ecx
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  404ab5:	c0 e8 05             	shr    $0x5,%al
  404ab8:	0f b6 c0             	movzbl %al,%eax
  unsigned int *p =
  404abb:	48 8d 74 87 08       	lea    0x8(%rdi,%rax,4),%rsi
  int r = (*p >> shift) & 1;
  404ac0:	8b 3e                	mov    (%rsi),%edi
  404ac2:	89 f8                	mov    %edi,%eax
  404ac4:	d3 e8                	shr    %cl,%eax
  *p ^= ((i & 1) ^ r) << shift;
  404ac6:	31 c2                	xor    %eax,%edx
  int r = (*p >> shift) & 1;
  404ac8:	83 e0 01             	and    $0x1,%eax
  *p ^= ((i & 1) ^ r) << shift;
  404acb:	83 e2 01             	and    $0x1,%edx
  404ace:	d3 e2                	shl    %cl,%edx
  404ad0:	31 fa                	xor    %edi,%edx
  404ad2:	89 16                	mov    %edx,(%rsi)
}
  404ad4:	c3                   	retq   
  404ad5:	90                   	nop
  404ad6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404add:	00 00 00 

0000000000404ae0 <set_quoting_flags>:
    o = &default_quoting_options;
  404ae0:	48 85 ff             	test   %rdi,%rdi
  404ae3:	48 8d 05 16 79 20 00 	lea    0x207916(%rip),%rax        # 60c400 <default_quoting_options>
  404aea:	48 0f 44 f8          	cmove  %rax,%rdi
  r = o->flags;
  404aee:	8b 47 04             	mov    0x4(%rdi),%eax
  o->flags = i;
  404af1:	89 77 04             	mov    %esi,0x4(%rdi)
}
  404af4:	c3                   	retq   
  404af5:	90                   	nop
  404af6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404afd:	00 00 00 

0000000000404b00 <set_custom_quoting>:
{
  404b00:	48 83 ec 08          	sub    $0x8,%rsp
    o = &default_quoting_options;
  404b04:	48 8d 05 f5 78 20 00 	lea    0x2078f5(%rip),%rax        # 60c400 <default_quoting_options>
  404b0b:	48 85 ff             	test   %rdi,%rdi
  404b0e:	48 0f 44 f8          	cmove  %rax,%rdi
  o->style = custom_quoting_style;
  404b12:	c7 07 0a 00 00 00    	movl   $0xa,(%rdi)
  if (!left_quote || !right_quote)
  404b18:	48 85 f6             	test   %rsi,%rsi
  404b1b:	0f 84 a9 cb ff ff    	je     4016ca <set_custom_quoting.cold>
  404b21:	48 85 d2             	test   %rdx,%rdx
  404b24:	0f 84 a0 cb ff ff    	je     4016ca <set_custom_quoting.cold>
  o->left_quote = left_quote;
  404b2a:	48 89 77 28          	mov    %rsi,0x28(%rdi)
  o->right_quote = right_quote;
  404b2e:	48 89 57 30          	mov    %rdx,0x30(%rdi)
}
  404b32:	48 83 c4 08          	add    $0x8,%rsp
  404b36:	c3                   	retq   
  404b37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  404b3e:	00 00 

0000000000404b40 <quotearg_buffer>:
{
  404b40:	41 57                	push   %r15
  struct quoting_options const *p = o ? o : &default_quoting_options;
  404b42:	48 8d 05 b7 78 20 00 	lea    0x2078b7(%rip),%rax        # 60c400 <default_quoting_options>
{
  404b49:	41 56                	push   %r14
  404b4b:	49 89 d6             	mov    %rdx,%r14
  404b4e:	41 55                	push   %r13
  404b50:	49 89 f5             	mov    %rsi,%r13
  404b53:	41 54                	push   %r12
  404b55:	49 89 fc             	mov    %rdi,%r12
  404b58:	55                   	push   %rbp
  404b59:	53                   	push   %rbx
  404b5a:	4c 89 c3             	mov    %r8,%rbx
  404b5d:	48 83 ec 18          	sub    $0x18,%rsp
  struct quoting_options const *p = o ? o : &default_quoting_options;
  404b61:	4d 85 c0             	test   %r8,%r8
  404b64:	48 0f 44 d8          	cmove  %rax,%rbx
{
  404b68:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  int e = errno;
  404b6d:	e8 fe c7 ff ff       	callq  401370 <__errno_location@plt>
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
  404b72:	48 83 ec 08          	sub    $0x8,%rsp
  404b76:	4c 89 f2             	mov    %r14,%rdx
  404b79:	4c 89 ee             	mov    %r13,%rsi
  int e = errno;
  404b7c:	44 8b 38             	mov    (%rax),%r15d
  404b7f:	48 89 c5             	mov    %rax,%rbp
                                       p->style, p->flags, p->quote_these_too,
  404b82:	48 8d 43 08          	lea    0x8(%rbx),%rax
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
  404b86:	44 8b 4b 04          	mov    0x4(%rbx),%r9d
  404b8a:	ff 73 30             	pushq  0x30(%rbx)
  404b8d:	44 8b 03             	mov    (%rbx),%r8d
  404b90:	4c 89 e7             	mov    %r12,%rdi
  404b93:	ff 73 28             	pushq  0x28(%rbx)
  404b96:	50                   	push   %rax
  404b97:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  404b9c:	e8 3f ea ff ff       	callq  4035e0 <quotearg_buffer_restyled>
  errno = e;
  404ba1:	44 89 7d 00          	mov    %r15d,0x0(%rbp)
}
  404ba5:	48 83 c4 38          	add    $0x38,%rsp
  404ba9:	5b                   	pop    %rbx
  404baa:	5d                   	pop    %rbp
  404bab:	41 5c                	pop    %r12
  404bad:	41 5d                	pop    %r13
  404baf:	41 5e                	pop    %r14
  404bb1:	41 5f                	pop    %r15
  404bb3:	c3                   	retq   
  404bb4:	66 90                	xchg   %ax,%ax
  404bb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404bbd:	00 00 00 

0000000000404bc0 <quotearg_alloc_mem>:
{
  404bc0:	41 57                	push   %r15
  struct quoting_options const *p = o ? o : &default_quoting_options;
  404bc2:	48 8d 05 37 78 20 00 	lea    0x207837(%rip),%rax        # 60c400 <default_quoting_options>
{
  404bc9:	41 56                	push   %r14
  404bcb:	49 89 f6             	mov    %rsi,%r14
  404bce:	41 55                	push   %r13
  404bd0:	49 89 fd             	mov    %rdi,%r13
  404bd3:	41 54                	push   %r12
  404bd5:	55                   	push   %rbp
  404bd6:	48 89 d5             	mov    %rdx,%rbp
  404bd9:	53                   	push   %rbx
  404bda:	48 89 cb             	mov    %rcx,%rbx
  404bdd:	48 83 ec 28          	sub    $0x28,%rsp
  struct quoting_options const *p = o ? o : &default_quoting_options;
  404be1:	48 85 c9             	test   %rcx,%rcx
  404be4:	48 0f 44 d8          	cmove  %rax,%rbx
  int e = errno;
  404be8:	e8 83 c7 ff ff       	callq  401370 <__errno_location@plt>
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
  404bed:	45 31 c9             	xor    %r9d,%r9d
  404bf0:	48 85 ed             	test   %rbp,%rbp
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
  404bf3:	4c 89 f1             	mov    %r14,%rcx
  int e = errno;
  404bf6:	49 89 c4             	mov    %rax,%r12
  404bf9:	8b 00                	mov    (%rax),%eax
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
  404bfb:	41 0f 94 c1          	sete   %r9b
                                             flags, p->quote_these_too,
  404bff:	4c 8d 53 08          	lea    0x8(%rbx),%r10
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
  404c03:	48 83 ec 08          	sub    $0x8,%rsp
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
  404c07:	44 0b 4b 04          	or     0x4(%rbx),%r9d
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
  404c0b:	44 8b 03             	mov    (%rbx),%r8d
  404c0e:	4c 89 ea             	mov    %r13,%rdx
  int e = errno;
  404c11:	89 44 24 18          	mov    %eax,0x18(%rsp)
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
  404c15:	31 f6                	xor    %esi,%esi
  404c17:	31 ff                	xor    %edi,%edi
  404c19:	ff 73 30             	pushq  0x30(%rbx)
  404c1c:	ff 73 28             	pushq  0x28(%rbx)
  404c1f:	41 52                	push   %r10
  404c21:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
  404c26:	44 89 4c 24 34       	mov    %r9d,0x34(%rsp)
  404c2b:	e8 b0 e9 ff ff       	callq  4035e0 <quotearg_buffer_restyled>
  char *buf = xcharalloc (bufsize);
  404c30:	48 83 c4 20          	add    $0x20,%rsp
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
  404c34:	48 8d 70 01          	lea    0x1(%rax),%rsi
  404c38:	49 89 c7             	mov    %rax,%r15
  char *buf = xcharalloc (bufsize);
  404c3b:	48 89 f7             	mov    %rsi,%rdi
  404c3e:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  404c43:	e8 68 0c 00 00       	callq  4058b0 <xcharalloc>
  quotearg_buffer_restyled (buf, bufsize, arg, argsize, p->style, flags,
  404c48:	48 83 ec 08          	sub    $0x8,%rsp
  404c4c:	ff 73 30             	pushq  0x30(%rbx)
  404c4f:	44 8b 03             	mov    (%rbx),%r8d
  404c52:	ff 73 28             	pushq  0x28(%rbx)
  404c55:	4c 89 f1             	mov    %r14,%rcx
  404c58:	4c 89 ea             	mov    %r13,%rdx
  404c5b:	48 89 c7             	mov    %rax,%rdi
  404c5e:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  404c63:	41 52                	push   %r10
  404c65:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  404c6a:	44 8b 4c 24 34       	mov    0x34(%rsp),%r9d
  404c6f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  404c74:	e8 67 e9 ff ff       	callq  4035e0 <quotearg_buffer_restyled>
  errno = e;
  404c79:	8b 44 24 30          	mov    0x30(%rsp),%eax
  if (size)
  404c7d:	48 83 c4 20          	add    $0x20,%rsp
  404c81:	48 85 ed             	test   %rbp,%rbp
  404c84:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
  errno = e;
  404c89:	41 89 04 24          	mov    %eax,(%r12)
  if (size)
  404c8d:	74 04                	je     404c93 <quotearg_alloc_mem+0xd3>
    *size = bufsize - 1;
  404c8f:	4c 89 7d 00          	mov    %r15,0x0(%rbp)
}
  404c93:	48 83 c4 28          	add    $0x28,%rsp
  404c97:	4c 89 d8             	mov    %r11,%rax
  404c9a:	5b                   	pop    %rbx
  404c9b:	5d                   	pop    %rbp
  404c9c:	41 5c                	pop    %r12
  404c9e:	41 5d                	pop    %r13
  404ca0:	41 5e                	pop    %r14
  404ca2:	41 5f                	pop    %r15
  404ca4:	c3                   	retq   
  404ca5:	90                   	nop
  404ca6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404cad:	00 00 00 

0000000000404cb0 <quotearg_alloc>:
{
  404cb0:	48 89 d1             	mov    %rdx,%rcx
  return quotearg_alloc_mem (arg, argsize, NULL, o);
  404cb3:	31 d2                	xor    %edx,%edx
  404cb5:	e9 06 ff ff ff       	jmpq   404bc0 <quotearg_alloc_mem>
  404cba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000404cc0 <quotearg_free>:
  for (i = 1; i < nslots; i++)
  404cc0:	83 3d 71 75 20 00 01 	cmpl   $0x1,0x207571(%rip)        # 60c238 <nslots>
{
  404cc7:	41 54                	push   %r12
  struct slotvec *sv = slotvec;
  404cc9:	4c 8b 25 70 75 20 00 	mov    0x207570(%rip),%r12        # 60c240 <slotvec>
{
  404cd0:	55                   	push   %rbp
  404cd1:	53                   	push   %rbx
  for (i = 1; i < nslots; i++)
  404cd2:	7e 24                	jle    404cf8 <quotearg_free+0x38>
  404cd4:	49 8d 6c 24 18       	lea    0x18(%r12),%rbp
  404cd9:	bb 01 00 00 00       	mov    $0x1,%ebx
  404cde:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
  404ce0:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  for (i = 1; i < nslots; i++)
  404ce4:	83 c3 01             	add    $0x1,%ebx
  404ce7:	48 83 c5 10          	add    $0x10,%rbp
    free (sv[i].val);
  404ceb:	e8 e0 e6 ff ff       	callq  4033d0 <rpl_free>
  for (i = 1; i < nslots; i++)
  404cf0:	39 1d 42 75 20 00    	cmp    %ebx,0x207542(%rip)        # 60c238 <nslots>
  404cf6:	7f e8                	jg     404ce0 <quotearg_free+0x20>
  if (sv[0].val != slot0)
  404cf8:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  404cfd:	48 8d 1d fc 75 20 00 	lea    0x2075fc(%rip),%rbx        # 60c300 <slot0>
  404d04:	48 39 df             	cmp    %rbx,%rdi
  404d07:	74 17                	je     404d20 <quotearg_free+0x60>
      free (sv[0].val);
  404d09:	e8 c2 e6 ff ff       	callq  4033d0 <rpl_free>
      slotvec0.val = slot0;
  404d0e:	48 89 1d 43 75 20 00 	mov    %rbx,0x207543(%rip)        # 60c258 <slotvec0+0x8>
      slotvec0.size = sizeof slot0;
  404d15:	48 c7 05 30 75 20 00 	movq   $0x100,0x207530(%rip)        # 60c250 <slotvec0>
  404d1c:	00 01 00 00 
  if (sv != &slotvec0)
  404d20:	48 8d 1d 29 75 20 00 	lea    0x207529(%rip),%rbx        # 60c250 <slotvec0>
  404d27:	49 39 dc             	cmp    %rbx,%r12
  404d2a:	74 0f                	je     404d3b <quotearg_free+0x7b>
      free (sv);
  404d2c:	4c 89 e7             	mov    %r12,%rdi
  404d2f:	e8 9c e6 ff ff       	callq  4033d0 <rpl_free>
      slotvec = &slotvec0;
  404d34:	48 89 1d 05 75 20 00 	mov    %rbx,0x207505(%rip)        # 60c240 <slotvec>
  nslots = 1;
  404d3b:	c7 05 f3 74 20 00 01 	movl   $0x1,0x2074f3(%rip)        # 60c238 <nslots>
  404d42:	00 00 00 
}
  404d45:	5b                   	pop    %rbx
  404d46:	5d                   	pop    %rbp
  404d47:	41 5c                	pop    %r12
  404d49:	c3                   	retq   
  404d4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000404d50 <quotearg_n>:

char *
quotearg_n (int n, char const *arg)
{
  return quotearg_n_options (n, arg, SIZE_MAX, &default_quoting_options);
  404d50:	48 8d 0d a9 76 20 00 	lea    0x2076a9(%rip),%rcx        # 60c400 <default_quoting_options>
  404d57:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  404d5e:	e9 cd fa ff ff       	jmpq   404830 <quotearg_n_options>
  404d63:	0f 1f 00             	nopl   (%rax)
  404d66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404d6d:	00 00 00 

0000000000404d70 <quotearg_n_mem>:
}

char *
quotearg_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &default_quoting_options);
  404d70:	48 8d 0d 89 76 20 00 	lea    0x207689(%rip),%rcx        # 60c400 <default_quoting_options>
  404d77:	e9 b4 fa ff ff       	jmpq   404830 <quotearg_n_options>
  404d7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404d80 <quotearg>:
}

char *
quotearg (char const *arg)
{
  404d80:	48 89 fe             	mov    %rdi,%rsi
  return quotearg_n_options (n, arg, SIZE_MAX, &default_quoting_options);
  404d83:	48 8d 0d 76 76 20 00 	lea    0x207676(%rip),%rcx        # 60c400 <default_quoting_options>
  404d8a:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  404d91:	31 ff                	xor    %edi,%edi
  404d93:	e9 98 fa ff ff       	jmpq   404830 <quotearg_n_options>
  404d98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  404d9f:	00 

0000000000404da0 <quotearg_mem>:
  return quotearg_n (0, arg);
}

char *
quotearg_mem (char const *arg, size_t argsize)
{
  404da0:	48 89 f2             	mov    %rsi,%rdx
  return quotearg_n_options (n, arg, argsize, &default_quoting_options);
  404da3:	48 8d 0d 56 76 20 00 	lea    0x207656(%rip),%rcx        # 60c400 <default_quoting_options>
  404daa:	48 89 fe             	mov    %rdi,%rsi
  404dad:	31 ff                	xor    %edi,%edi
  404daf:	e9 7c fa ff ff       	jmpq   404830 <quotearg_n_options>
  404db4:	66 90                	xchg   %ax,%ax
  404db6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404dbd:	00 00 00 

0000000000404dc0 <quotearg_n_style>:
  return quotearg_n_mem (0, arg, argsize);
}

char *
quotearg_n_style (int n, enum quoting_style s, char const *arg)
{
  404dc0:	48 83 ec 48          	sub    $0x48,%rsp
  404dc4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  404dcb:	00 00 
  404dcd:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  404dd2:	31 c0                	xor    %eax,%eax
  if (style == custom_quoting_style)
  404dd4:	83 fe 0a             	cmp    $0xa,%esi
  404dd7:	0f 84 f2 c8 ff ff    	je     4016cf <quotearg_n_style.cold>
  404ddd:	49 89 d0             	mov    %rdx,%r8
  return o;
  404de0:	89 34 24             	mov    %esi,(%rsp)
  struct quoting_options const o = quoting_options_from_style (s);
  return quotearg_n_options (n, arg, SIZE_MAX, &o);
  404de3:	48 89 e1             	mov    %rsp,%rcx
  404de6:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  404ded:	4c 89 c6             	mov    %r8,%rsi
  return o;
  404df0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  404df7:	00 
  404df8:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  404dff:	00 00 
  404e01:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  404e08:	00 00 
  404e0a:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  404e11:	00 00 
  404e13:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  404e1a:	00 00 
  404e1c:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  404e23:	00 00 
  404e25:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  404e2c:	00 00 
  return quotearg_n_options (n, arg, SIZE_MAX, &o);
  404e2e:	e8 fd f9 ff ff       	callq  404830 <quotearg_n_options>
}
  404e33:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  404e38:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  404e3f:	00 00 
  404e41:	75 05                	jne    404e48 <quotearg_n_style+0x88>
  404e43:	48 83 c4 48          	add    $0x48,%rsp
  404e47:	c3                   	retq   
  404e48:	e8 f3 c5 ff ff       	callq  401440 <__stack_chk_fail@plt>
  404e4d:	0f 1f 00             	nopl   (%rax)

0000000000404e50 <quotearg_n_style_mem>:

char *
quotearg_n_style_mem (int n, enum quoting_style s,
                      char const *arg, size_t argsize)
{
  404e50:	48 83 ec 48          	sub    $0x48,%rsp
  404e54:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  404e5b:	00 00 
  404e5d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  404e62:	31 c0                	xor    %eax,%eax
  if (style == custom_quoting_style)
  404e64:	83 fe 0a             	cmp    $0xa,%esi
  404e67:	0f 84 67 c8 ff ff    	je     4016d4 <quotearg_n_style_mem.cold>
  404e6d:	49 89 d0             	mov    %rdx,%r8
  return o;
  404e70:	89 34 24             	mov    %esi,(%rsp)
  404e73:	48 89 ca             	mov    %rcx,%rdx
  struct quoting_options const o = quoting_options_from_style (s);
  return quotearg_n_options (n, arg, argsize, &o);
  404e76:	48 89 e1             	mov    %rsp,%rcx
  404e79:	4c 89 c6             	mov    %r8,%rsi
  return o;
  404e7c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  404e83:	00 
  404e84:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  404e8b:	00 00 
  404e8d:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  404e94:	00 00 
  404e96:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  404e9d:	00 00 
  404e9f:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  404ea6:	00 00 
  404ea8:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  404eaf:	00 00 
  404eb1:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  404eb8:	00 00 
  return quotearg_n_options (n, arg, argsize, &o);
  404eba:	e8 71 f9 ff ff       	callq  404830 <quotearg_n_options>
}
  404ebf:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  404ec4:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  404ecb:	00 00 
  404ecd:	75 05                	jne    404ed4 <quotearg_n_style_mem+0x84>
  404ecf:	48 83 c4 48          	add    $0x48,%rsp
  404ed3:	c3                   	retq   
  404ed4:	e8 67 c5 ff ff       	callq  401440 <__stack_chk_fail@plt>
  404ed9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000404ee0 <quotearg_style>:

char *
quotearg_style (enum quoting_style s, char const *arg)
{
  404ee0:	48 89 f2             	mov    %rsi,%rdx
  return quotearg_n_style (0, s, arg);
  404ee3:	89 fe                	mov    %edi,%esi
  404ee5:	31 ff                	xor    %edi,%edi
  404ee7:	e9 d4 fe ff ff       	jmpq   404dc0 <quotearg_n_style>
  404eec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000404ef0 <quotearg_style_mem>:
}

char *
quotearg_style_mem (enum quoting_style s, char const *arg, size_t argsize)
{
  404ef0:	48 89 d1             	mov    %rdx,%rcx
  return quotearg_n_style_mem (0, s, arg, argsize);
  404ef3:	48 89 f2             	mov    %rsi,%rdx
  404ef6:	89 fe                	mov    %edi,%esi
  404ef8:	31 ff                	xor    %edi,%edi
  404efa:	e9 51 ff ff ff       	jmpq   404e50 <quotearg_n_style_mem>
  404eff:	90                   	nop

0000000000404f00 <quotearg_char_mem>:
}

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
  404f00:	48 83 ec 48          	sub    $0x48,%rsp
  struct quoting_options options;
  options = default_quoting_options;
  404f04:	66 0f 6f 05 f4 74 20 	movdqa 0x2074f4(%rip),%xmm0        # 60c400 <default_quoting_options>
  404f0b:	00 
  404f0c:	66 0f 6f 0d fc 74 20 	movdqa 0x2074fc(%rip),%xmm1        # 60c410 <default_quoting_options+0x10>
  404f13:	00 
{
  404f14:	89 d1                	mov    %edx,%ecx
  404f16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  404f1d:	00 00 
  404f1f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  404f24:	31 c0                	xor    %eax,%eax
  options = default_quoting_options;
  404f26:	48 8b 05 03 75 20 00 	mov    0x207503(%rip),%rax        # 60c430 <default_quoting_options+0x30>
{
  404f2d:	49 89 f1             	mov    %rsi,%r9
  int shift = uc % INT_BITS;
  404f30:	83 e1 1f             	and    $0x1f,%ecx
  options = default_quoting_options;
  404f33:	66 0f 6f 15 e5 74 20 	movdqa 0x2074e5(%rip),%xmm2        # 60c420 <default_quoting_options+0x20>
  404f3a:	00 
  404f3b:	0f 29 04 24          	movaps %xmm0,(%rsp)
  unsigned int *p =
  404f3f:	49 89 e2             	mov    %rsp,%r10
  options = default_quoting_options;
  404f42:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  404f47:	89 d0                	mov    %edx,%eax
  404f49:	c0 e8 05             	shr    $0x5,%al
  options = default_quoting_options;
  404f4c:	0f 29 4c 24 10       	movaps %xmm1,0x10(%rsp)
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  404f51:	0f b6 c0             	movzbl %al,%eax
  options = default_quoting_options;
  404f54:	0f 29 54 24 20       	movaps %xmm2,0x20(%rsp)
  unsigned int *p =
  404f59:	48 8d 54 84 08       	lea    0x8(%rsp,%rax,4),%rdx
  int r = (*p >> shift) & 1;
  404f5e:	8b 32                	mov    (%rdx),%esi
  404f60:	89 f0                	mov    %esi,%eax
  404f62:	d3 e8                	shr    %cl,%eax
  *p ^= ((i & 1) ^ r) << shift;
  404f64:	f7 d0                	not    %eax
  404f66:	83 e0 01             	and    $0x1,%eax
  404f69:	d3 e0                	shl    %cl,%eax
  set_char_quoting (&options, ch, 1);
  return quotearg_n_options (0, arg, argsize, &options);
  404f6b:	4c 89 d1             	mov    %r10,%rcx
  *p ^= ((i & 1) ^ r) << shift;
  404f6e:	31 f0                	xor    %esi,%eax
  return quotearg_n_options (0, arg, argsize, &options);
  404f70:	48 89 fe             	mov    %rdi,%rsi
  404f73:	31 ff                	xor    %edi,%edi
  *p ^= ((i & 1) ^ r) << shift;
  404f75:	89 02                	mov    %eax,(%rdx)
  return quotearg_n_options (0, arg, argsize, &options);
  404f77:	4c 89 ca             	mov    %r9,%rdx
  404f7a:	e8 b1 f8 ff ff       	callq  404830 <quotearg_n_options>
}
  404f7f:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  404f84:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
  404f8b:	00 00 
  404f8d:	75 05                	jne    404f94 <quotearg_char_mem+0x94>
  404f8f:	48 83 c4 48          	add    $0x48,%rsp
  404f93:	c3                   	retq   
  404f94:	e8 a7 c4 ff ff       	callq  401440 <__stack_chk_fail@plt>
  404f99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000404fa0 <quotearg_char>:

char *
quotearg_char (char const *arg, char ch)
{
  return quotearg_char_mem (arg, SIZE_MAX, ch);
  404fa0:	40 0f be d6          	movsbl %sil,%edx
  404fa4:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  404fab:	e9 50 ff ff ff       	jmpq   404f00 <quotearg_char_mem>

0000000000404fb0 <quotearg_colon>:
  404fb0:	ba 3a 00 00 00       	mov    $0x3a,%edx
  404fb5:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  404fbc:	e9 3f ff ff ff       	jmpq   404f00 <quotearg_char_mem>
  404fc1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  404fc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  404fcd:	00 00 00 

0000000000404fd0 <quotearg_colon_mem>:
}

char *
quotearg_colon_mem (char const *arg, size_t argsize)
{
  return quotearg_char_mem (arg, argsize, ':');
  404fd0:	ba 3a 00 00 00       	mov    $0x3a,%edx
  404fd5:	e9 26 ff ff ff       	jmpq   404f00 <quotearg_char_mem>
  404fda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000404fe0 <quotearg_n_style_colon>:
}

char *
quotearg_n_style_colon (int n, enum quoting_style s, char const *arg)
{
  404fe0:	48 83 ec 48          	sub    $0x48,%rsp
  404fe4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  404feb:	00 00 
  404fed:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  404ff2:	31 c0                	xor    %eax,%eax
  if (style == custom_quoting_style)
  404ff4:	83 fe 0a             	cmp    $0xa,%esi
  404ff7:	0f 84 dc c6 ff ff    	je     4016d9 <quotearg_n_style_colon.cold>
  404ffd:	49 89 d0             	mov    %rdx,%r8
  struct quoting_options options;
  options = quoting_options_from_style (s);
  405000:	89 34 24             	mov    %esi,(%rsp)
  set_char_quoting (&options, ':', 1);
  return quotearg_n_options (n, arg, SIZE_MAX, &options);
  405003:	48 89 e1             	mov    %rsp,%rcx
  405006:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  options = quoting_options_from_style (s);
  40500d:	48 b8 00 00 00 00 00 	movabs $0x400000000000000,%rax
  405014:	00 00 04 
  return quotearg_n_options (n, arg, SIZE_MAX, &options);
  405017:	4c 89 c6             	mov    %r8,%rsi
  options = quoting_options_from_style (s);
  40501a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  405021:	00 
  405022:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  405027:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  40502e:	00 00 
  405030:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  405037:	00 00 
  405039:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  405040:	00 00 
  405042:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  405049:	00 00 
  40504b:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  405052:	00 00 
  return quotearg_n_options (n, arg, SIZE_MAX, &options);
  405054:	e8 d7 f7 ff ff       	callq  404830 <quotearg_n_options>
}
  405059:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  40505e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  405065:	00 00 
  405067:	75 05                	jne    40506e <quotearg_n_style_colon+0x8e>
  405069:	48 83 c4 48          	add    $0x48,%rsp
  40506d:	c3                   	retq   
  40506e:	e8 cd c3 ff ff       	callq  401440 <__stack_chk_fail@plt>
  405073:	0f 1f 00             	nopl   (%rax)
  405076:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40507d:	00 00 00 

0000000000405080 <quotearg_n_custom_mem>:

char *
quotearg_n_custom_mem (int n, char const *left_quote,
                       char const *right_quote,
                       char const *arg, size_t argsize)
{
  405080:	48 83 ec 48          	sub    $0x48,%rsp
  struct quoting_options o = default_quoting_options;
  405084:	66 0f 6f 05 74 73 20 	movdqa 0x207374(%rip),%xmm0        # 60c400 <default_quoting_options>
  40508b:	00 
  40508c:	66 0f 6f 0d 7c 73 20 	movdqa 0x20737c(%rip),%xmm1        # 60c410 <default_quoting_options+0x10>
  405093:	00 
{
  405094:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40509b:	00 00 
  40509d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  4050a2:	31 c0                	xor    %eax,%eax
  struct quoting_options o = default_quoting_options;
  4050a4:	66 0f 6f 15 74 73 20 	movdqa 0x207374(%rip),%xmm2        # 60c420 <default_quoting_options+0x20>
  4050ab:	00 
  4050ac:	48 8b 05 7d 73 20 00 	mov    0x20737d(%rip),%rax        # 60c430 <default_quoting_options+0x30>
  4050b3:	0f 29 04 24          	movaps %xmm0,(%rsp)
  4050b7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  o->style = custom_quoting_style;
  4050bc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%rsp)
  struct quoting_options o = default_quoting_options;
  4050c3:	0f 29 4c 24 10       	movaps %xmm1,0x10(%rsp)
  4050c8:	0f 29 54 24 20       	movaps %xmm2,0x20(%rsp)
  if (!left_quote || !right_quote)
  4050cd:	48 85 f6             	test   %rsi,%rsi
  4050d0:	0f 84 08 c6 ff ff    	je     4016de <quotearg_n_custom_mem.cold>
  4050d6:	48 85 d2             	test   %rdx,%rdx
  4050d9:	0f 84 ff c5 ff ff    	je     4016de <quotearg_n_custom_mem.cold>
  4050df:	49 89 c9             	mov    %rcx,%r9
  o->left_quote = left_quote;
  4050e2:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  set_custom_quoting (&o, left_quote, right_quote);
  return quotearg_n_options (n, arg, argsize, &o);
  4050e7:	48 89 e1             	mov    %rsp,%rcx
  o->right_quote = right_quote;
  4050ea:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  return quotearg_n_options (n, arg, argsize, &o);
  4050ef:	4c 89 ce             	mov    %r9,%rsi
  4050f2:	4c 89 c2             	mov    %r8,%rdx
  4050f5:	e8 36 f7 ff ff       	callq  404830 <quotearg_n_options>
}
  4050fa:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  4050ff:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  405106:	00 00 
  405108:	75 05                	jne    40510f <quotearg_n_custom_mem+0x8f>
  40510a:	48 83 c4 48          	add    $0x48,%rsp
  40510e:	c3                   	retq   
  40510f:	e8 2c c3 ff ff       	callq  401440 <__stack_chk_fail@plt>
  405114:	66 90                	xchg   %ax,%ax
  405116:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40511d:	00 00 00 

0000000000405120 <quotearg_n_custom>:
  return quotearg_n_custom_mem (n, left_quote, right_quote, arg,
  405120:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
  405127:	e9 54 ff ff ff       	jmpq   405080 <quotearg_n_custom_mem>
  40512c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000405130 <quotearg_custom>:

char *
quotearg_custom (char const *left_quote, char const *right_quote,
                 char const *arg)
{
  405130:	48 89 d1             	mov    %rdx,%rcx
  return quotearg_n_custom_mem (n, left_quote, right_quote, arg,
  405133:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
  40513a:	48 89 f2             	mov    %rsi,%rdx
  40513d:	48 89 fe             	mov    %rdi,%rsi
  405140:	31 ff                	xor    %edi,%edi
  405142:	e9 39 ff ff ff       	jmpq   405080 <quotearg_n_custom_mem>
  405147:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40514e:	00 00 

0000000000405150 <quotearg_custom_mem>:
}

char *
quotearg_custom_mem (char const *left_quote, char const *right_quote,
                     char const *arg, size_t argsize)
{
  405150:	49 89 c8             	mov    %rcx,%r8
  return quotearg_n_custom_mem (0, left_quote, right_quote, arg,
  405153:	48 89 d1             	mov    %rdx,%rcx
  405156:	48 89 f2             	mov    %rsi,%rdx
  405159:	48 89 fe             	mov    %rdi,%rsi
  40515c:	31 ff                	xor    %edi,%edi
  40515e:	e9 1d ff ff ff       	jmpq   405080 <quotearg_n_custom_mem>
  405163:	0f 1f 00             	nopl   (%rax)
  405166:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40516d:	00 00 00 

0000000000405170 <quote_n_mem>:
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
  405170:	48 8d 0d 89 70 20 00 	lea    0x207089(%rip),%rcx        # 60c200 <quote_quoting_options>
  405177:	e9 b4 f6 ff ff       	jmpq   404830 <quotearg_n_options>
  40517c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000405180 <quote_mem>:
}

char const *
quote_mem (char const *arg, size_t argsize)
{
  405180:	48 89 f2             	mov    %rsi,%rdx
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
  405183:	48 8d 0d 76 70 20 00 	lea    0x207076(%rip),%rcx        # 60c200 <quote_quoting_options>
  40518a:	48 89 fe             	mov    %rdi,%rsi
  40518d:	31 ff                	xor    %edi,%edi
  40518f:	e9 9c f6 ff ff       	jmpq   404830 <quotearg_n_options>
  405194:	66 90                	xchg   %ax,%ax
  405196:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40519d:	00 00 00 

00000000004051a0 <quote_n>:
  4051a0:	48 8d 0d 59 70 20 00 	lea    0x207059(%rip),%rcx        # 60c200 <quote_quoting_options>
  4051a7:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  4051ae:	e9 7d f6 ff ff       	jmpq   404830 <quotearg_n_options>
  4051b3:	0f 1f 00             	nopl   (%rax)
  4051b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4051bd:	00 00 00 

00000000004051c0 <quote>:
  return quote_n_mem (n, arg, SIZE_MAX);
}

char const *
quote (char const *arg)
{
  4051c0:	48 89 fe             	mov    %rdi,%rsi
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
  4051c3:	48 8d 0d 36 70 20 00 	lea    0x207036(%rip),%rcx        # 60c200 <quote_quoting_options>
  4051ca:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  4051d1:	31 ff                	xor    %edi,%edi
  4051d3:	e9 58 f6 ff ff       	jmpq   404830 <quotearg_n_options>
  4051d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4051df:	00 

00000000004051e0 <version_etc_arn>:
void
version_etc_arn (FILE *stream,
                 const char *command_name, const char *package,
                 const char *version,
                 const char * const * authors, size_t n_authors)
{
  4051e0:	41 57                	push   %r15
  4051e2:	41 56                	push   %r14
  4051e4:	41 55                	push   %r13
  4051e6:	41 54                	push   %r12
  4051e8:	4d 89 cc             	mov    %r9,%r12
  4051eb:	55                   	push   %rbp
  4051ec:	48 89 fd             	mov    %rdi,%rbp
  4051ef:	53                   	push   %rbx
  4051f0:	4c 89 c3             	mov    %r8,%rbx
  4051f3:	48 83 ec 38          	sub    $0x38,%rsp
  if (command_name)
  4051f7:	48 85 f6             	test   %rsi,%rsi
  4051fa:	0f 84 48 01 00 00    	je     405348 <version_etc_arn+0x168>
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  405200:	49 89 c9             	mov    %rcx,%r9
  405203:	49 89 d0             	mov    %rdx,%r8
  405206:	48 89 f1             	mov    %rsi,%rcx
  405209:	31 c0                	xor    %eax,%eax
  40520b:	48 8d 15 76 41 00 00 	lea    0x4176(%rip),%rdx        # 409388 <quoting_style_vals+0x28>
  405212:	be 01 00 00 00       	mov    $0x1,%esi
  405217:	e8 54 c4 ff ff       	callq  401670 <__fprintf_chk@plt>
#endif

  /* TRANSLATORS: Translate "(C)" to the copyright symbol
     (C-in-a-circle), if this symbol is available in the user's
     locale.  Otherwise, do not translate "(C)"; leave it as-is.  */
  fprintf (stream, version_etc_copyright, _("(C)"), COPYRIGHT_YEAR);
  40521c:	31 ff                	xor    %edi,%edi
  40521e:	ba 05 00 00 00       	mov    $0x5,%edx
  405223:	48 8d 35 71 41 00 00 	lea    0x4171(%rip),%rsi        # 40939b <quoting_style_vals+0x3b>
  40522a:	e8 e1 c1 ff ff       	callq  401410 <dcgettext@plt>
  40522f:	41 b8 e6 07 00 00    	mov    $0x7e6,%r8d
  405235:	be 01 00 00 00       	mov    $0x1,%esi
  40523a:	48 89 ef             	mov    %rbp,%rdi
  40523d:	48 89 c1             	mov    %rax,%rcx
  405240:	48 8d 15 79 44 00 00 	lea    0x4479(%rip),%rdx        # 4096c0 <version_etc_copyright>
  405247:	31 c0                	xor    %eax,%eax
  405249:	e8 22 c4 ff ff       	callq  401670 <__fprintf_chk@plt>

  fputs ("\n", stream);
  40524e:	48 89 ee             	mov    %rbp,%rsi
  405251:	bf 0a 00 00 00       	mov    $0xa,%edi
  405256:	e8 c5 c2 ff ff       	callq  401520 <fputc_unlocked@plt>

  /* TRANSLATORS: The %s placeholder is the web address of the GPL license.  */
  fprintf (stream, _("\
  40525b:	31 ff                	xor    %edi,%edi
  40525d:	ba 05 00 00 00       	mov    $0x5,%edx
  405262:	48 8d 35 d7 41 00 00 	lea    0x41d7(%rip),%rsi        # 409440 <quoting_style_vals+0xe0>
  405269:	e8 a2 c1 ff ff       	callq  401410 <dcgettext@plt>
  40526e:	be 01 00 00 00       	mov    $0x1,%esi
  405273:	48 89 ef             	mov    %rbp,%rdi
  405276:	48 8d 0d 73 42 00 00 	lea    0x4273(%rip),%rcx        # 4094f0 <quoting_style_vals+0x190>
  40527d:	48 89 c2             	mov    %rax,%rdx
  405280:	31 c0                	xor    %eax,%eax
  405282:	e8 e9 c3 ff ff       	callq  401670 <__fprintf_chk@plt>
This is free software: you are free to change and redistribute it.\n\
There is NO WARRANTY, to the extent permitted by law.\n\
"),
           "https://gnu.org/licenses/gpl.html");

  fputs ("\n", stream);
  405287:	48 89 ee             	mov    %rbp,%rsi
  40528a:	bf 0a 00 00 00       	mov    $0xa,%edi
  40528f:	e8 8c c2 ff ff       	callq  401520 <fputc_unlocked@plt>

  switch (n_authors)
  405294:	49 83 fc 09          	cmp    $0x9,%r12
  405298:	0f 87 56 03 00 00    	ja     4055f4 <version_etc_arn+0x414>
  40529e:	48 8d 15 e3 43 00 00 	lea    0x43e3(%rip),%rdx        # 409688 <quoting_style_vals+0x328>
  4052a5:	4a 63 04 a2          	movslq (%rdx,%r12,4),%rax
  4052a9:	48 01 d0             	add    %rdx,%rax
  4052ac:	ff e0                	jmpq   *%rax
  4052ae:	66 90                	xchg   %ax,%ax
      break;
    case 8:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
  4052b0:	4c 8b 53 38          	mov    0x38(%rbx),%r10
  4052b4:	4c 8b 4b 30          	mov    0x30(%rbx),%r9
  4052b8:	ba 05 00 00 00       	mov    $0x5,%edx
  4052bd:	31 ff                	xor    %edi,%edi
  4052bf:	4c 8b 43 28          	mov    0x28(%rbx),%r8
  4052c3:	48 8b 4b 20          	mov    0x20(%rbx),%rcx
  4052c7:	48 8d 35 ea 42 00 00 	lea    0x42ea(%rip),%rsi        # 4095b8 <quoting_style_vals+0x258>
  4052ce:	4c 8b 7b 18          	mov    0x18(%rbx),%r15
  4052d2:	4c 8b 73 10          	mov    0x10(%rbx),%r14
  4052d6:	4c 89 54 24 20       	mov    %r10,0x20(%rsp)
  4052db:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  4052df:	4c 8b 23             	mov    (%rbx),%r12
  4052e2:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
  4052e7:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  4052ec:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  4052f1:	e8 1a c1 ff ff       	callq  401410 <dcgettext@plt>
  4052f6:	48 83 ec 08          	sub    $0x8,%rsp
  4052fa:	48 89 c2             	mov    %rax,%rdx
  4052fd:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  405302:	be 01 00 00 00       	mov    $0x1,%esi
  405307:	48 89 ef             	mov    %rbp,%rdi
  40530a:	31 c0                	xor    %eax,%eax
  40530c:	41 52                	push   %r10
  40530e:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
  405313:	41 51                	push   %r9
  405315:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
  40531a:	4d 89 f1             	mov    %r14,%r9
  40531d:	41 50                	push   %r8
  40531f:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  405324:	4d 89 e8             	mov    %r13,%r8
  405327:	51                   	push   %rcx
  405328:	4c 89 e1             	mov    %r12,%rcx
  40532b:	41 57                	push   %r15
  40532d:	e8 3e c3 ff ff       	callq  401670 <__fprintf_chk@plt>
  405332:	48 83 c4 30          	add    $0x30,%rsp
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
  405336:	48 83 c4 38          	add    $0x38,%rsp
  40533a:	5b                   	pop    %rbx
  40533b:	5d                   	pop    %rbp
  40533c:	41 5c                	pop    %r12
  40533e:	41 5d                	pop    %r13
  405340:	41 5e                	pop    %r14
  405342:	41 5f                	pop    %r15
  405344:	c3                   	retq   
  405345:	0f 1f 00             	nopl   (%rax)
  405348:	49 89 c8             	mov    %rcx,%r8
  40534b:	be 01 00 00 00       	mov    $0x1,%esi
  405350:	48 89 d1             	mov    %rdx,%rcx
  405353:	31 c0                	xor    %eax,%eax
  405355:	48 8d 15 38 40 00 00 	lea    0x4038(%rip),%rdx        # 409394 <quoting_style_vals+0x34>
  40535c:	e8 0f c3 ff ff       	callq  401670 <__fprintf_chk@plt>
  405361:	e9 b6 fe ff ff       	jmpq   40521c <version_etc_arn+0x3c>
  405366:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40536d:	00 00 00 
      fprintf (stream, _("\
  405370:	4c 8b 5b 40          	mov    0x40(%rbx),%r11
  405374:	4c 8b 53 38          	mov    0x38(%rbx),%r10
  405378:	ba 05 00 00 00       	mov    $0x5,%edx
  40537d:	48 8d 35 64 42 00 00 	lea    0x4264(%rip),%rsi        # 4095e8 <quoting_style_vals+0x288>
  405384:	4c 8b 4b 30          	mov    0x30(%rbx),%r9
  405388:	4c 8b 43 28          	mov    0x28(%rbx),%r8
  40538c:	48 8b 4b 20          	mov    0x20(%rbx),%rcx
  405390:	4c 8b 7b 18          	mov    0x18(%rbx),%r15
  405394:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  405399:	4c 8b 73 10          	mov    0x10(%rbx),%r14
  40539d:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  4053a1:	4c 89 54 24 20       	mov    %r10,0x20(%rsp)
  4053a6:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
  4053ab:	4c 8b 23             	mov    (%rbx),%r12
  4053ae:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  4053b3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
      fprintf (stream, _("\
  4053b8:	31 ff                	xor    %edi,%edi
  4053ba:	e8 51 c0 ff ff       	callq  401410 <dcgettext@plt>
  4053bf:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  4053c4:	48 89 c2             	mov    %rax,%rdx
  4053c7:	41 53                	push   %r11
  4053c9:	e9 2f ff ff ff       	jmpq   4052fd <version_etc_arn+0x11d>
  4053ce:	66 90                	xchg   %ax,%ax
      fprintf (stream, _("Written by %s.\n"), authors[0]);
  4053d0:	4c 8b 23             	mov    (%rbx),%r12
  4053d3:	ba 05 00 00 00       	mov    $0x5,%edx
  4053d8:	48 8d 35 c0 3f 00 00 	lea    0x3fc0(%rip),%rsi        # 40939f <quoting_style_vals+0x3f>
  4053df:	31 ff                	xor    %edi,%edi
  4053e1:	e8 2a c0 ff ff       	callq  401410 <dcgettext@plt>
}
  4053e6:	48 83 c4 38          	add    $0x38,%rsp
  4053ea:	48 89 ef             	mov    %rbp,%rdi
  4053ed:	be 01 00 00 00       	mov    $0x1,%esi
  4053f2:	5b                   	pop    %rbx
      fprintf (stream, _("Written by %s.\n"), authors[0]);
  4053f3:	48 89 c2             	mov    %rax,%rdx
}
  4053f6:	5d                   	pop    %rbp
  4053f7:	4c 89 e1             	mov    %r12,%rcx
  4053fa:	31 c0                	xor    %eax,%eax
  4053fc:	41 5c                	pop    %r12
  4053fe:	41 5d                	pop    %r13
  405400:	41 5e                	pop    %r14
  405402:	41 5f                	pop    %r15
  405404:	e9 67 c2 ff ff       	jmpq   401670 <__fprintf_chk@plt>
  405409:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
  405410:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  405414:	4c 8b 23             	mov    (%rbx),%r12
  405417:	ba 05 00 00 00       	mov    $0x5,%edx
  40541c:	31 ff                	xor    %edi,%edi
  40541e:	48 8d 35 8a 3f 00 00 	lea    0x3f8a(%rip),%rsi        # 4093af <quoting_style_vals+0x4f>
  405425:	e8 e6 bf ff ff       	callq  401410 <dcgettext@plt>
}
  40542a:	48 83 c4 38          	add    $0x38,%rsp
  40542e:	4d 89 e8             	mov    %r13,%r8
  405431:	4c 89 e1             	mov    %r12,%rcx
  405434:	5b                   	pop    %rbx
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
  405435:	48 89 c2             	mov    %rax,%rdx
  405438:	48 89 ef             	mov    %rbp,%rdi
  40543b:	be 01 00 00 00       	mov    $0x1,%esi
}
  405440:	5d                   	pop    %rbp
  405441:	31 c0                	xor    %eax,%eax
  405443:	41 5c                	pop    %r12
  405445:	41 5d                	pop    %r13
  405447:	41 5e                	pop    %r14
  405449:	41 5f                	pop    %r15
  40544b:	e9 20 c2 ff ff       	jmpq   401670 <__fprintf_chk@plt>
      fprintf (stream, _("Written by %s, %s, and %s.\n"),
  405450:	4c 8b 73 10          	mov    0x10(%rbx),%r14
  405454:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  405458:	ba 05 00 00 00       	mov    $0x5,%edx
  40545d:	31 ff                	xor    %edi,%edi
  40545f:	4c 8b 23             	mov    (%rbx),%r12
  405462:	48 8d 35 5d 3f 00 00 	lea    0x3f5d(%rip),%rsi        # 4093c6 <quoting_style_vals+0x66>
  405469:	e8 a2 bf ff ff       	callq  401410 <dcgettext@plt>
}
  40546e:	48 83 c4 38          	add    $0x38,%rsp
  405472:	4d 89 f1             	mov    %r14,%r9
  405475:	4d 89 e8             	mov    %r13,%r8
  405478:	5b                   	pop    %rbx
      fprintf (stream, _("Written by %s, %s, and %s.\n"),
  405479:	48 89 c2             	mov    %rax,%rdx
  40547c:	4c 89 e1             	mov    %r12,%rcx
  40547f:	48 89 ef             	mov    %rbp,%rdi
  405482:	be 01 00 00 00       	mov    $0x1,%esi
}
  405487:	5d                   	pop    %rbp
  405488:	31 c0                	xor    %eax,%eax
  40548a:	41 5c                	pop    %r12
  40548c:	41 5d                	pop    %r13
  40548e:	41 5e                	pop    %r14
  405490:	41 5f                	pop    %r15
  405492:	e9 d9 c1 ff ff       	jmpq   401670 <__fprintf_chk@plt>
  405497:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40549e:	00 00 
      fprintf (stream, _("Written by %s, %s, %s,\nand %s.\n"),
  4054a0:	ba 05 00 00 00       	mov    $0x5,%edx
  4054a5:	31 ff                	xor    %edi,%edi
  4054a7:	4c 8b 7b 18          	mov    0x18(%rbx),%r15
  4054ab:	4c 8b 73 10          	mov    0x10(%rbx),%r14
  4054af:	48 8d 35 62 40 00 00 	lea    0x4062(%rip),%rsi        # 409518 <quoting_style_vals+0x1b8>
  4054b6:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  4054ba:	4c 8b 23             	mov    (%rbx),%r12
  4054bd:	e8 4e bf ff ff       	callq  401410 <dcgettext@plt>
  4054c2:	48 83 ec 08          	sub    $0x8,%rsp
  4054c6:	48 89 c2             	mov    %rax,%rdx
  4054c9:	41 57                	push   %r15
  4054cb:	4d 89 f1             	mov    %r14,%r9
  4054ce:	4d 89 e8             	mov    %r13,%r8
  4054d1:	4c 89 e1             	mov    %r12,%rcx
  4054d4:	48 89 ef             	mov    %rbp,%rdi
  4054d7:	be 01 00 00 00       	mov    $0x1,%esi
  4054dc:	31 c0                	xor    %eax,%eax
  4054de:	e8 8d c1 ff ff       	callq  401670 <__fprintf_chk@plt>
  4054e3:	58                   	pop    %rax
  4054e4:	5a                   	pop    %rdx
}
  4054e5:	48 83 c4 38          	add    $0x38,%rsp
  4054e9:	5b                   	pop    %rbx
  4054ea:	5d                   	pop    %rbp
  4054eb:	41 5c                	pop    %r12
  4054ed:	41 5d                	pop    %r13
  4054ef:	41 5e                	pop    %r14
  4054f1:	41 5f                	pop    %r15
  4054f3:	c3                   	retq   
  4054f4:	0f 1f 40 00          	nopl   0x0(%rax)
      fprintf (stream, _("Written by %s, %s, %s,\n%s, and %s.\n"),
  4054f8:	48 8b 4b 20          	mov    0x20(%rbx),%rcx
  4054fc:	ba 05 00 00 00       	mov    $0x5,%edx
  405501:	31 ff                	xor    %edi,%edi
  405503:	4c 8b 7b 18          	mov    0x18(%rbx),%r15
  405507:	48 8d 35 2a 40 00 00 	lea    0x402a(%rip),%rsi        # 409538 <quoting_style_vals+0x1d8>
  40550e:	4c 8b 73 10          	mov    0x10(%rbx),%r14
  405512:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  405516:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  40551b:	4c 8b 23             	mov    (%rbx),%r12
  40551e:	e8 ed be ff ff       	callq  401410 <dcgettext@plt>
  405523:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  405528:	48 89 c2             	mov    %rax,%rdx
  40552b:	51                   	push   %rcx
  40552c:	eb 9b                	jmp    4054c9 <version_etc_arn+0x2e9>
  40552e:	66 90                	xchg   %ax,%ax
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, and %s.\n"),
  405530:	4c 8b 43 28          	mov    0x28(%rbx),%r8
  405534:	48 8b 4b 20          	mov    0x20(%rbx),%rcx
  405538:	ba 05 00 00 00       	mov    $0x5,%edx
  40553d:	31 ff                	xor    %edi,%edi
  40553f:	48 8d 35 1a 40 00 00 	lea    0x401a(%rip),%rsi        # 409560 <quoting_style_vals+0x200>
  405546:	4c 8b 7b 18          	mov    0x18(%rbx),%r15
  40554a:	4c 8b 73 10          	mov    0x10(%rbx),%r14
  40554e:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  405552:	4c 8b 23             	mov    (%rbx),%r12
  405555:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  40555a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  40555f:	e8 ac be ff ff       	callq  401410 <dcgettext@plt>
  405564:	48 83 ec 08          	sub    $0x8,%rsp
  405568:	48 89 c2             	mov    %rax,%rdx
  40556b:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
  405570:	4d 89 f1             	mov    %r14,%r9
  405573:	48 89 ef             	mov    %rbp,%rdi
  405576:	be 01 00 00 00       	mov    $0x1,%esi
  40557b:	31 c0                	xor    %eax,%eax
  40557d:	41 50                	push   %r8
  40557f:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  405584:	4d 89 e8             	mov    %r13,%r8
  405587:	51                   	push   %rcx
  405588:	4c 89 e1             	mov    %r12,%rcx
  40558b:	41 57                	push   %r15
  40558d:	e8 de c0 ff ff       	callq  401670 <__fprintf_chk@plt>
  405592:	48 83 c4 20          	add    $0x20,%rsp
}
  405596:	48 83 c4 38          	add    $0x38,%rsp
  40559a:	5b                   	pop    %rbx
  40559b:	5d                   	pop    %rbp
  40559c:	41 5c                	pop    %r12
  40559e:	41 5d                	pop    %r13
  4055a0:	41 5e                	pop    %r14
  4055a2:	41 5f                	pop    %r15
  4055a4:	c3                   	retq   
  4055a5:	0f 1f 00             	nopl   (%rax)
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"),
  4055a8:	4c 8b 4b 30          	mov    0x30(%rbx),%r9
  4055ac:	4c 8b 43 28          	mov    0x28(%rbx),%r8
  4055b0:	ba 05 00 00 00       	mov    $0x5,%edx
  4055b5:	31 ff                	xor    %edi,%edi
  4055b7:	48 8b 4b 20          	mov    0x20(%rbx),%rcx
  4055bb:	48 8d 35 c6 3f 00 00 	lea    0x3fc6(%rip),%rsi        # 409588 <quoting_style_vals+0x228>
  4055c2:	4c 8b 7b 18          	mov    0x18(%rbx),%r15
  4055c6:	4c 8b 73 10          	mov    0x10(%rbx),%r14
  4055ca:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  4055ce:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
  4055d3:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  4055d8:	4c 8b 23             	mov    (%rbx),%r12
  4055db:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  4055e0:	e8 2b be ff ff       	callq  401410 <dcgettext@plt>
  4055e5:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  4055ea:	48 89 c2             	mov    %rax,%rdx
  4055ed:	41 51                	push   %r9
  4055ef:	e9 77 ff ff ff       	jmpq   40556b <version_etc_arn+0x38b>
      fprintf (stream, _("\
  4055f4:	4c 8b 5b 40          	mov    0x40(%rbx),%r11
  4055f8:	4c 8b 53 38          	mov    0x38(%rbx),%r10
  4055fc:	ba 05 00 00 00       	mov    $0x5,%edx
  405601:	48 8d 35 18 40 00 00 	lea    0x4018(%rip),%rsi        # 409620 <quoting_style_vals+0x2c0>
  405608:	4c 8b 4b 30          	mov    0x30(%rbx),%r9
  40560c:	4c 8b 43 28          	mov    0x28(%rbx),%r8
  405610:	48 8b 4b 20          	mov    0x20(%rbx),%rcx
  405614:	4c 8b 7b 18          	mov    0x18(%rbx),%r15
  405618:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  40561d:	4c 8b 73 10          	mov    0x10(%rbx),%r14
  405621:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  405625:	4c 89 54 24 20       	mov    %r10,0x20(%rsp)
  40562a:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
  40562f:	4c 8b 23             	mov    (%rbx),%r12
  405632:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  405637:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  40563c:	e9 77 fd ff ff       	jmpq   4053b8 <version_etc_arn+0x1d8>
  405641:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  405646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40564d:	00 00 00 

0000000000405650 <version_etc_ar>:
                const char *command_name, const char *package,
                const char *version, const char * const * authors)
{
  size_t n_authors;

  for (n_authors = 0; authors[n_authors]; n_authors++)
  405650:	45 31 c9             	xor    %r9d,%r9d
  405653:	49 83 38 00          	cmpq   $0x0,(%r8)
  405657:	74 12                	je     40566b <version_etc_ar+0x1b>
  405659:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  405660:	49 83 c1 01          	add    $0x1,%r9
  405664:	4b 83 3c c8 00       	cmpq   $0x0,(%r8,%r9,8)
  405669:	75 f5                	jne    405660 <version_etc_ar+0x10>
    ;
  version_etc_arn (stream, command_name, package, version, authors, n_authors);
  40566b:	e9 70 fb ff ff       	jmpq   4051e0 <version_etc_arn>

0000000000405670 <version_etc_va>:
   Author names are given in the NULL-terminated va_list AUTHORS. */
void
version_etc_va (FILE *stream,
                const char *command_name, const char *package,
                const char *version, va_list authors)
{
  405670:	48 83 ec 68          	sub    $0x68,%rsp
  405674:	4d 89 c3             	mov    %r8,%r11
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
  405677:	45 31 c9             	xor    %r9d,%r9d
{
  40567a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  405681:	00 00 
  405683:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  405688:	31 c0                	xor    %eax,%eax
       n_authors < 10
  40568a:	49 89 e0             	mov    %rsp,%r8
  40568d:	eb 24                	jmp    4056b3 <version_etc_va+0x43>
  40568f:	90                   	nop
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
  405690:	41 89 c2             	mov    %eax,%r10d
  405693:	83 c0 08             	add    $0x8,%eax
  405696:	4d 03 53 10          	add    0x10(%r11),%r10
  40569a:	41 89 03             	mov    %eax,(%r11)
  40569d:	49 8b 02             	mov    (%r10),%rax
  4056a0:	4b 89 04 c8          	mov    %rax,(%r8,%r9,8)
  4056a4:	48 85 c0             	test   %rax,%rax
  4056a7:	74 2f                	je     4056d8 <version_etc_va+0x68>
       n_authors++)
  4056a9:	49 83 c1 01          	add    $0x1,%r9
  for (n_authors = 0;
  4056ad:	49 83 f9 0a          	cmp    $0xa,%r9
  4056b1:	74 25                	je     4056d8 <version_etc_va+0x68>
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
  4056b3:	41 8b 03             	mov    (%r11),%eax
  4056b6:	83 f8 2f             	cmp    $0x2f,%eax
  4056b9:	76 d5                	jbe    405690 <version_etc_va+0x20>
  4056bb:	4d 8b 53 08          	mov    0x8(%r11),%r10
  4056bf:	49 8d 42 08          	lea    0x8(%r10),%rax
  4056c3:	49 89 43 08          	mov    %rax,0x8(%r11)
  4056c7:	49 8b 02             	mov    (%r10),%rax
  4056ca:	4b 89 04 c8          	mov    %rax,(%r8,%r9,8)
  4056ce:	48 85 c0             	test   %rax,%rax
  4056d1:	75 d6                	jne    4056a9 <version_etc_va+0x39>
  4056d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    ;
  version_etc_arn (stream, command_name, package, version,
  4056d8:	e8 03 fb ff ff       	callq  4051e0 <version_etc_arn>
                   authtab, n_authors);
}
  4056dd:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  4056e2:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4056e9:	00 00 
  4056eb:	75 05                	jne    4056f2 <version_etc_va+0x82>
  4056ed:	48 83 c4 68          	add    $0x68,%rsp
  4056f1:	c3                   	retq   
  4056f2:	e8 49 bd ff ff       	callq  401440 <__stack_chk_fail@plt>
  4056f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4056fe:	00 00 

0000000000405700 <version_etc>:
   NULL argument at the end.  */
void
version_etc (FILE *stream,
             const char *command_name, const char *package,
             const char *version, /* const char *author1, ...*/ ...)
{
  405700:	53                   	push   %rbx
  405701:	41 ba 20 00 00 00    	mov    $0x20,%r10d
  405707:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40570e:	4c 89 84 24 a0 00 00 	mov    %r8,0xa0(%rsp)
  405715:	00 
  405716:	4c 8d 9c 24 c0 00 00 	lea    0xc0(%rsp),%r11
  40571d:	00 
  40571e:	4c 8d 44 24 20       	lea    0x20(%rsp),%r8
  405723:	4c 89 8c 24 a8 00 00 	mov    %r9,0xa8(%rsp)
  40572a:	00 
  for (n_authors = 0;
  40572b:	45 31 c9             	xor    %r9d,%r9d
{
  40572e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  405735:	00 00 
  405737:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40573c:	31 c0                	xor    %eax,%eax
  va_list authors;

  va_start (authors, version);
  40573e:	48 8d 84 24 c0 00 00 	lea    0xc0(%rsp),%rax
  405745:	00 
  405746:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%rsp)
  40574d:	00 
  40574e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  405753:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  40575a:	00 
  40575b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
  405760:	48 89 c3             	mov    %rax,%rbx
  405763:	eb 23                	jmp    405788 <version_etc+0x88>
  405765:	0f 1f 00             	nopl   (%rax)
  405768:	44 89 d0             	mov    %r10d,%eax
  40576b:	41 83 c2 08          	add    $0x8,%r10d
  40576f:	48 01 d8             	add    %rbx,%rax
  405772:	48 8b 00             	mov    (%rax),%rax
  405775:	4b 89 04 c8          	mov    %rax,(%r8,%r9,8)
  405779:	48 85 c0             	test   %rax,%rax
  40577c:	74 2a                	je     4057a8 <version_etc+0xa8>
       n_authors++)
  40577e:	49 83 c1 01          	add    $0x1,%r9
  for (n_authors = 0;
  405782:	49 83 f9 0a          	cmp    $0xa,%r9
  405786:	74 20                	je     4057a8 <version_etc+0xa8>
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
  405788:	41 83 fa 2f          	cmp    $0x2f,%r10d
  40578c:	76 da                	jbe    405768 <version_etc+0x68>
  40578e:	4c 89 d8             	mov    %r11,%rax
  405791:	49 83 c3 08          	add    $0x8,%r11
  405795:	48 8b 00             	mov    (%rax),%rax
  405798:	4b 89 04 c8          	mov    %rax,(%r8,%r9,8)
  40579c:	48 85 c0             	test   %rax,%rax
  40579f:	75 dd                	jne    40577e <version_etc+0x7e>
  4057a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  version_etc_arn (stream, command_name, package, version,
  4057a8:	e8 33 fa ff ff       	callq  4051e0 <version_etc_arn>
  version_etc_va (stream, command_name, package, version, authors);
  va_end (authors);
}
  4057ad:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  4057b2:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4057b9:	00 00 
  4057bb:	75 09                	jne    4057c6 <version_etc+0xc6>
  4057bd:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  4057c4:	5b                   	pop    %rbx
  4057c5:	c3                   	retq   
  4057c6:	e8 75 bc ff ff       	callq  401440 <__stack_chk_fail@plt>
  4057cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004057d0 <emit_bug_reporting_address>:

void
emit_bug_reporting_address (void)
{
  4057d0:	48 83 ec 08          	sub    $0x8,%rsp
  fputs ("\n", stdout);
  4057d4:	48 8b 35 8d 6a 20 00 	mov    0x206a8d(%rip),%rsi        # 60c268 <stdout@@GLIBC_2.2.5>
  4057db:	bf 0a 00 00 00       	mov    $0xa,%edi
  4057e0:	e8 3b bd ff ff       	callq  401520 <fputc_unlocked@plt>
  /* TRANSLATORS: The placeholder indicates the bug-reporting address
     for this package.  Please add _another line_ saying
     "Report translation bugs to <...>\n" with the address for translation
     bugs (typically your translation team's web or email address).  */
  printf (_("Report bugs to: %s\n"), PACKAGE_BUGREPORT);
  4057e5:	ba 05 00 00 00       	mov    $0x5,%edx
  4057ea:	48 8d 35 f1 3b 00 00 	lea    0x3bf1(%rip),%rsi        # 4093e2 <quoting_style_vals+0x82>
  4057f1:	31 ff                	xor    %edi,%edi
  4057f3:	e8 18 bc ff ff       	callq  401410 <dcgettext@plt>
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  4057f8:	48 8d 15 f7 3b 00 00 	lea    0x3bf7(%rip),%rdx        # 4093f6 <quoting_style_vals+0x96>
  4057ff:	bf 01 00 00 00       	mov    $0x1,%edi
  405804:	48 89 c6             	mov    %rax,%rsi
  405807:	31 c0                	xor    %eax,%eax
  405809:	e8 d2 bd ff ff       	callq  4015e0 <__printf_chk@plt>
#ifdef PACKAGE_PACKAGER_BUG_REPORTS
  printf (_("Report %s bugs to: %s\n"), PACKAGE_PACKAGER,
          PACKAGE_PACKAGER_BUG_REPORTS);
#endif
#ifdef PACKAGE_URL
  printf (_("%s home page: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
  40580e:	ba 05 00 00 00       	mov    $0x5,%edx
  405813:	48 8d 35 f2 3b 00 00 	lea    0x3bf2(%rip),%rsi        # 40940c <quoting_style_vals+0xac>
  40581a:	31 ff                	xor    %edi,%edi
  40581c:	e8 ef bb ff ff       	callq  401410 <dcgettext@plt>
  405821:	48 8d 0d 48 32 00 00 	lea    0x3248(%rip),%rcx        # 408a70 <_IO_stdin_used+0x710>
  405828:	bf 01 00 00 00       	mov    $0x1,%edi
  40582d:	48 8d 15 c5 2b 00 00 	lea    0x2bc5(%rip),%rdx        # 4083f9 <_IO_stdin_used+0x99>
  405834:	48 89 c6             	mov    %rax,%rsi
  405837:	31 c0                	xor    %eax,%eax
  405839:	e8 a2 bd ff ff       	callq  4015e0 <__printf_chk@plt>
#else
  printf (_("%s home page: <%s>\n"),
          PACKAGE_NAME, "https://www.gnu.org/software/" PACKAGE "/");
#endif
  printf (_("General help using GNU software: <%s>\n"),
  40583e:	ba 05 00 00 00       	mov    $0x5,%edx
  405843:	48 8d 35 16 3e 00 00 	lea    0x3e16(%rip),%rsi        # 409660 <quoting_style_vals+0x300>
  40584a:	31 ff                	xor    %edi,%edi
  40584c:	e8 bf bb ff ff       	callq  401410 <dcgettext@plt>
  405851:	48 8d 15 c8 3b 00 00 	lea    0x3bc8(%rip),%rdx        # 409420 <quoting_style_vals+0xc0>
  405858:	bf 01 00 00 00       	mov    $0x1,%edi
          "https://www.gnu.org/gethelp/");
}
  40585d:	48 83 c4 08          	add    $0x8,%rsp
  printf (_("General help using GNU software: <%s>\n"),
  405861:	48 89 c6             	mov    %rax,%rsi
  405864:	31 c0                	xor    %eax,%eax
  405866:	e9 75 bd ff ff       	jmpq   4015e0 <__printf_chk@plt>
  40586b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000405870 <xmalloc>:

/* Allocate S bytes of memory dynamically, with error checking.  */

void *
xmalloc (size_t s)
{
  405870:	48 83 ec 08          	sub    $0x8,%rsp
  return nonnull (malloc (s));
  405874:	e8 f7 bc ff ff       	callq  401570 <malloc@plt>
  if (!p)
  405879:	48 85 c0             	test   %rax,%rax
  40587c:	74 05                	je     405883 <xmalloc+0x13>
}
  40587e:	48 83 c4 08          	add    $0x8,%rsp
  405882:	c3                   	retq   
    xalloc_die ();
  405883:	e8 08 04 00 00       	callq  405c90 <xalloc_die>
  405888:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40588f:	00 

0000000000405890 <ximalloc>:

void *
ximalloc (idx_t s)
{
  405890:	48 83 ec 08          	sub    $0x8,%rsp
IALLOC_INLINE
_GL_ATTRIBUTE_MALLOC /*_GL_ATTRIBUTE_DEALLOC_FREE*/
void *
imalloc (idx_t s)
{
  return s <= SIZE_MAX ? malloc (s) : _gl_alloc_nomem ();
  405894:	e8 d7 bc ff ff       	callq  401570 <malloc@plt>
  if (!p)
  405899:	48 85 c0             	test   %rax,%rax
  40589c:	74 05                	je     4058a3 <ximalloc+0x13>
  return nonnull (imalloc (s));
}
  40589e:	48 83 c4 08          	add    $0x8,%rsp
  4058a2:	c3                   	retq   
    xalloc_die ();
  4058a3:	e8 e8 03 00 00       	callq  405c90 <xalloc_die>
  4058a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4058af:	00 

00000000004058b0 <xcharalloc>:

char *
xcharalloc (size_t n)
{
  4058b0:	48 83 ec 08          	sub    $0x8,%rsp
  return nonnull (malloc (s));
  4058b4:	e8 b7 bc ff ff       	callq  401570 <malloc@plt>
  if (!p)
  4058b9:	48 85 c0             	test   %rax,%rax
  4058bc:	74 05                	je     4058c3 <xcharalloc+0x13>
  return XNMALLOC (n, char);
}
  4058be:	48 83 c4 08          	add    $0x8,%rsp
  4058c2:	c3                   	retq   
    xalloc_die ();
  4058c3:	e8 c8 03 00 00       	callq  405c90 <xalloc_die>
  4058c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4058cf:	00 

00000000004058d0 <xrealloc>:
/* Change the size of an allocated block of memory P to S bytes,
   with error checking.  */

void *
xrealloc (void *p, size_t s)
{
  4058d0:	55                   	push   %rbp
  4058d1:	48 89 fd             	mov    %rdi,%rbp
  4058d4:	53                   	push   %rbx
  4058d5:	48 89 f3             	mov    %rsi,%rbx
  4058d8:	48 83 ec 08          	sub    $0x8,%rsp
  void *r = realloc (p, s);
  4058dc:	e8 df bc ff ff       	callq  4015c0 <realloc@plt>
  if (!r && (!p || s))
  4058e1:	48 85 c0             	test   %rax,%rax
  4058e4:	74 07                	je     4058ed <xrealloc+0x1d>
    xalloc_die ();
  return r;
}
  4058e6:	48 83 c4 08          	add    $0x8,%rsp
  4058ea:	5b                   	pop    %rbx
  4058eb:	5d                   	pop    %rbp
  4058ec:	c3                   	retq   
  if (!r && (!p || s))
  4058ed:	48 85 ed             	test   %rbp,%rbp
  4058f0:	74 05                	je     4058f7 <xrealloc+0x27>
  4058f2:	48 85 db             	test   %rbx,%rbx
  4058f5:	74 ef                	je     4058e6 <xrealloc+0x16>
    xalloc_die ();
  4058f7:	e8 94 03 00 00       	callq  405c90 <xalloc_die>
  4058fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000405900 <xirealloc>:

void *
xirealloc (void *p, idx_t s)
{
  405900:	48 83 ec 08          	sub    $0x8,%rsp
void *
irealloc (void *p, idx_t s)
{
  /* Work around GNU realloc glitch by treating a zero size as if it
     were 1, so that returning NULL is equivalent to failing.  */
  return s <= SIZE_MAX ? realloc (p, s | !s) : _gl_alloc_nomem ();
  405904:	31 c0                	xor    %eax,%eax
  405906:	48 85 f6             	test   %rsi,%rsi
  405909:	0f 94 c0             	sete   %al
  40590c:	48 09 c6             	or     %rax,%rsi
  40590f:	e8 ac bc ff ff       	callq  4015c0 <realloc@plt>
  if (!p)
  405914:	48 85 c0             	test   %rax,%rax
  405917:	74 05                	je     40591e <xirealloc+0x1e>
  return nonnull (irealloc (p, s));
}
  405919:	48 83 c4 08          	add    $0x8,%rsp
  40591d:	c3                   	retq   
    xalloc_die ();
  40591e:	e8 6d 03 00 00       	callq  405c90 <xalloc_die>
  405923:	0f 1f 00             	nopl   (%rax)
  405926:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40592d:	00 00 00 

0000000000405930 <xreallocarray>:
/* Change the size of an allocated block of memory P to an array of N
   objects each of S bytes, with error checking.  */

void *
xreallocarray (void *p, size_t n, size_t s)
{
  405930:	41 54                	push   %r12
  405932:	49 89 d4             	mov    %rdx,%r12
  405935:	55                   	push   %rbp
  405936:	48 89 f5             	mov    %rsi,%rbp
  405939:	53                   	push   %rbx
  40593a:	48 89 fb             	mov    %rdi,%rbx
  void *r = reallocarray (p, n, s);
  40593d:	e8 7e ba ff ff       	callq  4013c0 <reallocarray@plt>
  if (!r && (!p || (n && s)))
  405942:	48 85 c0             	test   %rax,%rax
  405945:	74 09                	je     405950 <xreallocarray+0x20>
    xalloc_die ();
  return r;
}
  405947:	5b                   	pop    %rbx
  405948:	5d                   	pop    %rbp
  405949:	41 5c                	pop    %r12
  40594b:	c3                   	retq   
  40594c:	0f 1f 40 00          	nopl   0x0(%rax)
  if (!r && (!p || (n && s)))
  405950:	48 85 db             	test   %rbx,%rbx
  405953:	74 0a                	je     40595f <xreallocarray+0x2f>
  405955:	48 85 ed             	test   %rbp,%rbp
  405958:	74 ed                	je     405947 <xreallocarray+0x17>
  40595a:	4d 85 e4             	test   %r12,%r12
  40595d:	74 e8                	je     405947 <xreallocarray+0x17>
    xalloc_die ();
  40595f:	e8 2c 03 00 00       	callq  405c90 <xalloc_die>
  405964:	66 90                	xchg   %ax,%ax
  405966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40596d:	00 00 00 

0000000000405970 <xnrealloc>:
XALLOC_INLINE void *xnrealloc (void *p, size_t n, size_t s)
  _GL_ATTRIBUTE_ALLOC_SIZE ((2, 3));
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
  return xreallocarray (p, n, s);
  405970:	eb be                	jmp    405930 <xreallocarray>
  405972:	0f 1f 40 00          	nopl   0x0(%rax)
  405976:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40597d:	00 00 00 

0000000000405980 <xireallocarray>:

void *
xireallocarray (void *p, idx_t n, idx_t s)
{
  405980:	48 83 ec 08          	sub    $0x8,%rsp
IALLOC_INLINE void *
ireallocarray (void *p, idx_t n, idx_t s)
{
  /* Work around GNU reallocarray glitch by treating a zero size as if
     it were 1, so that returning NULL is equivalent to failing.  */
  if (n == 0 || s == 0)
  405984:	48 85 f6             	test   %rsi,%rsi
  405987:	74 17                	je     4059a0 <xireallocarray+0x20>
  405989:	48 85 d2             	test   %rdx,%rdx
  40598c:	74 12                	je     4059a0 <xireallocarray+0x20>
    n = s = 1;
  return (n <= SIZE_MAX && s <= SIZE_MAX
          ? reallocarray (p, n, s)
          : _gl_alloc_nomem ());
  40598e:	e8 2d ba ff ff       	callq  4013c0 <reallocarray@plt>
  if (!p)
  405993:	48 85 c0             	test   %rax,%rax
  405996:	74 14                	je     4059ac <xireallocarray+0x2c>
  return nonnull (ireallocarray (p, n, s));
}
  405998:	48 83 c4 08          	add    $0x8,%rsp
  40599c:	c3                   	retq   
  40599d:	0f 1f 00             	nopl   (%rax)
  4059a0:	be 01 00 00 00       	mov    $0x1,%esi
  4059a5:	ba 01 00 00 00       	mov    $0x1,%edx
  4059aa:	eb e2                	jmp    40598e <xireallocarray+0xe>
    xalloc_die ();
  4059ac:	e8 df 02 00 00       	callq  405c90 <xalloc_die>
  4059b1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4059b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4059bd:	00 00 00 

00000000004059c0 <xnmalloc>:
/* Allocate an array of N objects, each with S bytes of memory,
   dynamically, with error checking.  S must be nonzero.  */

void *
xnmalloc (size_t n, size_t s)
{
  4059c0:	48 89 f2             	mov    %rsi,%rdx
  return xreallocarray (NULL, n, s);
  4059c3:	48 89 fe             	mov    %rdi,%rsi
  4059c6:	31 ff                	xor    %edi,%edi
  4059c8:	e9 63 ff ff ff       	jmpq   405930 <xreallocarray>
  4059cd:	0f 1f 00             	nopl   (%rax)

00000000004059d0 <xinmalloc>:
}

void *
xinmalloc (idx_t n, idx_t s)
{
  4059d0:	48 89 f2             	mov    %rsi,%rdx
  return xireallocarray (NULL, n, s);
  4059d3:	48 89 fe             	mov    %rdi,%rsi
  4059d6:	31 ff                	xor    %edi,%edi
  4059d8:	eb a6                	jmp    405980 <xireallocarray>
  4059da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004059e0 <x2nrealloc>:

   */

void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
  4059e0:	55                   	push   %rbp
  4059e1:	49 89 d0             	mov    %rdx,%r8
  4059e4:	48 89 f5             	mov    %rsi,%rbp
  4059e7:	53                   	push   %rbx
  4059e8:	48 83 ec 08          	sub    $0x8,%rsp
  size_t n = *pn;
  4059ec:	48 8b 1e             	mov    (%rsi),%rbx

  if (! p)
  4059ef:	48 85 ff             	test   %rdi,%rdi
  4059f2:	74 2c                	je     405a20 <x2nrealloc+0x40>
        }
    }
  else
    {
      /* Set N = floor (1.5 * N) + 1 to make progress even if N == 0.  */
      if (ckd_add (&n, n, (n >> 1) + 1))
  4059f4:	48 89 d8             	mov    %rbx,%rax
  4059f7:	48 d1 e8             	shr    %rax
  4059fa:	48 83 c0 01          	add    $0x1,%rax
  4059fe:	48 01 c3             	add    %rax,%rbx
  405a01:	72 3d                	jb     405a40 <x2nrealloc+0x60>
        xalloc_die ();
    }

  p = xreallocarray (p, n, s);
  405a03:	48 89 de             	mov    %rbx,%rsi
  405a06:	4c 89 c2             	mov    %r8,%rdx
  405a09:	e8 22 ff ff ff       	callq  405930 <xreallocarray>
  *pn = n;
  405a0e:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
  return p;
}
  405a12:	48 83 c4 08          	add    $0x8,%rsp
  405a16:	5b                   	pop    %rbx
  405a17:	5d                   	pop    %rbp
  405a18:	c3                   	retq   
  405a19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      if (! n)
  405a20:	48 85 db             	test   %rbx,%rbx
  405a23:	75 de                	jne    405a03 <x2nrealloc+0x23>
          n = DEFAULT_MXFAST / s;
  405a25:	31 d2                	xor    %edx,%edx
  405a27:	b8 80 00 00 00       	mov    $0x80,%eax
          n += !n;
  405a2c:	31 db                	xor    %ebx,%ebx
          n = DEFAULT_MXFAST / s;
  405a2e:	49 f7 f0             	div    %r8
          n += !n;
  405a31:	49 81 f8 80 00 00 00 	cmp    $0x80,%r8
  405a38:	0f 97 c3             	seta   %bl
  405a3b:	48 01 c3             	add    %rax,%rbx
  405a3e:	eb c3                	jmp    405a03 <x2nrealloc+0x23>
        xalloc_die ();
  405a40:	e8 4b 02 00 00       	callq  405c90 <xalloc_die>
  405a45:	90                   	nop
  405a46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  405a4d:	00 00 00 

0000000000405a50 <x2realloc>:
  return x2nrealloc (p, ps, 1);
  405a50:	ba 01 00 00 00       	mov    $0x1,%edx
  405a55:	eb 89                	jmp    4059e0 <x2nrealloc>
  405a57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  405a5e:	00 00 

0000000000405a60 <xpalloc>:
   Thus, to grow an array A without saving its old contents, do
   { free (A); A = xpalloc (NULL, &AITEMS, ...); }.  */

void *
xpalloc (void *pa, idx_t *pn, idx_t n_incr_min, ptrdiff_t n_max, idx_t s)
{
  405a60:	55                   	push   %rbp
  405a61:	49 89 d2             	mov    %rdx,%r10
  405a64:	48 89 f5             	mov    %rsi,%rbp
  405a67:	53                   	push   %rbx
  405a68:	48 83 ec 08          	sub    $0x8,%rsp
  idx_t n0 = *pn;
  405a6c:	4c 8b 0e             	mov    (%rsi),%r9
     DEFAULT_MXFAST bytes.  Otherwise, grow it by about 50%.
     Adjust the growth according to three constraints: N_INCR_MIN,
     N_MAX, and what the C language can represent safely.  */

  idx_t n;
  if (ckd_add (&n, n0, n0 >> 1))
  405a6f:	4c 89 cb             	mov    %r9,%rbx
  405a72:	48 d1 fb             	sar    %rbx
  405a75:	4c 01 cb             	add    %r9,%rbx
  405a78:	0f 80 95 00 00 00    	jo     405b13 <xpalloc+0xb3>
    n = IDX_MAX;
  if (0 <= n_max && n_max < n)
  405a7e:	48 85 c9             	test   %rcx,%rcx
  405a81:	78 07                	js     405a8a <xpalloc+0x2a>
  405a83:	48 39 cb             	cmp    %rcx,%rbx
  405a86:	48 0f 4f d9          	cmovg  %rcx,%rbx
  idx_t nbytes;
#else
  size_t nbytes;
#endif
  idx_t adjusted_nbytes
    = (ckd_mul (&nbytes, n, s)
  405a8a:	48 89 de             	mov    %rbx,%rsi
  405a8d:	49 0f af f0          	imul   %r8,%rsi
  405a91:	70 74                	jo     405b07 <xpalloc+0xa7>
       ? MIN (IDX_MAX, SIZE_MAX)
       : nbytes < DEFAULT_MXFAST ? DEFAULT_MXFAST : 0);
  405a93:	48 83 fe 7f          	cmp    $0x7f,%rsi
  405a97:	7e 47                	jle    405ae0 <xpalloc+0x80>
    {
      n = adjusted_nbytes / s;
      nbytes = adjusted_nbytes - adjusted_nbytes % s;
    }

  if (! pa)
  405a99:	48 85 ff             	test   %rdi,%rdi
  405a9c:	74 5a                	je     405af8 <xpalloc+0x98>
  405a9e:	66 90                	xchg   %ax,%ax
    *pn = 0;
  if (n - n0 < n_incr_min
  405aa0:	48 89 d8             	mov    %rbx,%rax
  405aa3:	4c 29 c8             	sub    %r9,%rax
  405aa6:	4c 39 d0             	cmp    %r10,%rax
  405aa9:	7d 1b                	jge    405ac6 <xpalloc+0x66>
      && (ckd_add (&n, n0, n_incr_min)
  405aab:	4d 01 d1             	add    %r10,%r9
  405aae:	4c 89 cb             	mov    %r9,%rbx
  405ab1:	70 4f                	jo     405b02 <xpalloc+0xa2>
          || (0 <= n_max && n_max < n)
  405ab3:	49 39 c9             	cmp    %rcx,%r9
  405ab6:	7e 05                	jle    405abd <xpalloc+0x5d>
  405ab8:	48 85 c9             	test   %rcx,%rcx
  405abb:	79 45                	jns    405b02 <xpalloc+0xa2>
          || ckd_mul (&nbytes, n, s)))
  405abd:	4d 0f af c8          	imul   %r8,%r9
  405ac1:	4c 89 ce             	mov    %r9,%rsi
  405ac4:	70 3c                	jo     405b02 <xpalloc+0xa2>
    xalloc_die ();
  pa = xrealloc (pa, nbytes);
  405ac6:	e8 05 fe ff ff       	callq  4058d0 <xrealloc>
  *pn = n;
  405acb:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
  return pa;
}
  405acf:	48 83 c4 08          	add    $0x8,%rsp
  405ad3:	5b                   	pop    %rbx
  405ad4:	5d                   	pop    %rbp
  405ad5:	c3                   	retq   
  405ad6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  405add:	00 00 00 
       : nbytes < DEFAULT_MXFAST ? DEFAULT_MXFAST : 0);
  405ae0:	be 80 00 00 00       	mov    $0x80,%esi
      n = adjusted_nbytes / s;
  405ae5:	48 89 f0             	mov    %rsi,%rax
  405ae8:	48 99                	cqto   
  405aea:	49 f7 f8             	idiv   %r8
  405aed:	48 89 c3             	mov    %rax,%rbx
      nbytes = adjusted_nbytes - adjusted_nbytes % s;
  405af0:	48 29 d6             	sub    %rdx,%rsi
  if (! pa)
  405af3:	48 85 ff             	test   %rdi,%rdi
  405af6:	75 a8                	jne    405aa0 <xpalloc+0x40>
    *pn = 0;
  405af8:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
  405aff:	00 
  405b00:	eb 9e                	jmp    405aa0 <xpalloc+0x40>
    xalloc_die ();
  405b02:	e8 89 01 00 00       	callq  405c90 <xalloc_die>
       : nbytes < DEFAULT_MXFAST ? DEFAULT_MXFAST : 0);
  405b07:	48 be ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rsi
  405b0e:	ff ff 7f 
  405b11:	eb d2                	jmp    405ae5 <xpalloc+0x85>
    n = IDX_MAX;
  405b13:	48 bb ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rbx
  405b1a:	ff ff 7f 
  405b1d:	e9 5c ff ff ff       	jmpq   405a7e <xpalloc+0x1e>
  405b22:	0f 1f 40 00          	nopl   0x0(%rax)
  405b26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  405b2d:	00 00 00 

0000000000405b30 <xzalloc>:
   There's no need for xnzalloc (N, S), since it would be equivalent
   to xcalloc (N, S).  */

void *
xzalloc (size_t s)
{
  405b30:	48 83 ec 08          	sub    $0x8,%rsp
   checking.  S must be nonzero.  */

void *
xcalloc (size_t n, size_t s)
{
  return nonnull (calloc (n, s));
  405b34:	be 01 00 00 00       	mov    $0x1,%esi
  405b39:	e8 c2 b9 ff ff       	callq  401500 <calloc@plt>
  if (!p)
  405b3e:	48 85 c0             	test   %rax,%rax
  405b41:	74 05                	je     405b48 <xzalloc+0x18>
}
  405b43:	48 83 c4 08          	add    $0x8,%rsp
  405b47:	c3                   	retq   
    xalloc_die ();
  405b48:	e8 43 01 00 00       	callq  405c90 <xalloc_die>
  405b4d:	0f 1f 00             	nopl   (%rax)

0000000000405b50 <xizalloc>:
{
  405b50:	48 83 ec 08          	sub    $0x8,%rsp
  return calloc (n, s);
  405b54:	be 01 00 00 00       	mov    $0x1,%esi
  405b59:	e8 a2 b9 ff ff       	callq  401500 <calloc@plt>
  if (!p)
  405b5e:	48 85 c0             	test   %rax,%rax
  405b61:	74 05                	je     405b68 <xizalloc+0x18>
}
  405b63:	48 83 c4 08          	add    $0x8,%rsp
  405b67:	c3                   	retq   
    xalloc_die ();
  405b68:	e8 23 01 00 00       	callq  405c90 <xalloc_die>
  405b6d:	0f 1f 00             	nopl   (%rax)

0000000000405b70 <xcalloc>:
{
  405b70:	48 83 ec 08          	sub    $0x8,%rsp
  return nonnull (calloc (n, s));
  405b74:	e8 87 b9 ff ff       	callq  401500 <calloc@plt>
  if (!p)
  405b79:	48 85 c0             	test   %rax,%rax
  405b7c:	74 05                	je     405b83 <xcalloc+0x13>
}
  405b7e:	48 83 c4 08          	add    $0x8,%rsp
  405b82:	c3                   	retq   
    xalloc_die ();
  405b83:	e8 08 01 00 00       	callq  405c90 <xalloc_die>
  405b88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  405b8f:	00 

0000000000405b90 <xicalloc>:

void *
xicalloc (idx_t n, idx_t s)
{
  405b90:	48 83 ec 08          	sub    $0x8,%rsp
  405b94:	e8 67 b9 ff ff       	callq  401500 <calloc@plt>
  if (!p)
  405b99:	48 85 c0             	test   %rax,%rax
  405b9c:	74 05                	je     405ba3 <xicalloc+0x13>
  return nonnull (icalloc (n, s));
}
  405b9e:	48 83 c4 08          	add    $0x8,%rsp
  405ba2:	c3                   	retq   
    xalloc_die ();
  405ba3:	e8 e8 00 00 00       	callq  405c90 <xalloc_die>
  405ba8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  405baf:	00 

0000000000405bb0 <xmemdup>:
   for xnmemdup (P, N, S), since xmemdup (P, N * S) works without any
   need for an arithmetic overflow check.  */

void *
xmemdup (void const *p, size_t s)
{
  405bb0:	41 54                	push   %r12
  405bb2:	49 89 f4             	mov    %rsi,%r12
  405bb5:	55                   	push   %rbp
  405bb6:	48 89 fd             	mov    %rdi,%rbp
  return nonnull (malloc (s));
  405bb9:	48 89 f7             	mov    %rsi,%rdi
{
  405bbc:	48 83 ec 08          	sub    $0x8,%rsp
  return nonnull (malloc (s));
  405bc0:	e8 ab b9 ff ff       	callq  401570 <malloc@plt>
  if (!p)
  405bc5:	48 85 c0             	test   %rax,%rax
  405bc8:	74 15                	je     405bdf <xmemdup+0x2f>
  return memcpy (xmalloc (s), p, s);
}
  405bca:	48 83 c4 08          	add    $0x8,%rsp
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  405bce:	4c 89 e2             	mov    %r12,%rdx
  405bd1:	48 89 ee             	mov    %rbp,%rsi
  405bd4:	48 89 c7             	mov    %rax,%rdi
  405bd7:	5d                   	pop    %rbp
  405bd8:	41 5c                	pop    %r12
  405bda:	e9 61 b9 ff ff       	jmpq   401540 <memcpy@plt>
    xalloc_die ();
  405bdf:	e8 ac 00 00 00       	callq  405c90 <xalloc_die>
  405be4:	66 90                	xchg   %ax,%ax
  405be6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  405bed:	00 00 00 

0000000000405bf0 <ximemdup>:

void *
ximemdup (void const *p, idx_t s)
{
  405bf0:	41 54                	push   %r12
  405bf2:	49 89 f4             	mov    %rsi,%r12
  405bf5:	55                   	push   %rbp
  405bf6:	48 89 fd             	mov    %rdi,%rbp
  return s <= SIZE_MAX ? malloc (s) : _gl_alloc_nomem ();
  405bf9:	48 89 f7             	mov    %rsi,%rdi
  405bfc:	48 83 ec 08          	sub    $0x8,%rsp
  405c00:	e8 6b b9 ff ff       	callq  401570 <malloc@plt>
  if (!p)
  405c05:	48 85 c0             	test   %rax,%rax
  405c08:	74 15                	je     405c1f <ximemdup+0x2f>
  return memcpy (ximalloc (s), p, s);
}
  405c0a:	48 83 c4 08          	add    $0x8,%rsp
  405c0e:	4c 89 e2             	mov    %r12,%rdx
  405c11:	48 89 ee             	mov    %rbp,%rsi
  405c14:	48 89 c7             	mov    %rax,%rdi
  405c17:	5d                   	pop    %rbp
  405c18:	41 5c                	pop    %r12
  405c1a:	e9 21 b9 ff ff       	jmpq   401540 <memcpy@plt>
    xalloc_die ();
  405c1f:	e8 6c 00 00 00       	callq  405c90 <xalloc_die>
  405c24:	66 90                	xchg   %ax,%ax
  405c26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  405c2d:	00 00 00 

0000000000405c30 <ximemdup0>:
/* Clone an object P of size S, with error checking.  Append
   a terminating NUL byte.  */

char *
ximemdup0 (void const *p, idx_t s)
{
  405c30:	41 54                	push   %r12
  405c32:	49 89 f4             	mov    %rsi,%r12
  405c35:	55                   	push   %rbp
  405c36:	48 89 fd             	mov    %rdi,%rbp
  char *result = ximalloc (s + 1);
  405c39:	48 8d 7e 01          	lea    0x1(%rsi),%rdi
{
  405c3d:	48 83 ec 08          	sub    $0x8,%rsp
  405c41:	e8 2a b9 ff ff       	callq  401570 <malloc@plt>
  if (!p)
  405c46:	48 85 c0             	test   %rax,%rax
  405c49:	74 1a                	je     405c65 <ximemdup0+0x35>
  result[s] = 0;
  405c4b:	42 c6 04 20 00       	movb   $0x0,(%rax,%r12,1)
  return memcpy (result, p, s);
}
  405c50:	48 83 c4 08          	add    $0x8,%rsp
  405c54:	4c 89 e2             	mov    %r12,%rdx
  405c57:	48 89 ee             	mov    %rbp,%rsi
  405c5a:	48 89 c7             	mov    %rax,%rdi
  405c5d:	5d                   	pop    %rbp
  405c5e:	41 5c                	pop    %r12
  405c60:	e9 db b8 ff ff       	jmpq   401540 <memcpy@plt>
    xalloc_die ();
  405c65:	e8 26 00 00 00       	callq  405c90 <xalloc_die>
  405c6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000405c70 <xstrdup>:

/* Clone STRING.  */

char *
xstrdup (char const *string)
{
  405c70:	55                   	push   %rbp
  405c71:	48 89 fd             	mov    %rdi,%rbp
  return xmemdup (string, strlen (string) + 1);
  405c74:	e8 b7 b7 ff ff       	callq  401430 <strlen@plt>
  405c79:	48 89 ef             	mov    %rbp,%rdi
}
  405c7c:	5d                   	pop    %rbp
  return xmemdup (string, strlen (string) + 1);
  405c7d:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405c81:	e9 2a ff ff ff       	jmpq   405bb0 <xmemdup>
  405c86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  405c8d:	00 00 00 

0000000000405c90 <xalloc_die>:
#include "gettext.h"
#define _(msgid) gettext (msgid)

void
xalloc_die (void)
{
  405c90:	48 83 ec 08          	sub    $0x8,%rsp
  error (exit_failure, 0, "%s", _("memory exhausted"));
  405c94:	ba 05 00 00 00       	mov    $0x5,%edx
  405c99:	48 8d 35 4f 3a 00 00 	lea    0x3a4f(%rip),%rsi        # 4096ef <version_etc_copyright+0x2f>
  405ca0:	31 ff                	xor    %edi,%edi
  405ca2:	e8 69 b7 ff ff       	callq  401410 <dcgettext@plt>
  405ca7:	8b 3d 4b 65 20 00    	mov    0x20654b(%rip),%edi        # 60c1f8 <exit_failure>
  405cad:	48 8d 15 61 2f 00 00 	lea    0x2f61(%rip),%rdx        # 408c15 <terminator+0x1c>
  405cb4:	31 f6                	xor    %esi,%esi
  405cb6:	48 89 c1             	mov    %rax,%rcx
  405cb9:	31 c0                	xor    %eax,%eax
  405cbb:	e8 60 b9 ff ff       	callq  401620 <error@plt>

  /* _Noreturn cannot be given to error, since it may return if
     its first argument is 0.  To help compilers understand the
     xalloc_die does not return, call abort.  Also, the abort is a
     safety feature if exit_failure is 0 (which shouldn't happen).  */
  abort ();
  405cc0:	e8 9b b6 ff ff       	callq  401360 <abort@plt>
  405cc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  405ccc:	00 00 00 
  405ccf:	90                   	nop

0000000000405cd0 <xstrtold>:
   CONVERT specifies the conversion function, e.g., strtod itself.  */

bool
XSTRTOD (char const *str, char const **ptr, DOUBLE *result,
         DOUBLE (*convert) (char const *, char **))
{
  405cd0:	41 56                	push   %r14
  405cd2:	49 89 ce             	mov    %rcx,%r14
  405cd5:	41 55                	push   %r13
  405cd7:	49 89 d5             	mov    %rdx,%r13
  405cda:	41 54                	push   %r12
  405cdc:	55                   	push   %rbp
  405cdd:	48 89 f5             	mov    %rsi,%rbp
  405ce0:	53                   	push   %rbx
  405ce1:	48 89 fb             	mov    %rdi,%rbx
  405ce4:	48 83 ec 10          	sub    $0x10,%rsp
  405ce8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  405cef:	00 00 
  405cf1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  405cf6:	31 c0                	xor    %eax,%eax
  DOUBLE val;
  char *terminator;
  bool ok = true;

  errno = 0;
  405cf8:	e8 73 b6 ff ff       	callq  401370 <__errno_location@plt>
  val = convert (str, &terminator);
  405cfd:	48 89 e6             	mov    %rsp,%rsi
  405d00:	48 89 df             	mov    %rbx,%rdi
  errno = 0;
  405d03:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  405d09:	49 89 c4             	mov    %rax,%r12
  val = convert (str, &terminator);
  405d0c:	41 ff d6             	callq  *%r14

  /* Having a non-zero terminator is an error only when PTR is NULL. */
  if (terminator == str || (ptr == NULL && *terminator != '\0'))
  405d0f:	48 8b 04 24          	mov    (%rsp),%rax
  405d13:	48 39 d8             	cmp    %rbx,%rax
  405d16:	74 70                	je     405d88 <xstrtold+0xb8>
  405d18:	48 85 ed             	test   %rbp,%rbp
  405d1b:	74 4b                	je     405d68 <xstrtold+0x98>
  else
    {
      /* Allow underflow (in which case CONVERT returns zero),
         but flag overflow as an error.  The user can decide
         to use the limits in RESULT upon ERANGE.  */
      if (val != 0 && errno == ERANGE)
  405d1d:	d9 ee                	fldz   
  405d1f:	d9 c9                	fxch   %st(1)
  405d21:	db e9                	fucomi %st(1),%st
  405d23:	dd d9                	fstp   %st(1)
  405d25:	7a 08                	jp     405d2f <xstrtold+0x5f>
  bool ok = true;
  405d27:	41 b8 01 00 00 00    	mov    $0x1,%r8d
      if (val != 0 && errno == ERANGE)
  405d2d:	74 0e                	je     405d3d <xstrtold+0x6d>
  405d2f:	41 83 3c 24 22       	cmpl   $0x22,(%r12)
  405d34:	41 0f 95 c0          	setne  %r8b
        ok = false;
    }

  if (ptr != NULL)
  405d38:	48 85 ed             	test   %rbp,%rbp
  405d3b:	74 04                	je     405d41 <xstrtold+0x71>
    *ptr = terminator;
  405d3d:	48 89 45 00          	mov    %rax,0x0(%rbp)

  *result = val;
  405d41:	41 db 7d 00          	fstpt  0x0(%r13)
  return ok;
}
  405d45:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  405d4a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  405d51:	00 00 
  405d53:	75 38                	jne    405d8d <xstrtold+0xbd>
  405d55:	48 83 c4 10          	add    $0x10,%rsp
  405d59:	44 89 c0             	mov    %r8d,%eax
  405d5c:	5b                   	pop    %rbx
  405d5d:	5d                   	pop    %rbp
  405d5e:	41 5c                	pop    %r12
  405d60:	41 5d                	pop    %r13
  405d62:	41 5e                	pop    %r14
  405d64:	c3                   	retq   
  405d65:	0f 1f 00             	nopl   (%rax)
    ok = false;
  405d68:	45 31 c0             	xor    %r8d,%r8d
  if (terminator == str || (ptr == NULL && *terminator != '\0'))
  405d6b:	80 38 00             	cmpb   $0x0,(%rax)
  405d6e:	75 d1                	jne    405d41 <xstrtold+0x71>
      if (val != 0 && errno == ERANGE)
  405d70:	d9 ee                	fldz   
  405d72:	d9 c9                	fxch   %st(1)
  405d74:	db e9                	fucomi %st(1),%st
  405d76:	dd d9                	fstp   %st(1)
  405d78:	7a b5                	jp     405d2f <xstrtold+0x5f>
  bool ok = true;
  405d7a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
      if (val != 0 && errno == ERANGE)
  405d80:	74 bf                	je     405d41 <xstrtold+0x71>
  405d82:	eb ab                	jmp    405d2f <xstrtold+0x5f>
  405d84:	0f 1f 40 00          	nopl   0x0(%rax)
    ok = false;
  405d88:	45 31 c0             	xor    %r8d,%r8d
  405d8b:	eb ab                	jmp    405d38 <xstrtold+0x68>
}
  405d8d:	e8 ae b6 ff ff       	callq  401440 <__stack_chk_fail@plt>
  405d92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  405d99:	00 00 00 
  405d9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000405da0 <rpl_asprintf>:

#include <stdarg.h>

int
asprintf (char **resultp, const char *format, ...)
{
  405da0:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  405da7:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  405dac:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  405db1:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  405db6:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  405dbb:	84 c0                	test   %al,%al
  405dbd:	74 37                	je     405df6 <rpl_asprintf+0x56>
  405dbf:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
  405dc4:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
  405dc9:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
  405dce:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
  405dd5:	00 
  405dd6:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
  405ddd:	00 
  405dde:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
  405de5:	00 
  405de6:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
  405ded:	00 
  405dee:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
  405df5:	00 
  405df6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  405dfd:	00 00 
  405dff:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  405e04:	31 c0                	xor    %eax,%eax
  va_list args;
  int result;

  va_start (args, format);
  405e06:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  405e0d:	00 
  result = vasprintf (resultp, format, args);
  405e0e:	48 89 e2             	mov    %rsp,%rdx
  va_start (args, format);
  405e11:	c7 04 24 10 00 00 00 	movl   $0x10,(%rsp)
  405e18:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  405e1d:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  405e22:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
  405e29:	00 
  405e2a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  result = vasprintf (resultp, format, args);
  405e2f:	e8 2c 00 00 00       	callq  405e60 <rpl_vasprintf>
  va_end (args);
  return result;
}
  405e34:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  405e39:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  405e40:	00 00 
  405e42:	75 08                	jne    405e4c <rpl_asprintf+0xac>
  405e44:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  405e4b:	c3                   	retq   
  405e4c:	e8 ef b5 ff ff       	callq  401440 <__stack_chk_fail@plt>
  405e51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  405e58:	00 00 00 
  405e5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000405e60 <rpl_vasprintf>:

#include "vasnprintf.h"

int
vasprintf (char **resultp, const char *format, va_list args)
{
  405e60:	53                   	push   %rbx
  405e61:	49 89 f0             	mov    %rsi,%r8
  405e64:	48 89 fb             	mov    %rdi,%rbx
  405e67:	48 89 d1             	mov    %rdx,%rcx
  size_t length;
  char *result = vasnprintf (NULL, &length, format, args);
  405e6a:	31 ff                	xor    %edi,%edi
  405e6c:	4c 89 c2             	mov    %r8,%rdx
{
  405e6f:	48 83 ec 10          	sub    $0x10,%rsp
  405e73:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  405e7a:	00 00 
  405e7c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  405e81:	31 c0                	xor    %eax,%eax
  char *result = vasnprintf (NULL, &length, format, args);
  405e83:	48 89 e6             	mov    %rsp,%rsi
  405e86:	e8 75 03 00 00       	callq  406200 <vasnprintf>
  if (result == NULL)
  405e8b:	48 85 c0             	test   %rax,%rax
  405e8e:	74 42                	je     405ed2 <rpl_vasprintf+0x72>
    return -1;

  if (length > INT_MAX)
  405e90:	48 8b 14 24          	mov    (%rsp),%rdx
  405e94:	48 81 fa ff ff ff 7f 	cmp    $0x7fffffff,%rdx
  405e9b:	77 1b                	ja     405eb8 <rpl_vasprintf+0x58>
      free (result);
      errno = EOVERFLOW;
      return -1;
    }

  *resultp = result;
  405e9d:	48 89 03             	mov    %rax,(%rbx)
  /* Return the number of resulting bytes, excluding the trailing NUL.  */
  return length;
  405ea0:	89 d0                	mov    %edx,%eax
}
  405ea2:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  405ea7:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  405eae:	00 00 
  405eb0:	75 27                	jne    405ed9 <rpl_vasprintf+0x79>
  405eb2:	48 83 c4 10          	add    $0x10,%rsp
  405eb6:	5b                   	pop    %rbx
  405eb7:	c3                   	retq   
      free (result);
  405eb8:	48 89 c7             	mov    %rax,%rdi
  405ebb:	e8 10 d5 ff ff       	callq  4033d0 <rpl_free>
      errno = EOVERFLOW;
  405ec0:	e8 ab b4 ff ff       	callq  401370 <__errno_location@plt>
  405ec5:	c7 00 4b 00 00 00    	movl   $0x4b,(%rax)
      return -1;
  405ecb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  405ed0:	eb d0                	jmp    405ea2 <rpl_vasprintf+0x42>
    return -1;
  405ed2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  405ed7:	eb c9                	jmp    405ea2 <rpl_vasprintf+0x42>
}
  405ed9:	e8 62 b5 ff ff       	callq  401440 <__stack_chk_fail@plt>
  405ede:	66 90                	xchg   %ax,%ax

0000000000405ee0 <c_strtold>:
{
  405ee0:	41 55                	push   %r13
  405ee2:	41 54                	push   %r12
  405ee4:	49 89 fc             	mov    %rdi,%r12
  405ee7:	55                   	push   %rbp
  405ee8:	48 89 f5             	mov    %rsi,%rbp
  405eeb:	48 83 ec 10          	sub    $0x10,%rsp
  if (!c_locale_cache)
  405eef:	48 8b 05 42 65 20 00 	mov    0x206542(%rip),%rax        # 60c438 <c_locale_cache>
  405ef6:	48 85 c0             	test   %rax,%rax
  405ef9:	74 7d                	je     405f78 <c_strtold+0x98>
  return c_locale_cache;
  405efb:	48 8b 3d 36 65 20 00 	mov    0x206536(%rip),%rdi        # 60c438 <c_locale_cache>
  if (!locale)
  405f02:	48 85 ff             	test   %rdi,%rdi
  405f05:	74 49                	je     405f50 <c_strtold+0x70>
  locale_t old_locale = uselocale (locale);
  405f07:	e8 54 b6 ff ff       	callq  401560 <uselocale@plt>
  405f0c:	49 89 c5             	mov    %rax,%r13
  if (old_locale == (locale_t)0)
  405f0f:	48 85 c0             	test   %rax,%rax
  405f12:	74 3c                	je     405f50 <c_strtold+0x70>
  r = STRTOD (nptr, endptr);
  405f14:	4c 89 e7             	mov    %r12,%rdi
  405f17:	48 89 ee             	mov    %rbp,%rsi
  405f1a:	e8 f1 b6 ff ff       	callq  401610 <strtold@plt>
  405f1f:	db 3c 24             	fstpt  (%rsp)
  int saved_errno = errno;
  405f22:	e8 49 b4 ff ff       	callq  401370 <__errno_location@plt>
  if (uselocale (old_locale) == (locale_t)0)
  405f27:	4c 89 ef             	mov    %r13,%rdi
  int saved_errno = errno;
  405f2a:	44 8b 20             	mov    (%rax),%r12d
  405f2d:	48 89 c5             	mov    %rax,%rbp
  if (uselocale (old_locale) == (locale_t)0)
  405f30:	e8 2b b6 ff ff       	callq  401560 <uselocale@plt>
  405f35:	48 85 c0             	test   %rax,%rax
  405f38:	0f 84 a5 b7 ff ff    	je     4016e3 <c_strtold.cold>
  errno = saved_errno;
  405f3e:	44 89 65 00          	mov    %r12d,0x0(%rbp)
  405f42:	db 2c 24             	fldt   (%rsp)
    }

#endif

  return r;
}
  405f45:	48 83 c4 10          	add    $0x10,%rsp
  405f49:	5d                   	pop    %rbp
  405f4a:	41 5c                	pop    %r12
  405f4c:	41 5d                	pop    %r13
  405f4e:	c3                   	retq   
  405f4f:	90                   	nop
      if (endptr)
  405f50:	48 85 ed             	test   %rbp,%rbp
  405f53:	74 13                	je     405f68 <c_strtold+0x88>
        *endptr = (char *) nptr;
  405f55:	4c 89 65 00          	mov    %r12,0x0(%rbp)
}
  405f59:	48 83 c4 10          	add    $0x10,%rsp
      return 0; /* errno is set here */
  405f5d:	d9 ee                	fldz   
}
  405f5f:	5d                   	pop    %rbp
  405f60:	41 5c                	pop    %r12
  405f62:	41 5d                	pop    %r13
  405f64:	c3                   	retq   
  405f65:	0f 1f 00             	nopl   (%rax)
  405f68:	48 83 c4 10          	add    $0x10,%rsp
      return 0; /* errno is set here */
  405f6c:	d9 ee                	fldz   
}
  405f6e:	5d                   	pop    %rbp
  405f6f:	41 5c                	pop    %r12
  405f71:	41 5d                	pop    %r13
  405f73:	c3                   	retq   
  405f74:	0f 1f 40 00          	nopl   0x0(%rax)
    c_locale_cache = newlocale (LC_ALL_MASK, "C", (locale_t) 0);
  405f78:	31 d2                	xor    %edx,%edx
  405f7a:	48 8d 35 81 25 00 00 	lea    0x2581(%rip),%rsi        # 408502 <_IO_stdin_used+0x1a2>
  405f81:	bf bf 1f 00 00       	mov    $0x1fbf,%edi
  405f86:	e8 f5 b4 ff ff       	callq  401480 <newlocale@plt>
  405f8b:	48 89 05 a6 64 20 00 	mov    %rax,0x2064a6(%rip)        # 60c438 <c_locale_cache>
  405f92:	e9 64 ff ff ff       	jmpq   405efb <c_strtold+0x1b>
  405f97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  405f9e:	00 00 

0000000000405fa0 <close_stream>:
   that writes to STREAM -- just let the internal stream state record
   the failure.  That's what the ferror test is checking below.  */

int
close_stream (FILE *stream)
{
  405fa0:	41 54                	push   %r12
  405fa2:	55                   	push   %rbp
  405fa3:	48 89 fd             	mov    %rdi,%rbp
  405fa6:	53                   	push   %rbx
  const bool some_pending = (__fpending (stream) != 0);
  405fa7:	e8 04 b4 ff ff       	callq  4013b0 <__fpending@plt>

/* Faster versions when locking is not required.  */
__STDIO_INLINE int
__NTH (ferror_unlocked (FILE *__stream))
{
  return _IO_ferror_unlocked (__stream);
  405fac:	8b 5d 00             	mov    0x0(%rbp),%ebx
  const bool prev_fail = (ferror (stream) != 0);
  const bool fclose_fail = (fclose (stream) != 0);
  405faf:	48 89 ef             	mov    %rbp,%rdi
  const bool some_pending = (__fpending (stream) != 0);
  405fb2:	49 89 c4             	mov    %rax,%r12
  405fb5:	83 e3 20             	and    $0x20,%ebx
  const bool fclose_fail = (fclose (stream) != 0);
  405fb8:	e8 43 00 00 00       	callq  406000 <rpl_fclose>
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
  405fbd:	85 db                	test   %ebx,%ebx
  405fbf:	75 1f                	jne    405fe0 <close_stream+0x40>
  405fc1:	85 c0                	test   %eax,%eax
  405fc3:	74 15                	je     405fda <close_stream+0x3a>
  405fc5:	4d 85 e4             	test   %r12,%r12
  405fc8:	75 2c                	jne    405ff6 <close_stream+0x56>
  405fca:	e8 a1 b3 ff ff       	callq  401370 <__errno_location@plt>
  405fcf:	83 38 09             	cmpl   $0x9,(%rax)
  405fd2:	0f 95 c0             	setne  %al
  405fd5:	0f b6 c0             	movzbl %al,%eax
  405fd8:	f7 d8                	neg    %eax
        errno = 0;
      return EOF;
    }

  return 0;
}
  405fda:	5b                   	pop    %rbx
  405fdb:	5d                   	pop    %rbp
  405fdc:	41 5c                	pop    %r12
  405fde:	c3                   	retq   
  405fdf:	90                   	nop
      if (! fclose_fail)
  405fe0:	85 c0                	test   %eax,%eax
  405fe2:	75 12                	jne    405ff6 <close_stream+0x56>
        errno = 0;
  405fe4:	e8 87 b3 ff ff       	callq  401370 <__errno_location@plt>
  405fe9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      return EOF;
  405fef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  405ff4:	eb e4                	jmp    405fda <close_stream+0x3a>
  405ff6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  405ffb:	eb dd                	jmp    405fda <close_stream+0x3a>
  405ffd:	0f 1f 00             	nopl   (%rax)

0000000000406000 <rpl_fclose>:

/* Override fclose() to call the overridden fflush() or close().  */

int
rpl_fclose (FILE *fp)
{
  406000:	41 54                	push   %r12
  406002:	55                   	push   %rbp
  406003:	48 89 fd             	mov    %rdi,%rbp
  406006:	53                   	push   %rbx
  int saved_errno = 0;
  int fd;
  int result = 0;

  /* Don't change behavior on memstreams.  */
  fd = fileno (fp);
  406007:	e8 44 b5 ff ff       	callq  401550 <fileno@plt>
  if (fd < 0)
    return fclose_nothrow (fp);
  40600c:	48 89 ef             	mov    %rbp,%rdi
  if (fd < 0)
  40600f:	85 c0                	test   %eax,%eax
  406011:	78 54                	js     406067 <rpl_fclose+0x67>

  /* We only need to flush the file if it is not reading or if it is
     seekable.  This only guarantees the file position of input files
     if the fflush module is also in use.  */
  if ((!freading (fp) || lseek (fileno (fp), 0, SEEK_CUR) != -1)
  406013:	e8 88 b5 ff ff       	callq  4015a0 <__freading@plt>
  406018:	85 c0                	test   %eax,%eax
  40601a:	75 2c                	jne    406048 <rpl_fclose+0x48>
      && fflush (fp))
  40601c:	48 89 ef             	mov    %rbp,%rdi
  40601f:	e8 5c 00 00 00       	callq  406080 <rpl_fflush>
  406024:	85 c0                	test   %eax,%eax
  406026:	74 3c                	je     406064 <rpl_fclose+0x64>
    saved_errno = errno;
  406028:	e8 43 b3 ff ff       	callq  401370 <__errno_location@plt>
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
  40602d:	48 89 ef             	mov    %rbp,%rdi
    saved_errno = errno;
  406030:	44 8b 20             	mov    (%rax),%r12d
  406033:	48 89 c3             	mov    %rax,%rbx
  result = fclose_nothrow (fp);
  406036:	e8 b5 b3 ff ff       	callq  4013f0 <fclose@plt>
# endif

#endif /* !WINDOWS_SOCKETS */

  if (saved_errno != 0)
  40603b:	45 85 e4             	test   %r12d,%r12d
  40603e:	75 30                	jne    406070 <rpl_fclose+0x70>
      errno = saved_errno;
      result = EOF;
    }

  return result;
}
  406040:	5b                   	pop    %rbx
  406041:	5d                   	pop    %rbp
  406042:	41 5c                	pop    %r12
  406044:	c3                   	retq   
  406045:	0f 1f 00             	nopl   (%rax)
  if ((!freading (fp) || lseek (fileno (fp), 0, SEEK_CUR) != -1)
  406048:	48 89 ef             	mov    %rbp,%rdi
  40604b:	e8 00 b5 ff ff       	callq  401550 <fileno@plt>
  406050:	31 f6                	xor    %esi,%esi
  406052:	ba 01 00 00 00       	mov    $0x1,%edx
  406057:	89 c7                	mov    %eax,%edi
  406059:	e8 42 b4 ff ff       	callq  4014a0 <lseek@plt>
  40605e:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  406062:	75 b8                	jne    40601c <rpl_fclose+0x1c>
  result = fclose_nothrow (fp);
  406064:	48 89 ef             	mov    %rbp,%rdi
}
  406067:	5b                   	pop    %rbx
  406068:	5d                   	pop    %rbp
  406069:	41 5c                	pop    %r12
  result = fclose_nothrow (fp);
  40606b:	e9 80 b3 ff ff       	jmpq   4013f0 <fclose@plt>
      errno = saved_errno;
  406070:	44 89 23             	mov    %r12d,(%rbx)
      result = EOF;
  406073:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  406078:	eb c6                	jmp    406040 <rpl_fclose+0x40>
  40607a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000406080 <rpl_fflush>:

/* Flush all pending data on STREAM according to POSIX rules.  Both
   output and seekable input streams are supported.  */
int
rpl_fflush (FILE *stream)
{
  406080:	55                   	push   %rbp
  406081:	48 89 fd             	mov    %rdi,%rbp
     fflush in this case.

     We test ! freading (stream) here, rather than fwriting (stream), because
     what we need to know is whether the stream holds a "read buffer", and on
     mingw this is indicated by _IOREAD, regardless of _IOWRT.  */
  if (stream == NULL || ! freading (stream))
  406084:	48 85 ff             	test   %rdi,%rdi
  406087:	74 12                	je     40609b <rpl_fflush+0x1b>
  406089:	e8 12 b5 ff ff       	callq  4015a0 <__freading@plt>
  40608e:	85 c0                	test   %eax,%eax
  406090:	74 09                	je     40609b <rpl_fflush+0x1b>
  if (fp->_flags & _IO_IN_BACKUP)
  406092:	f7 45 00 00 01 00 00 	testl  $0x100,0x0(%rbp)
  406099:	75 0d                	jne    4060a8 <rpl_fflush+0x28>
#if defined _IO_EOF_SEEN || defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1
  /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream);

  return fflush (stream);
  40609b:	48 89 ef             	mov    %rbp,%rdi
    return 0;

# endif
  }
#endif
}
  40609e:	5d                   	pop    %rbp
  return fflush (stream);
  40609f:	e9 dc b4 ff ff       	jmpq   401580 <fflush@plt>
  4060a4:	0f 1f 40 00          	nopl   0x0(%rax)
    fseeko (fp, 0, SEEK_CUR);
  4060a8:	48 89 ef             	mov    %rbp,%rdi
  4060ab:	ba 01 00 00 00       	mov    $0x1,%edx
  4060b0:	31 f6                	xor    %esi,%esi
  4060b2:	e8 09 00 00 00       	callq  4060c0 <rpl_fseeko>
  return fflush (stream);
  4060b7:	48 89 ef             	mov    %rbp,%rdi
}
  4060ba:	5d                   	pop    %rbp
  return fflush (stream);
  4060bb:	e9 c0 b4 ff ff       	jmpq   401580 <fflush@plt>

00000000004060c0 <rpl_fseeko>:
#  define fseeko _fseeki64
# else /* mingw before msvcrt8.0 */
#  define fseeko fseeko64
# endif
#endif
{
  4060c0:	55                   	push   %rbp
  4060c1:	48 89 fd             	mov    %rdi,%rbp
  4060c4:	48 83 ec 10          	sub    $0x10,%rsp
#endif

  /* These tests are based on fpurge.c.  */
#if defined _IO_EOF_SEEN || defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1
  /* GNU libc, BeOS, Haiku, Linux libc5 */
  if (fp->_IO_read_end == fp->_IO_read_ptr
  4060c8:	48 8b 47 08          	mov    0x8(%rdi),%rax
  4060cc:	48 39 47 10          	cmp    %rax,0x10(%rdi)
  4060d0:	74 0e                	je     4060e0 <rpl_fseeko+0x20>
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
}
  4060d2:	48 83 c4 10          	add    $0x10,%rsp
  return fseeko (fp, offset, whence);
  4060d6:	48 89 ef             	mov    %rbp,%rdi
}
  4060d9:	5d                   	pop    %rbp
  return fseeko (fp, offset, whence);
  4060da:	e9 51 b5 ff ff       	jmpq   401630 <fseeko@plt>
  4060df:	90                   	nop
      && fp->_IO_write_ptr == fp->_IO_write_base
  4060e0:	48 8b 47 20          	mov    0x20(%rdi),%rax
  4060e4:	48 39 47 28          	cmp    %rax,0x28(%rdi)
  4060e8:	75 e8                	jne    4060d2 <rpl_fseeko+0x12>
      && fp->_IO_save_base == NULL)
  4060ea:	48 83 7f 48 00       	cmpq   $0x0,0x48(%rdi)
  4060ef:	75 e1                	jne    4060d2 <rpl_fseeko+0x12>
  4060f1:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  4060f5:	48 89 34 24          	mov    %rsi,(%rsp)
      off_t pos = lseek (fileno (fp), offset, whence);
  4060f9:	e8 52 b4 ff ff       	callq  401550 <fileno@plt>
  4060fe:	8b 54 24 0c          	mov    0xc(%rsp),%edx
  406102:	48 8b 34 24          	mov    (%rsp),%rsi
  406106:	89 c7                	mov    %eax,%edi
  406108:	e8 93 b3 ff ff       	callq  4014a0 <lseek@plt>
      if (pos == -1)
  40610d:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  406111:	74 13                	je     406126 <rpl_fseeko+0x66>
      fp->_flags &= ~_IO_EOF_SEEN;
  406113:	83 65 00 ef          	andl   $0xffffffef,0x0(%rbp)
      fp->_offset = pos;
  406117:	48 89 85 90 00 00 00 	mov    %rax,0x90(%rbp)
      return 0;
  40611e:	31 c0                	xor    %eax,%eax
}
  406120:	48 83 c4 10          	add    $0x10,%rsp
  406124:	5d                   	pop    %rbp
  406125:	c3                   	retq   
          return -1;
  406126:	83 c8 ff             	or     $0xffffffff,%eax
  406129:	eb f5                	jmp    406120 <rpl_fseeko+0x60>
  40612b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000406130 <locale_charset>:
#ifdef STATIC
STATIC
#endif
const char *
locale_charset (void)
{
  406130:	48 83 ec 08          	sub    $0x8,%rsp
#if HAVE_LANGINFO_CODESET || defined WINDOWS_NATIVE || defined OS2

# if HAVE_LANGINFO_CODESET

  /* Most systems support nl_langinfo (CODESET) nowadays.  */
  codeset = nl_langinfo (CODESET);
  406134:	bf 0e 00 00 00       	mov    $0xe,%edi
  406139:	e8 52 b4 ff ff       	callq  401590 <nl_langinfo@plt>
        codeset = resultbuf;
      }
    }
#  endif

  if (codeset == NULL)
  40613e:	48 85 c0             	test   %rax,%rax
  406141:	74 1d                	je     406160 <locale_charset+0x30>
# else
        /* Don't return an empty string.  GNU libc and GNU libiconv interpret
           the empty string as denoting "the locale's character encoding",
           thus GNU libiconv would call this function a second time.  */
        if (codeset[0] == '\0')
          codeset = "ASCII";
  406143:	80 38 00             	cmpb   $0x0,(%rax)
  406146:	48 8d 15 b3 35 00 00 	lea    0x35b3(%rip),%rdx        # 409700 <version_etc_copyright+0x40>
  40614d:	48 0f 44 c2          	cmove  %rdx,%rax
  if (strcmp (codeset, "UTF-8") == 0 && MB_CUR_MAX_L (uselocale (NULL)) <= 1)
    codeset = "ASCII";
#endif

  return codeset;
}
  406151:	48 83 c4 08          	add    $0x8,%rsp
  406155:	c3                   	retq   
  406156:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40615d:	00 00 00 
          codeset = "ASCII";
  406160:	48 8d 05 99 35 00 00 	lea    0x3599(%rip),%rax        # 409700 <version_etc_copyright+0x40>
}
  406167:	48 83 c4 08          	add    $0x8,%rsp
  40616b:	c3                   	retq   
  40616c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000406170 <rpl_mbrtowc>:

# undef mbrtowc

size_t
rpl_mbrtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
{
  406170:	41 55                	push   %r13
  406172:	49 89 f5             	mov    %rsi,%r13
  406175:	41 54                	push   %r12
  406177:	55                   	push   %rbp
  406178:	48 89 d5             	mov    %rdx,%rbp
  40617b:	53                   	push   %rbx
  40617c:	48 89 fb             	mov    %rdi,%rbx
  40617f:	48 83 ec 18          	sub    $0x18,%rsp
  406183:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40618a:	00 00 
  40618c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  406191:	31 c0                	xor    %eax,%eax
  if (n == 0)
    return (size_t) -2;
# endif

  if (! pwc)
    pwc = &wc;
  406193:	48 85 ff             	test   %rdi,%rdi
  406196:	48 8d 44 24 04       	lea    0x4(%rsp),%rax
  40619b:	48 0f 44 d8          	cmove  %rax,%rbx
# if MBRTOWC_STORES_INCOMPLETE_BUG
  ret = mbrtowc (&wc, s, n, ps);
  if (ret < (size_t) -2 && pwc != NULL)
    *pwc = wc;
# else
  ret = mbrtowc (pwc, s, n, ps);
  40619f:	48 89 df             	mov    %rbx,%rdi
  4061a2:	e8 b9 b2 ff ff       	callq  401460 <mbrtowc@plt>
  4061a7:	49 89 c4             	mov    %rax,%r12
  if (ret < (size_t) -2 && !*pwc)
    return 0;
# endif

# if MBRTOWC_IN_C_LOCALE_MAYBE_EILSEQ
  if ((size_t) -2 <= ret && n != 0 && ! hard_locale (LC_CTYPE))
  4061aa:	48 83 f8 fd          	cmp    $0xfffffffffffffffd,%rax
  4061ae:	76 05                	jbe    4061b5 <rpl_mbrtowc+0x45>
  4061b0:	48 85 ed             	test   %rbp,%rbp
  4061b3:	75 23                	jne    4061d8 <rpl_mbrtowc+0x68>
      return 1;
    }
# endif

  return ret;
}
  4061b5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4061ba:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4061c1:	00 00 
  4061c3:	75 2d                	jne    4061f2 <rpl_mbrtowc+0x82>
  4061c5:	48 83 c4 18          	add    $0x18,%rsp
  4061c9:	4c 89 e0             	mov    %r12,%rax
  4061cc:	5b                   	pop    %rbx
  4061cd:	5d                   	pop    %rbp
  4061ce:	41 5c                	pop    %r12
  4061d0:	41 5d                	pop    %r13
  4061d2:	c3                   	retq   
  4061d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  if ((size_t) -2 <= ret && n != 0 && ! hard_locale (LC_CTYPE))
  4061d8:	31 ff                	xor    %edi,%edi
  4061da:	e8 e1 0f 00 00       	callq  4071c0 <hard_locale>
  4061df:	84 c0                	test   %al,%al
  4061e1:	75 d2                	jne    4061b5 <rpl_mbrtowc+0x45>
      *pwc = uc;
  4061e3:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
      return 1;
  4061e8:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      *pwc = uc;
  4061ee:	89 03                	mov    %eax,(%rbx)
      return 1;
  4061f0:	eb c3                	jmp    4061b5 <rpl_mbrtowc+0x45>
}
  4061f2:	e8 49 b2 ff ff       	callq  401440 <__stack_chk_fail@plt>
  4061f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4061fe:	00 00 

0000000000406200 <vasnprintf>:
{
  406200:	55                   	push   %rbp
  406201:	48 89 e5             	mov    %rsp,%rbp
  406204:	41 57                	push   %r15
  406206:	41 56                	push   %r14
  if (PRINTF_PARSE (format, &d, &a) < 0)
  406208:	4c 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%r14
{
  40620f:	41 55                	push   %r13
  406211:	49 89 cd             	mov    %rcx,%r13
  406214:	41 54                	push   %r12
  406216:	53                   	push   %rbx
  406217:	48 89 d3             	mov    %rdx,%rbx
  if (PRINTF_PARSE (format, &d, &a) < 0)
  40621a:	4c 89 f2             	mov    %r14,%rdx
{
  40621d:	48 81 ec f8 03 00 00 	sub    $0x3f8,%rsp
  406224:	48 89 bd 18 fc ff ff 	mov    %rdi,-0x3e8(%rbp)
  if (PRINTF_PARSE (format, &d, &a) < 0)
  40622b:	48 89 df             	mov    %rbx,%rdi
{
  40622e:	48 89 b5 f8 fb ff ff 	mov    %rsi,-0x408(%rbp)
  if (PRINTF_PARSE (format, &d, &a) < 0)
  406235:	48 8d b5 40 fd ff ff 	lea    -0x2c0(%rbp),%rsi
{
  40623c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  406243:	00 00 
  406245:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  406249:	31 c0                	xor    %eax,%eax
  if (PRINTF_PARSE (format, &d, &a) < 0)
  40624b:	e8 d0 12 00 00       	callq  407520 <printf_parse>
  406250:	85 c0                	test   %eax,%eax
  406252:	0f 88 5b 03 00 00    	js     4065b3 <vasnprintf+0x3b3>
  if (PRINTF_FETCHARGS (args, &a) < 0)
  406258:	4c 89 f6             	mov    %r14,%rsi
  40625b:	4c 89 ef             	mov    %r13,%rdi
  40625e:	e8 9d 10 00 00       	callq  407300 <printf_fetchargs>
  406263:	85 c0                	test   %eax,%eax
  406265:	0f 88 75 03 00 00    	js     4065e0 <vasnprintf+0x3e0>

/* Sum of two sizes, with overflow check.  */
XSIZE_INLINE size_t ATTRIBUTE_PURE
xsum (size_t size1, size_t size2)
{
  size_t sum = size1 + size2;
  40626b:	48 8b 95 50 fd ff ff 	mov    -0x2b0(%rbp),%rdx
  406272:	48 8d 42 07          	lea    0x7(%rdx),%rax
  return (sum >= size1 ? sum : SIZE_MAX);
  406276:	48 83 fa f9          	cmp    $0xfffffffffffffff9,%rdx
  40627a:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  406281:	48 0f 43 c2          	cmovae %rdx,%rax
  size_t sum = size1 + size2;
  406285:	48 03 85 58 fd ff ff 	add    -0x2a8(%rbp),%rax
  40628c:	0f 82 e6 02 00 00    	jb     406578 <vasnprintf+0x378>
  406292:	48 89 c7             	mov    %rax,%rdi
  return (sum >= size1 ? sum : SIZE_MAX);
  406295:	45 31 c9             	xor    %r9d,%r9d
  406298:	48 83 c7 06          	add    $0x6,%rdi
  40629c:	41 0f 92 c1          	setb   %r9b
  4062a0:	0f 82 d2 02 00 00    	jb     406578 <vasnprintf+0x378>
    if (buf_neededlength < 4000 / sizeof (TCHAR_T))
  4062a6:	48 81 ff 9f 0f 00 00 	cmp    $0xf9f,%rdi
  4062ad:	0f 86 9d 08 00 00    	jbe    406b50 <vasnprintf+0x950>
  4062b3:	4c 89 8d 38 fc ff ff 	mov    %r9,-0x3c8(%rbp)
        if (size_overflow_p (buf_memsize))
  4062ba:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
  4062be:	0f 84 b4 02 00 00    	je     406578 <vasnprintf+0x378>
        buf = (TCHAR_T *) malloc (buf_memsize);
  4062c4:	e8 a7 b2 ff ff       	callq  401570 <malloc@plt>
  4062c9:	48 89 85 20 fc ff ff 	mov    %rax,-0x3e0(%rbp)
        if (buf == NULL)
  4062d0:	48 85 c0             	test   %rax,%rax
  4062d3:	0f 84 9f 02 00 00    	je     406578 <vasnprintf+0x378>
  4062d9:	48 89 85 f0 fb ff ff 	mov    %rax,-0x410(%rbp)
  4062e0:	4c 8b 8d 38 fc ff ff 	mov    -0x3c8(%rbp),%r9
    allocated = (resultbuf != NULL ? *lengthp : 0);
  4062e7:	45 31 e4             	xor    %r12d,%r12d
  4062ea:	48 83 bd 18 fc ff ff 	cmpq   $0x0,-0x3e8(%rbp)
  4062f1:	00 
  4062f2:	74 0a                	je     4062fe <vasnprintf+0xfe>
  4062f4:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
  4062fb:	4c 8b 20             	mov    (%rax),%r12
    for (cp = format, i = 0, dp = &d.dir[0]; ; cp = dp->dir_end, i++, dp++)
  4062fe:	4c 8b b5 48 fd ff ff 	mov    -0x2b8(%rbp),%r14
  406305:	49 89 d8             	mov    %rbx,%r8
  406308:	48 c7 85 00 fc ff ff 	movq   $0x0,-0x400(%rbp)
  40630f:	00 00 00 00 
  406313:	4c 8b bd 18 fc ff ff 	mov    -0x3e8(%rbp),%r15
        if (cp != dp->dir_start)
  40631a:	49 8b 1e             	mov    (%r14),%rbx
  40631d:	4c 39 c3             	cmp    %r8,%rbx
  406320:	0f 84 bf 08 00 00    	je     406be5 <vasnprintf+0x9e5>
            size_t n = dp->dir_start - cp;
  406326:	4c 29 c3             	sub    %r8,%rbx
  406329:	4d 89 cd             	mov    %r9,%r13
  40632c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  406333:	49 01 dd             	add    %rbx,%r13
  406336:	4c 0f 42 e8          	cmovb  %rax,%r13
            ENSURE_ALLOCATION (augmented_length);
  40633a:	4d 39 ec             	cmp    %r13,%r12
  40633d:	0f 83 ed 09 00 00    	jae    406d30 <vasnprintf+0xb30>
  406343:	4d 85 e4             	test   %r12,%r12
  406346:	0f 84 d4 09 00 00    	je     406d20 <vasnprintf+0xb20>
  40634c:	0f 88 ce 0a 00 00    	js     406e20 <vasnprintf+0xc20>
  406352:	4d 01 e4             	add    %r12,%r12
  406355:	4d 39 ec             	cmp    %r13,%r12
  406358:	4d 0f 42 e5          	cmovb  %r13,%r12
  40635c:	49 83 fc ff          	cmp    $0xffffffffffffffff,%r12
  406360:	0f 84 ba 0a 00 00    	je     406e20 <vasnprintf+0xc20>
  406366:	4c 3b bd 18 fc ff ff 	cmp    -0x3e8(%rbp),%r15
  40636d:	4c 89 85 30 fc ff ff 	mov    %r8,-0x3d0(%rbp)
  406374:	4c 89 8d 38 fc ff ff 	mov    %r9,-0x3c8(%rbp)
  40637b:	0f 84 2f 0a 00 00    	je     406db0 <vasnprintf+0xbb0>
  406381:	4c 89 e6             	mov    %r12,%rsi
  406384:	4c 89 ff             	mov    %r15,%rdi
  406387:	e8 34 b2 ff ff       	callq  4015c0 <realloc@plt>
  40638c:	4c 8b 8d 38 fc ff ff 	mov    -0x3c8(%rbp),%r9
  406393:	4c 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%r8
  40639a:	48 85 c0             	test   %rax,%rax
  40639d:	48 89 c1             	mov    %rax,%rcx
  4063a0:	0f 84 7a 0a 00 00    	je     406e20 <vasnprintf+0xc20>
                DCHAR_CPY (result + length, (const DCHAR_T *) cp, n);
  4063a6:	4a 8d 3c 09          	lea    (%rcx,%r9,1),%rdi
  4063aa:	48 89 da             	mov    %rbx,%rdx
  4063ad:	4c 89 c6             	mov    %r8,%rsi
  4063b0:	48 89 8d 38 fc ff ff 	mov    %rcx,-0x3c8(%rbp)
  4063b7:	e8 84 b1 ff ff       	callq  401540 <memcpy@plt>
                length = augmented_length;
  4063bc:	48 8b 8d 38 fc ff ff 	mov    -0x3c8(%rbp),%rcx
        if (i == d.count)
  4063c3:	48 8b 85 00 fc ff ff 	mov    -0x400(%rbp),%rax
  4063ca:	48 39 85 40 fd ff ff 	cmp    %rax,-0x2c0(%rbp)
  4063d1:	0f 84 37 0c 00 00    	je     40700e <vasnprintf+0xe0e>
        if (dp->conversion == '%')
  4063d7:	41 0f b6 56 48       	movzbl 0x48(%r14),%edx
  4063dc:	49 8b 46 50          	mov    0x50(%r14),%rax
  4063e0:	80 fa 25             	cmp    $0x25,%dl
  4063e3:	0f 84 af 08 00 00    	je     406c98 <vasnprintf+0xa98>
            if (!(dp->arg_index != ARG_NONE))
  4063e9:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  4063ed:	0f 84 fa b2 ff ff    	je     4016ed <vasnprintf.cold+0x5>
            if (dp->conversion == 'n')
  4063f3:	4c 8b 85 58 fc ff ff 	mov    -0x3a8(%rbp),%r8
  4063fa:	48 c1 e0 05          	shl    $0x5,%rax
  4063fe:	49 89 c7             	mov    %rax,%r15
  406401:	4d 01 c7             	add    %r8,%r15
  406404:	41 8b 1f             	mov    (%r15),%ebx
  406407:	80 fa 6e             	cmp    $0x6e,%dl
  40640a:	0f 84 88 07 00 00    	je     406b98 <vasnprintf+0x998>
              }
#endif
            else
              {
                arg_type type = a.arg[dp->arg_index].type;
                int flags = dp->flags;
  406410:	41 8b 46 10          	mov    0x10(%r14),%eax
#endif

                /* Construct the format string for calling snprintf or
                   sprintf.  */
                fbp = buf;
                *fbp++ = '%';
  406414:	48 8b 95 20 fc ff ff 	mov    -0x3e0(%rbp),%rdx
                int prefixes[2] IF_LINT (= { 0 });
  40641b:	48 c7 85 48 fc ff ff 	movq   $0x0,-0x3b8(%rbp)
  406422:	00 00 00 00 
                *fbp++ = '%';
  406426:	c6 02 25             	movb   $0x25,(%rdx)
#if NEED_PRINTF_FLAG_GROUPING
                /* The underlying implementation doesn't support the ' flag.
                   Produce no grouping characters in this case; this is
                   acceptable because the grouping is locale dependent.  */
#else
                if (flags & FLAG_GROUP)
  406429:	a8 01                	test   $0x1,%al
  40642b:	0f 85 0f 09 00 00    	jne    406d40 <vasnprintf+0xb40>
                *fbp++ = '%';
  406431:	48 83 c2 01          	add    $0x1,%rdx
  406435:	48 89 95 38 fc ff ff 	mov    %rdx,-0x3c8(%rbp)
                  *fbp++ = '\'';
#endif
                if (flags & FLAG_LEFT)
  40643c:	a8 02                	test   $0x2,%al
  40643e:	74 15                	je     406455 <vasnprintf+0x255>
                  *fbp++ = '-';
  406440:	48 8b b5 38 fc ff ff 	mov    -0x3c8(%rbp),%rsi
  406447:	48 8d 56 01          	lea    0x1(%rsi),%rdx
  40644b:	c6 06 2d             	movb   $0x2d,(%rsi)
  40644e:	48 89 95 38 fc ff ff 	mov    %rdx,-0x3c8(%rbp)
                if (flags & FLAG_SHOWSIGN)
  406455:	a8 04                	test   $0x4,%al
  406457:	74 15                	je     40646e <vasnprintf+0x26e>
                  *fbp++ = '+';
  406459:	48 8b 95 38 fc ff ff 	mov    -0x3c8(%rbp),%rdx
  406460:	c6 02 2b             	movb   $0x2b,(%rdx)
  406463:	48 83 c2 01          	add    $0x1,%rdx
  406467:	48 89 95 38 fc ff ff 	mov    %rdx,-0x3c8(%rbp)
                if (flags & FLAG_SPACE)
  40646e:	a8 08                	test   $0x8,%al
  406470:	74 15                	je     406487 <vasnprintf+0x287>
                  *fbp++ = ' ';
  406472:	48 8b b5 38 fc ff ff 	mov    -0x3c8(%rbp),%rsi
  406479:	48 8d 56 01          	lea    0x1(%rsi),%rdx
  40647d:	c6 06 20             	movb   $0x20,(%rsi)
  406480:	48 89 95 38 fc ff ff 	mov    %rdx,-0x3c8(%rbp)
                if (flags & FLAG_ALT)
  406487:	a8 10                	test   $0x10,%al
  406489:	74 15                	je     4064a0 <vasnprintf+0x2a0>
                  *fbp++ = '#';
  40648b:	48 8b 95 38 fc ff ff 	mov    -0x3c8(%rbp),%rdx
  406492:	48 8d 72 01          	lea    0x1(%rdx),%rsi
  406496:	c6 02 23             	movb   $0x23,(%rdx)
  406499:	48 89 b5 38 fc ff ff 	mov    %rsi,-0x3c8(%rbp)
#if __GLIBC__ >= 2 && !defined __UCLIBC__
                if (flags & FLAG_LOCALIZED)
  4064a0:	a8 40                	test   $0x40,%al
  4064a2:	74 15                	je     4064b9 <vasnprintf+0x2b9>
                  *fbp++ = 'I';
  4064a4:	48 8b b5 38 fc ff ff 	mov    -0x3c8(%rbp),%rsi
  4064ab:	48 8d 7e 01          	lea    0x1(%rsi),%rdi
  4064af:	c6 06 49             	movb   $0x49,(%rsi)
  4064b2:	48 89 bd 38 fc ff ff 	mov    %rdi,-0x3c8(%rbp)
#endif
                if (!pad_ourselves)
                  {
                    if (flags & FLAG_ZERO)
  4064b9:	a8 20                	test   $0x20,%al
  4064bb:	74 15                	je     4064d2 <vasnprintf+0x2d2>
                      *fbp++ = '0';
  4064bd:	48 8b 85 38 fc ff ff 	mov    -0x3c8(%rbp),%rax
  4064c4:	c6 00 30             	movb   $0x30,(%rax)
  4064c7:	48 83 c0 01          	add    $0x1,%rax
  4064cb:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
                    if (dp->width_start != dp->width_end)
  4064d2:	49 8b 76 18          	mov    0x18(%r14),%rsi
  4064d6:	49 8b 46 20          	mov    0x20(%r14),%rax
  4064da:	48 39 c6             	cmp    %rax,%rsi
  4064dd:	74 38                	je     406517 <vasnprintf+0x317>
                      {
                        size_t n = dp->width_end - dp->width_start;
  4064df:	48 29 f0             	sub    %rsi,%rax
  4064e2:	48 8b bd 38 fc ff ff 	mov    -0x3c8(%rbp),%rdi
  4064e9:	48 89 8d 28 fc ff ff 	mov    %rcx,-0x3d8(%rbp)
  4064f0:	48 89 c2             	mov    %rax,%rdx
  4064f3:	4c 89 85 30 fc ff ff 	mov    %r8,-0x3d0(%rbp)
  4064fa:	49 89 c7             	mov    %rax,%r15
  4064fd:	e8 3e b0 ff ff       	callq  401540 <memcpy@plt>
                        /* The width specification is known to consist only
                           of standard ASCII characters.  */
                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))
                          {
                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));
                            fbp += n;
  406502:	4c 01 bd 38 fc ff ff 	add    %r15,-0x3c8(%rbp)
  406509:	48 8b 8d 28 fc ff ff 	mov    -0x3d8(%rbp),%rcx
  406510:	4c 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%r8
                          }
                      }
                  }
                if (!prec_ourselves)
                  {
                    if (dp->precision_start != dp->precision_end)
  406517:	49 8b 76 30          	mov    0x30(%r14),%rsi
  40651b:	49 8b 46 38          	mov    0x38(%r14),%rax
  40651f:	48 39 c6             	cmp    %rax,%rsi
  406522:	74 38                	je     40655c <vasnprintf+0x35c>
                      {
                        size_t n = dp->precision_end - dp->precision_start;
  406524:	48 29 f0             	sub    %rsi,%rax
  406527:	48 8b bd 38 fc ff ff 	mov    -0x3c8(%rbp),%rdi
  40652e:	48 89 8d 28 fc ff ff 	mov    %rcx,-0x3d8(%rbp)
  406535:	48 89 c2             	mov    %rax,%rdx
  406538:	4c 89 85 30 fc ff ff 	mov    %r8,-0x3d0(%rbp)
  40653f:	49 89 c7             	mov    %rax,%r15
  406542:	e8 f9 af ff ff       	callq  401540 <memcpy@plt>
                        /* The precision specification is known to consist only
                           of standard ASCII characters.  */
                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))
                          {
                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));
                            fbp += n;
  406547:	4c 01 bd 38 fc ff ff 	add    %r15,-0x3c8(%rbp)
  40654e:	48 8b 8d 28 fc ff ff 	mov    -0x3d8(%rbp),%rcx
  406555:	4c 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%r8
                            while (--n > 0);
                          }
                      }
                  }

                switch (type)
  40655c:	8d 43 f9             	lea    -0x7(%rbx),%eax
  40655f:	83 f8 09             	cmp    $0x9,%eax
  406562:	0f 87 b2 00 00 00    	ja     40661a <vasnprintf+0x41a>
  406568:	48 8d 35 99 31 00 00 	lea    0x3199(%rip),%rsi        # 409708 <version_etc_copyright+0x48>
  40656f:	48 63 04 86          	movslq (%rsi,%rax,4),%rax
  406573:	48 01 f0             	add    %rsi,%rax
  406576:	ff e0                	jmpq   *%rax
    CLEANUP ();
    return NULL;
  }

 out_of_memory_1:
  errno = ENOMEM;
  406578:	e8 f3 ad ff ff       	callq  401370 <__errno_location@plt>
  40657d:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
 fail_1_with_EINVAL:
  errno = EINVAL;
  goto fail_1_with_errno;

 fail_1_with_errno:
  CLEANUP ();
  406583:	48 8b bd 48 fd ff ff 	mov    -0x2b8(%rbp),%rdi
  40658a:	48 8d 85 60 fd ff ff 	lea    -0x2a0(%rbp),%rax
  406591:	48 39 c7             	cmp    %rax,%rdi
  406594:	74 05                	je     40659b <vasnprintf+0x39b>
  406596:	e8 35 ce ff ff       	callq  4033d0 <rpl_free>
  40659b:	48 8b bd 58 fc ff ff 	mov    -0x3a8(%rbp),%rdi
  4065a2:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  4065a9:	48 39 c7             	cmp    %rax,%rdi
  4065ac:	74 05                	je     4065b3 <vasnprintf+0x3b3>
  4065ae:	e8 1d ce ff ff       	callq  4033d0 <rpl_free>
  return NULL;
  4065b3:	45 31 db             	xor    %r11d,%r11d
}
  4065b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4065ba:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4065c1:	00 00 
  4065c3:	0f 85 a5 0b 00 00    	jne    40716e <vasnprintf+0xf6e>
  4065c9:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  4065cd:	4c 89 d8             	mov    %r11,%rax
  4065d0:	5b                   	pop    %rbx
  4065d1:	41 5c                	pop    %r12
  4065d3:	41 5d                	pop    %r13
  4065d5:	41 5e                	pop    %r14
  4065d7:	41 5f                	pop    %r15
  4065d9:	5d                   	pop    %rbp
  4065da:	c3                   	retq   
  4065db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  errno = EINVAL;
  4065e0:	e8 8b ad ff ff       	callq  401370 <__errno_location@plt>
  4065e5:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
  goto fail_1_with_errno;
  4065eb:	eb 96                	jmp    406583 <vasnprintf+0x383>
  4065ed:	0f 1f 00             	nopl   (%rax)
                    *fbp++ = 'l';
  4065f0:	48 8b 85 38 fc ff ff 	mov    -0x3c8(%rbp),%rax
  4065f7:	c6 00 6c             	movb   $0x6c,(%rax)
  4065fa:	48 83 c0 01          	add    $0x1,%rax
  4065fe:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
                    *fbp++ = 'l';
  406605:	48 8b 85 38 fc ff ff 	mov    -0x3c8(%rbp),%rax
  40660c:	c6 00 6c             	movb   $0x6c,(%rax)
  40660f:	48 83 c0 01          	add    $0x1,%rax
  406613:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
                  *fbp = dp->conversion;
  40661a:	41 0f b6 46 48       	movzbl 0x48(%r14),%eax
  40661f:	48 8b 95 38 fc ff ff 	mov    -0x3c8(%rbp),%rdx
  406626:	88 02                	mov    %al,(%rdx)
                fbp[1] = '\0';
  406628:	c6 42 01 00          	movb   $0x0,0x1(%rdx)
                if (!pad_ourselves && dp->width_arg_index != ARG_NONE)
  40662c:	49 8b 46 28          	mov    0x28(%r14),%rax
  406630:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  406634:	0f 84 66 07 00 00    	je     406da0 <vasnprintf+0xba0>
                    if (!(a.arg[dp->width_arg_index].type == TYPE_INT))
  40663a:	48 c1 e0 05          	shl    $0x5,%rax
  40663e:	4c 01 c0             	add    %r8,%rax
  406641:	83 38 05             	cmpl   $0x5,(%rax)
  406644:	0f 85 a3 b0 ff ff    	jne    4016ed <vasnprintf.cold+0x5>
                    prefixes[prefix_count++] = a.arg[dp->width_arg_index].a.a_int;
  40664a:	c7 85 28 fc ff ff 01 	movl   $0x1,-0x3d8(%rbp)
  406651:	00 00 00 
  406654:	8b 40 10             	mov    0x10(%rax),%eax
  406657:	89 85 48 fc ff ff    	mov    %eax,-0x3b8(%rbp)
                if (!prec_ourselves && dp->precision_arg_index != ARG_NONE)
  40665d:	49 8b 46 40          	mov    0x40(%r14),%rax
  406661:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  406665:	74 2b                	je     406692 <vasnprintf+0x492>
                    if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))
  406667:	48 c1 e0 05          	shl    $0x5,%rax
  40666b:	49 01 c0             	add    %rax,%r8
  40666e:	41 83 38 05          	cmpl   $0x5,(%r8)
  406672:	0f 85 75 b0 ff ff    	jne    4016ed <vasnprintf.cold+0x5>
                    prefixes[prefix_count++] = a.arg[dp->precision_arg_index].a.a_int;
  406678:	8b 85 28 fc ff ff    	mov    -0x3d8(%rbp),%eax
  40667e:	41 8b 50 10          	mov    0x10(%r8),%edx
  406682:	89 94 85 48 fc ff ff 	mov    %edx,-0x3b8(%rbp,%rax,4)
  406689:	8d 40 01             	lea    0x1(%rax),%eax
  40668c:	89 85 28 fc ff ff    	mov    %eax,-0x3d8(%rbp)
  size_t sum = size1 + size2;
  406692:	4c 89 e8             	mov    %r13,%rax
  406695:	48 83 c0 02          	add    $0x2,%rax
  406699:	0f 82 bc 06 00 00    	jb     406d5b <vasnprintf+0xb5b>
                ENSURE_ALLOCATION (xsum (length,
  40669f:	49 39 c4             	cmp    %rax,%r12
  4066a2:	0f 83 68 07 00 00    	jae    406e10 <vasnprintf+0xc10>
  4066a8:	4d 85 e4             	test   %r12,%r12
  4066ab:	0f 85 5f 08 00 00    	jne    406f10 <vasnprintf+0xd10>
  4066b1:	48 83 f8 0c          	cmp    $0xc,%rax
  4066b5:	0f 87 67 08 00 00    	ja     406f22 <vasnprintf+0xd22>
  4066bb:	41 bc 0c 00 00 00    	mov    $0xc,%r12d
  4066c1:	48 3b 8d 18 fc ff ff 	cmp    -0x3e8(%rbp),%rcx
  4066c8:	0f 84 b2 08 00 00    	je     406f80 <vasnprintf+0xd80>
  4066ce:	48 89 cf             	mov    %rcx,%rdi
  4066d1:	4c 89 e6             	mov    %r12,%rsi
  4066d4:	48 89 8d 30 fc ff ff 	mov    %rcx,-0x3d0(%rbp)
  4066db:	e8 e0 ae ff ff       	callq  4015c0 <realloc@plt>
  4066e0:	48 8b 8d 30 fc ff ff 	mov    -0x3d0(%rbp),%rcx
  4066e7:	48 85 c0             	test   %rax,%rax
  4066ea:	49 89 c7             	mov    %rax,%r15
  4066ed:	0f 84 75 06 00 00    	je     406d68 <vasnprintf+0xb68>
                *(TCHAR_T *) (result + length) = '\0';
  4066f3:	43 c6 04 2f 00       	movb   $0x0,(%r15,%r13,1)
                orig_errno = errno;
  4066f8:	e8 73 ac ff ff       	callq  401370 <__errno_location@plt>
  return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  4066fd:	89 9d 14 fc ff ff    	mov    %ebx,-0x3ec(%rbp)
  406703:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
  40670a:	8b 00                	mov    (%rax),%eax
  40670c:	89 85 10 fc ff ff    	mov    %eax,-0x3f0(%rbp)
  406712:	48 8d 85 44 fc ff ff 	lea    -0x3bc(%rbp),%rax
  406719:	48 89 85 08 fc ff ff 	mov    %rax,-0x3f8(%rbp)
                    size_t maxlen = allocated - length;
  406720:	4c 89 e3             	mov    %r12,%rbx
  406723:	b8 00 00 00 80       	mov    $0x80000000,%eax
  406728:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
                    int count = -1;
  40672d:	c7 85 44 fc ff ff ff 	movl   $0xffffffff,-0x3bc(%rbp)
  406734:	ff ff ff 
                    size_t maxlen = allocated - length;
  406737:	4c 29 eb             	sub    %r13,%rbx
                    if (maxlen > INT_MAX / TCHARS_PER_DCHAR)
  40673a:	48 39 c3             	cmp    %rax,%rbx
                    errno = 0;
  40673d:	48 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%rax
  406744:	48 0f 42 f3          	cmovb  %rbx,%rsi
  406748:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
                    switch (type)
  40674e:	8b 85 14 fc ff ff    	mov    -0x3ec(%rbp),%eax
  406754:	83 f8 11             	cmp    $0x11,%eax
  406757:	0f 87 8b af ff ff    	ja     4016e8 <vasnprintf.cold>
  40675d:	48 8d 3d cc 2f 00 00 	lea    0x2fcc(%rip),%rdi        # 409730 <version_etc_copyright+0x70>
  406764:	48 63 04 87          	movslq (%rdi,%rax,4),%rax
  406768:	48 01 f8             	add    %rdi,%rax
  40676b:	ff e0                	jmpq   *%rax
  40676d:	0f 1f 00             	nopl   (%rax)
                          void *arg = a.arg[dp->arg_index].a.a_pointer;
  406770:	49 8b 46 50          	mov    0x50(%r14),%rax
  406774:	4b 8d 3c 2f          	lea    (%r15,%r13,1),%rdi
  406778:	48 c1 e0 05          	shl    $0x5,%rax
  40677c:	48 03 85 58 fc ff ff 	add    -0x3a8(%rbp),%rax
  406783:	4c 8b 48 10          	mov    0x10(%rax),%r9
                          SNPRINTF_BUF (arg);
  406787:	8b 85 28 fc ff ff    	mov    -0x3d8(%rbp),%eax
  40678d:	83 f8 01             	cmp    $0x1,%eax
  406790:	0f 84 e2 04 00 00    	je     406c78 <vasnprintf+0xa78>
  406796:	83 f8 02             	cmp    $0x2,%eax
  406799:	0f 84 c1 04 00 00    	je     406c60 <vasnprintf+0xa60>
  40679f:	48 83 ec 08          	sub    $0x8,%rsp
  4067a3:	ff b5 08 fc ff ff    	pushq  -0x3f8(%rbp)
  4067a9:	4c 8b 85 20 fc ff ff 	mov    -0x3e0(%rbp),%r8
  4067b0:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  4067b7:	ba 01 00 00 00       	mov    $0x1,%edx
  4067bc:	31 c0                	xor    %eax,%eax
  4067be:	48 89 b5 e8 fb ff ff 	mov    %rsi,-0x418(%rbp)
  4067c5:	e8 76 ab ff ff       	callq  401340 <__snprintf_chk@plt>
  4067ca:	5e                   	pop    %rsi
  4067cb:	48 8b b5 e8 fb ff ff 	mov    -0x418(%rbp),%rsi
  4067d2:	5f                   	pop    %rdi
                    if (count >= 0)
  4067d3:	8b 95 44 fc ff ff    	mov    -0x3bc(%rbp),%edx
  4067d9:	85 d2                	test   %edx,%edx
  4067db:	0f 88 18 01 00 00    	js     4068f9 <vasnprintf+0x6f9>
                        if ((unsigned int) count < maxlen
  4067e1:	48 63 ca             	movslq %edx,%rcx
  4067e4:	48 39 f1             	cmp    %rsi,%rcx
  4067e7:	73 0e                	jae    4067f7 <vasnprintf+0x5f7>
                            && ((TCHAR_T *) (result + length)) [count] != '\0')
  4067e9:	4c 01 f9             	add    %r15,%rcx
  4067ec:	42 80 3c 29 00       	cmpb   $0x0,(%rcx,%r13,1)
  4067f1:	0f 85 f6 ae ff ff    	jne    4016ed <vasnprintf.cold+0x5>
                        if (retcount > count)
  4067f7:	39 c2                	cmp    %eax,%edx
  4067f9:	7d 08                	jge    406803 <vasnprintf+0x603>
                              count = retcount;
  4067fb:	89 85 44 fc ff ff    	mov    %eax,-0x3bc(%rbp)
  406801:	89 c2                	mov    %eax,%edx
                    if ((unsigned int) count + 1 >= maxlen)
  406803:	8d 42 01             	lea    0x1(%rdx),%eax
  406806:	48 39 f0             	cmp    %rsi,%rax
  406809:	0f 82 29 07 00 00    	jb     406f38 <vasnprintf+0xd38>
                        if (maxlen == INT_MAX / TCHARS_PER_DCHAR)
  40680f:	48 81 fb fe ff ff 7f 	cmp    $0x7ffffffe,%rbx
  406816:	0f 87 3c 07 00 00    	ja     406f58 <vasnprintf+0xd58>
                              xmax (xsum (length,
  40681c:	4d 85 e4             	test   %r12,%r12
  40681f:	0f 88 fb 03 00 00    	js     406c20 <vasnprintf+0xa20>
  406825:	8d 42 02             	lea    0x2(%rdx),%eax
  406828:	4b 8d 0c 24          	lea    (%r12,%r12,1),%rcx
  40682c:	4c 01 e8             	add    %r13,%rax
  40682f:	0f 82 53 05 00 00    	jb     406d88 <vasnprintf+0xb88>
XSIZE_INLINE size_t ATTRIBUTE_PURE
xmax (size_t size1, size_t size2)
{
  /* No explicit check is needed here, because for any n:
     max (SIZE_MAX, n) == SIZE_MAX and max (n, SIZE_MAX) == SIZE_MAX.  */
  return (size1 >= size2 ? size1 : size2);
  406835:	48 39 c8             	cmp    %rcx,%rax
  406838:	48 0f 42 c1          	cmovb  %rcx,%rax
                            ENSURE_ALLOCATION (n);
  40683c:	49 39 c4             	cmp    %rax,%r12
  40683f:	0f 83 db fe ff ff    	jae    406720 <vasnprintf+0x520>
  406845:	48 39 c1             	cmp    %rax,%rcx
  406848:	48 0f 43 c1          	cmovae %rcx,%rax
  40684c:	49 89 c4             	mov    %rax,%r12
  40684f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  406853:	0f 84 2f 05 00 00    	je     406d88 <vasnprintf+0xb88>
  406859:	4c 3b bd 18 fc ff ff 	cmp    -0x3e8(%rbp),%r15
  406860:	0f 84 ca 03 00 00    	je     406c30 <vasnprintf+0xa30>
  406866:	48 89 c6             	mov    %rax,%rsi
  406869:	4c 89 ff             	mov    %r15,%rdi
  40686c:	e8 4f ad ff ff       	callq  4015c0 <realloc@plt>
  406871:	48 85 c0             	test   %rax,%rax
  406874:	0f 84 0e 05 00 00    	je     406d88 <vasnprintf+0xb88>
  40687a:	49 89 c7             	mov    %rax,%r15
  40687d:	e9 9e fe ff ff       	jmpq   406720 <vasnprintf+0x520>
  406882:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                          wint_t arg = a.arg[dp->arg_index].a.a_wide_char;
  406888:	49 8b 46 50          	mov    0x50(%r14),%rax
  40688c:	4b 8d 3c 2f          	lea    (%r15,%r13,1),%rdi
  406890:	48 c1 e0 05          	shl    $0x5,%rax
  406894:	48 03 85 58 fc ff ff 	add    -0x3a8(%rbp),%rax
  40689b:	44 8b 48 10          	mov    0x10(%rax),%r9d
                          SNPRINTF_BUF (arg);
  40689f:	8b 85 28 fc ff ff    	mov    -0x3d8(%rbp),%eax
  4068a5:	83 f8 01             	cmp    $0x1,%eax
  4068a8:	0f 84 62 01 00 00    	je     406a10 <vasnprintf+0x810>
  4068ae:	83 f8 02             	cmp    $0x2,%eax
  4068b1:	0f 84 e9 01 00 00    	je     406aa0 <vasnprintf+0x8a0>
  4068b7:	48 83 ec 08          	sub    $0x8,%rsp
  4068bb:	ff b5 08 fc ff ff    	pushq  -0x3f8(%rbp)
  4068c1:	4c 8b 85 20 fc ff ff 	mov    -0x3e0(%rbp),%r8
  4068c8:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  4068cf:	ba 01 00 00 00       	mov    $0x1,%edx
  4068d4:	31 c0                	xor    %eax,%eax
  4068d6:	48 89 b5 e8 fb ff ff 	mov    %rsi,-0x418(%rbp)
  4068dd:	e8 5e aa ff ff       	callq  401340 <__snprintf_chk@plt>
                          SNPRINTF_BUF (arg);
  4068e2:	5a                   	pop    %rdx
                    if (count >= 0)
  4068e3:	8b 95 44 fc ff ff    	mov    -0x3bc(%rbp),%edx
                          SNPRINTF_BUF (arg);
  4068e9:	48 8b b5 e8 fb ff ff 	mov    -0x418(%rbp),%rsi
  4068f0:	59                   	pop    %rcx
                    if (count >= 0)
  4068f1:	85 d2                	test   %edx,%edx
  4068f3:	0f 89 e8 fe ff ff    	jns    4067e1 <vasnprintf+0x5e1>
                        if (fbp[1] != '\0')
  4068f9:	48 8b 8d 38 fc ff ff 	mov    -0x3c8(%rbp),%rcx
  406900:	80 79 01 00          	cmpb   $0x0,0x1(%rcx)
  406904:	0f 85 7e 03 00 00    	jne    406c88 <vasnprintf+0xa88>
                            if (retcount < 0)
  40690a:	85 c0                	test   %eax,%eax
  40690c:	0f 89 e9 fe ff ff    	jns    4067fb <vasnprintf+0x5fb>
                        if (errno == 0)
  406912:	48 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%rax
  406919:	8b 00                	mov    (%rax),%eax
  40691b:	85 c0                	test   %eax,%eax
  40691d:	75 21                	jne    406940 <vasnprintf+0x740>
                            if (dp->conversion == 'c' || dp->conversion == 's')
  40691f:	41 0f b6 46 48       	movzbl 0x48(%r14),%eax
                              errno = EILSEQ;
  406924:	ba 54 00 00 00       	mov    $0x54,%edx
  406929:	48 8b 8d 30 fc ff ff 	mov    -0x3d0(%rbp),%rcx
                            if (dp->conversion == 'c' || dp->conversion == 's')
  406930:	83 e0 ef             	and    $0xffffffef,%eax
                              errno = EILSEQ;
  406933:	3c 63                	cmp    $0x63,%al
  406935:	b8 16 00 00 00       	mov    $0x16,%eax
  40693a:	0f 44 c2             	cmove  %edx,%eax
  40693d:	89 01                	mov    %eax,(%rcx)
  40693f:	90                   	nop
    if (result != resultbuf)
  406940:	4c 3b bd 18 fc ff ff 	cmp    -0x3e8(%rbp),%r15
  406947:	74 08                	je     406951 <vasnprintf+0x751>
      free (result);
  406949:	4c 89 ff             	mov    %r15,%rdi
  40694c:	e8 7f ca ff ff       	callq  4033d0 <rpl_free>
    if (buf_malloced != NULL)
  406951:	48 8b 85 f0 fb ff ff 	mov    -0x410(%rbp),%rax
  406958:	48 85 c0             	test   %rax,%rax
  40695b:	0f 84 22 fc ff ff    	je     406583 <vasnprintf+0x383>
      free (buf_malloced);
  406961:	48 89 c7             	mov    %rax,%rdi
  406964:	e8 67 ca ff ff       	callq  4033d0 <rpl_free>
    CLEANUP ();
  406969:	e9 15 fc ff ff       	jmpq   406583 <vasnprintf+0x383>
  40696e:	66 90                	xchg   %ax,%ax
                          double arg = a.arg[dp->arg_index].a.a_double;
  406970:	49 8b 46 50          	mov    0x50(%r14),%rax
  406974:	4b 8d 3c 2f          	lea    (%r15,%r13,1),%rdi
  406978:	48 c1 e0 05          	shl    $0x5,%rax
  40697c:	48 03 85 58 fc ff ff 	add    -0x3a8(%rbp),%rax
  406983:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
                          SNPRINTF_BUF (arg);
  406988:	8b 85 28 fc ff ff    	mov    -0x3d8(%rbp),%eax
  40698e:	83 f8 01             	cmp    $0x1,%eax
  406991:	0f 84 69 05 00 00    	je     406f00 <vasnprintf+0xd00>
  406997:	83 f8 02             	cmp    $0x2,%eax
  40699a:	0f 84 10 05 00 00    	je     406eb0 <vasnprintf+0xcb0>
  4069a0:	4c 8b 8d 08 fc ff ff 	mov    -0x3f8(%rbp),%r9
  4069a7:	ba 01 00 00 00       	mov    $0x1,%edx
  4069ac:	b8 01 00 00 00       	mov    $0x1,%eax
  4069b1:	4c 8b 85 20 fc ff ff 	mov    -0x3e0(%rbp),%r8
  4069b8:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  4069bf:	48 89 b5 e8 fb ff ff 	mov    %rsi,-0x418(%rbp)
  4069c6:	e8 75 a9 ff ff       	callq  401340 <__snprintf_chk@plt>
  4069cb:	48 8b b5 e8 fb ff ff 	mov    -0x418(%rbp),%rsi
  4069d2:	e9 fc fd ff ff       	jmpq   4067d3 <vasnprintf+0x5d3>
  4069d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4069de:	00 00 
                          unsigned int arg = a.arg[dp->arg_index].a.a_ushort;
  4069e0:	49 8b 46 50          	mov    0x50(%r14),%rax
  4069e4:	4b 8d 3c 2f          	lea    (%r15,%r13,1),%rdi
  4069e8:	48 c1 e0 05          	shl    $0x5,%rax
  4069ec:	48 03 85 58 fc ff ff 	add    -0x3a8(%rbp),%rax
  4069f3:	44 0f b7 48 10       	movzwl 0x10(%rax),%r9d
                          SNPRINTF_BUF (arg);
  4069f8:	8b 85 28 fc ff ff    	mov    -0x3d8(%rbp),%eax
  4069fe:	83 f8 01             	cmp    $0x1,%eax
  406a01:	0f 85 a7 fe ff ff    	jne    4068ae <vasnprintf+0x6ae>
  406a07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  406a0e:	00 00 
  406a10:	ff b5 08 fc ff ff    	pushq  -0x3f8(%rbp)
  406a16:	41 51                	push   %r9
  406a18:	44 8b 8d 48 fc ff ff 	mov    -0x3b8(%rbp),%r9d
  406a1f:	e9 9d fe ff ff       	jmpq   4068c1 <vasnprintf+0x6c1>
  406a24:	0f 1f 40 00          	nopl   0x0(%rax)
                          long double arg = a.arg[dp->arg_index].a.a_longdouble;
  406a28:	49 8b 46 50          	mov    0x50(%r14),%rax
  406a2c:	4b 8d 3c 2f          	lea    (%r15,%r13,1),%rdi
  406a30:	48 c1 e0 05          	shl    $0x5,%rax
  406a34:	48 03 85 58 fc ff ff 	add    -0x3a8(%rbp),%rax
  406a3b:	db 68 10             	fldt   0x10(%rax)
                          SNPRINTF_BUF (arg);
  406a3e:	8b 85 28 fc ff ff    	mov    -0x3d8(%rbp),%eax
  406a44:	83 f8 01             	cmp    $0x1,%eax
  406a47:	0f 84 43 04 00 00    	je     406e90 <vasnprintf+0xc90>
  406a4d:	83 f8 02             	cmp    $0x2,%eax
  406a50:	0f 84 e2 03 00 00    	je     406e38 <vasnprintf+0xc38>
  406a56:	48 83 ec 10          	sub    $0x10,%rsp
  406a5a:	4c 8b 8d 08 fc ff ff 	mov    -0x3f8(%rbp),%r9
  406a61:	db 3c 24             	fstpt  (%rsp)
  406a64:	e9 40 fd ff ff       	jmpq   4067a9 <vasnprintf+0x5a9>
  406a69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                          int arg = a.arg[dp->arg_index].a.a_schar;
  406a70:	49 8b 46 50          	mov    0x50(%r14),%rax
  406a74:	4b 8d 3c 2f          	lea    (%r15,%r13,1),%rdi
  406a78:	48 c1 e0 05          	shl    $0x5,%rax
  406a7c:	48 03 85 58 fc ff ff 	add    -0x3a8(%rbp),%rax
  406a83:	44 0f be 48 10       	movsbl 0x10(%rax),%r9d
                          SNPRINTF_BUF (arg);
  406a88:	8b 85 28 fc ff ff    	mov    -0x3d8(%rbp),%eax
  406a8e:	83 f8 01             	cmp    $0x1,%eax
  406a91:	0f 84 79 ff ff ff    	je     406a10 <vasnprintf+0x810>
  406a97:	83 f8 02             	cmp    $0x2,%eax
  406a9a:	0f 85 17 fe ff ff    	jne    4068b7 <vasnprintf+0x6b7>
  406aa0:	48 83 ec 08          	sub    $0x8,%rsp
  406aa4:	ff b5 08 fc ff ff    	pushq  -0x3f8(%rbp)
  406aaa:	41 51                	push   %r9
  406aac:	8b 85 4c fc ff ff    	mov    -0x3b4(%rbp),%eax
  406ab2:	50                   	push   %rax
  406ab3:	44 8b 8d 48 fc ff ff 	mov    -0x3b8(%rbp),%r9d
  406aba:	4c 8b 85 20 fc ff ff 	mov    -0x3e0(%rbp),%r8
  406ac1:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  406ac8:	31 c0                	xor    %eax,%eax
  406aca:	ba 01 00 00 00       	mov    $0x1,%edx
  406acf:	48 89 b5 e8 fb ff ff 	mov    %rsi,-0x418(%rbp)
  406ad6:	e8 65 a8 ff ff       	callq  401340 <__snprintf_chk@plt>
                          SNPRINTF_BUF (arg);
  406adb:	48 8b b5 e8 fb ff ff 	mov    -0x418(%rbp),%rsi
  406ae2:	48 83 c4 20          	add    $0x20,%rsp
  406ae6:	e9 e8 fc ff ff       	jmpq   4067d3 <vasnprintf+0x5d3>
  406aeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                          int arg = a.arg[dp->arg_index].a.a_short;
  406af0:	49 8b 46 50          	mov    0x50(%r14),%rax
  406af4:	4b 8d 3c 2f          	lea    (%r15,%r13,1),%rdi
  406af8:	48 c1 e0 05          	shl    $0x5,%rax
  406afc:	48 03 85 58 fc ff ff 	add    -0x3a8(%rbp),%rax
  406b03:	44 0f bf 48 10       	movswl 0x10(%rax),%r9d
                          SNPRINTF_BUF (arg);
  406b08:	8b 85 28 fc ff ff    	mov    -0x3d8(%rbp),%eax
  406b0e:	83 f8 01             	cmp    $0x1,%eax
  406b11:	0f 85 97 fd ff ff    	jne    4068ae <vasnprintf+0x6ae>
  406b17:	e9 f4 fe ff ff       	jmpq   406a10 <vasnprintf+0x810>
  406b1c:	0f 1f 40 00          	nopl   0x0(%rax)
                          unsigned int arg = a.arg[dp->arg_index].a.a_uchar;
  406b20:	49 8b 46 50          	mov    0x50(%r14),%rax
  406b24:	4b 8d 3c 2f          	lea    (%r15,%r13,1),%rdi
  406b28:	48 c1 e0 05          	shl    $0x5,%rax
  406b2c:	48 03 85 58 fc ff ff 	add    -0x3a8(%rbp),%rax
  406b33:	44 0f b6 48 10       	movzbl 0x10(%rax),%r9d
                          SNPRINTF_BUF (arg);
  406b38:	8b 85 28 fc ff ff    	mov    -0x3d8(%rbp),%eax
  406b3e:	83 f8 01             	cmp    $0x1,%eax
  406b41:	0f 85 67 fd ff ff    	jne    4068ae <vasnprintf+0x6ae>
  406b47:	e9 c4 fe ff ff       	jmpq   406a10 <vasnprintf+0x810>
  406b4c:	0f 1f 40 00          	nopl   0x0(%rax)
        buf_malloced = NULL;
  406b50:	48 c7 85 f0 fb ff ff 	movq   $0x0,-0x410(%rbp)
  406b57:	00 00 00 00 
        buf = (TCHAR_T *) alloca (buf_neededlength * sizeof (TCHAR_T));
  406b5b:	48 83 c0 1d          	add    $0x1d,%rax
  406b5f:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  406b63:	48 29 c4             	sub    %rax,%rsp
  406b66:	48 8d 44 24 0f       	lea    0xf(%rsp),%rax
  406b6b:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  406b6f:	48 89 85 20 fc ff ff 	mov    %rax,-0x3e0(%rbp)
        buf_malloced = NULL;
  406b76:	e9 6c f7 ff ff       	jmpq   4062e7 <vasnprintf+0xe7>
                    *fbp++ = 'L';
  406b7b:	48 8b 85 38 fc ff ff 	mov    -0x3c8(%rbp),%rax
  406b82:	c6 00 4c             	movb   $0x4c,(%rax)
  406b85:	48 83 c0 01          	add    $0x1,%rax
  406b89:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
                    break;
  406b90:	e9 85 fa ff ff       	jmpq   40661a <vasnprintf+0x41a>
  406b95:	0f 1f 00             	nopl   (%rax)
                switch (a.arg[dp->arg_index].type)
  406b98:	83 eb 12             	sub    $0x12,%ebx
  406b9b:	83 fb 04             	cmp    $0x4,%ebx
  406b9e:	0f 87 44 ab ff ff    	ja     4016e8 <vasnprintf.cold>
  406ba4:	48 8d 15 cd 2b 00 00 	lea    0x2bcd(%rip),%rdx        # 409778 <version_etc_copyright+0xb8>
  406bab:	48 63 04 9a          	movslq (%rdx,%rbx,4),%rax
  406baf:	48 01 d0             	add    %rdx,%rax
  406bb2:	ff e0                	jmpq   *%rax
                    *a.arg[dp->arg_index].a.a_count_longlongint_pointer = length;
  406bb4:	49 8b 47 10          	mov    0x10(%r15),%rax
                    break;
  406bb8:	4d 89 e9             	mov    %r13,%r9
  406bbb:	49 89 cf             	mov    %rcx,%r15
                    *a.arg[dp->arg_index].a.a_count_longlongint_pointer = length;
  406bbe:	4c 89 28             	mov    %r13,(%rax)
                    break;
  406bc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    for (cp = format, i = 0, dp = &d.dir[0]; ; cp = dp->dir_end, i++, dp++)
  406bc8:	4d 8b 46 08          	mov    0x8(%r14),%r8
        if (cp != dp->dir_start)
  406bcc:	49 8b 5e 58          	mov    0x58(%r14),%rbx
    for (cp = format, i = 0, dp = &d.dir[0]; ; cp = dp->dir_end, i++, dp++)
  406bd0:	49 83 c6 58          	add    $0x58,%r14
  406bd4:	48 83 85 00 fc ff ff 	addq   $0x1,-0x400(%rbp)
  406bdb:	01 
        if (cp != dp->dir_start)
  406bdc:	4c 39 c3             	cmp    %r8,%rbx
  406bdf:	0f 85 41 f7 ff ff    	jne    406326 <vasnprintf+0x126>
  406be5:	4d 89 cd             	mov    %r9,%r13
  406be8:	4c 89 f9             	mov    %r15,%rcx
  406beb:	e9 d3 f7 ff ff       	jmpq   4063c3 <vasnprintf+0x1c3>
                    *a.arg[dp->arg_index].a.a_count_int_pointer = length;
  406bf0:	49 8b 47 10          	mov    0x10(%r15),%rax
                    break;
  406bf4:	4d 89 e9             	mov    %r13,%r9
  406bf7:	49 89 cf             	mov    %rcx,%r15
                    *a.arg[dp->arg_index].a.a_count_int_pointer = length;
  406bfa:	44 89 28             	mov    %r13d,(%rax)
                    break;
  406bfd:	eb c9                	jmp    406bc8 <vasnprintf+0x9c8>
                    *a.arg[dp->arg_index].a.a_count_short_pointer = length;
  406bff:	49 8b 47 10          	mov    0x10(%r15),%rax
                    break;
  406c03:	4d 89 e9             	mov    %r13,%r9
  406c06:	49 89 cf             	mov    %rcx,%r15
                    *a.arg[dp->arg_index].a.a_count_short_pointer = length;
  406c09:	66 44 89 28          	mov    %r13w,(%rax)
                    break;
  406c0d:	eb b9                	jmp    406bc8 <vasnprintf+0x9c8>
                    *a.arg[dp->arg_index].a.a_count_schar_pointer = length;
  406c0f:	49 8b 47 10          	mov    0x10(%r15),%rax
                    break;
  406c13:	4d 89 e9             	mov    %r13,%r9
  406c16:	49 89 cf             	mov    %rcx,%r15
                    *a.arg[dp->arg_index].a.a_count_schar_pointer = length;
  406c19:	44 88 28             	mov    %r13b,(%rax)
                    break;
  406c1c:	eb aa                	jmp    406bc8 <vasnprintf+0x9c8>
  406c1e:	66 90                	xchg   %ax,%ax
                            ENSURE_ALLOCATION (n);
  406c20:	49 83 fc ff          	cmp    $0xffffffffffffffff,%r12
  406c24:	0f 84 f6 fa ff ff    	je     406720 <vasnprintf+0x520>
  406c2a:	e9 59 01 00 00       	jmpq   406d88 <vasnprintf+0xb88>
  406c2f:	90                   	nop
  406c30:	48 89 c7             	mov    %rax,%rdi
  406c33:	e8 38 a9 ff ff       	callq  401570 <malloc@plt>
  406c38:	48 85 c0             	test   %rax,%rax
  406c3b:	0f 84 47 01 00 00    	je     406d88 <vasnprintf+0xb88>
  406c41:	4d 85 ed             	test   %r13,%r13
  406c44:	0f 84 29 05 00 00    	je     407173 <vasnprintf+0xf73>
  406c4a:	4c 89 fe             	mov    %r15,%rsi
  406c4d:	4c 89 ea             	mov    %r13,%rdx
  406c50:	48 89 c7             	mov    %rax,%rdi
  406c53:	e8 e8 a8 ff ff       	callq  401540 <memcpy@plt>
  406c58:	49 89 c7             	mov    %rax,%r15
  406c5b:	e9 c0 fa ff ff       	jmpq   406720 <vasnprintf+0x520>
  406c60:	48 83 ec 08          	sub    $0x8,%rsp
  406c64:	ff b5 08 fc ff ff    	pushq  -0x3f8(%rbp)
  406c6a:	41 51                	push   %r9
  406c6c:	e9 3b fe ff ff       	jmpq   406aac <vasnprintf+0x8ac>
  406c71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  406c78:	ff b5 08 fc ff ff    	pushq  -0x3f8(%rbp)
  406c7e:	41 51                	push   %r9
  406c80:	e9 93 fd ff ff       	jmpq   406a18 <vasnprintf+0x818>
  406c85:	0f 1f 00             	nopl   (%rax)
                            fbp[1] = '\0';
  406c88:	c6 41 01 00          	movb   $0x0,0x1(%rcx)
                            continue;
  406c8c:	e9 8f fa ff ff       	jmpq   406720 <vasnprintf+0x520>
  406c91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            if (!(dp->arg_index == ARG_NONE))
  406c98:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  406c9c:	0f 85 4b aa ff ff    	jne    4016ed <vasnprintf.cold+0x5>
  return (sum >= size1 ? sum : SIZE_MAX);
  406ca2:	4d 8d 7d 01          	lea    0x1(%r13),%r15
  406ca6:	49 83 fd ff          	cmp    $0xffffffffffffffff,%r13
  406caa:	49 0f 42 c7          	cmovb  %r15,%rax
  406cae:	49 89 c1             	mov    %rax,%r9
            ENSURE_ALLOCATION (augmented_length);
  406cb1:	49 39 c4             	cmp    %rax,%r12
  406cb4:	73 58                	jae    406d0e <vasnprintf+0xb0e>
  406cb6:	4d 85 e4             	test   %r12,%r12
  406cb9:	0f 84 b1 02 00 00    	je     406f70 <vasnprintf+0xd70>
  406cbf:	0f 88 a3 00 00 00    	js     406d68 <vasnprintf+0xb68>
  406cc5:	4d 01 e4             	add    %r12,%r12
  406cc8:	4d 39 cc             	cmp    %r9,%r12
  406ccb:	4d 0f 42 e1          	cmovb  %r9,%r12
  406ccf:	49 83 fc ff          	cmp    $0xffffffffffffffff,%r12
  406cd3:	0f 84 8f 00 00 00    	je     406d68 <vasnprintf+0xb68>
  406cd9:	48 3b 8d 18 fc ff ff 	cmp    -0x3e8(%rbp),%rcx
  406ce0:	0f 84 ce 02 00 00    	je     406fb4 <vasnprintf+0xdb4>
  406ce6:	4c 89 e6             	mov    %r12,%rsi
  406ce9:	48 89 cf             	mov    %rcx,%rdi
  406cec:	4c 89 8d 30 fc ff ff 	mov    %r9,-0x3d0(%rbp)
  406cf3:	48 89 8d 38 fc ff ff 	mov    %rcx,-0x3c8(%rbp)
  406cfa:	e8 c1 a8 ff ff       	callq  4015c0 <realloc@plt>
  406cff:	4c 8b 8d 30 fc ff ff 	mov    -0x3d0(%rbp),%r9
  406d06:	48 85 c0             	test   %rax,%rax
  406d09:	74 67                	je     406d72 <vasnprintf+0xb72>
  406d0b:	48 89 c1             	mov    %rax,%rcx
            result[length] = '%';
  406d0e:	42 c6 04 29 25       	movb   $0x25,(%rcx,%r13,1)
            length = augmented_length;
  406d13:	49 89 cf             	mov    %rcx,%r15
  406d16:	e9 ad fe ff ff       	jmpq   406bc8 <vasnprintf+0x9c8>
  406d1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            ENSURE_ALLOCATION (augmented_length);
  406d20:	41 bc 0c 00 00 00    	mov    $0xc,%r12d
  406d26:	e9 2a f6 ff ff       	jmpq   406355 <vasnprintf+0x155>
  406d2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  406d30:	4c 89 f9             	mov    %r15,%rcx
  406d33:	e9 6e f6 ff ff       	jmpq   4063a6 <vasnprintf+0x1a6>
  406d38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  406d3f:	00 
                  *fbp++ = '\'';
  406d40:	48 8b 95 20 fc ff ff 	mov    -0x3e0(%rbp),%rdx
  406d47:	48 8d 7a 02          	lea    0x2(%rdx),%rdi
  406d4b:	c6 42 01 27          	movb   $0x27,0x1(%rdx)
  406d4f:	48 89 bd 38 fc ff ff 	mov    %rdi,-0x3c8(%rbp)
  406d56:	e9 e1 f6 ff ff       	jmpq   40643c <vasnprintf+0x23c>
                ENSURE_ALLOCATION (xsum (length,
  406d5b:	49 83 fc ff          	cmp    $0xffffffffffffffff,%r12
  406d5f:	0f 84 ab 00 00 00    	je     406e10 <vasnprintf+0xc10>
  406d65:	0f 1f 00             	nopl   (%rax)
  406d68:	49 89 cb             	mov    %rcx,%r11
  406d6b:	4c 89 9d 38 fc ff ff 	mov    %r11,-0x3c8(%rbp)
  406d72:	e8 f9 a5 ff ff       	callq  401370 <__errno_location@plt>
  406d77:	4c 8b 9d 38 fc ff ff 	mov    -0x3c8(%rbp),%r11
  406d7e:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
  406d85:	4d 89 df             	mov    %r11,%r15
    errno = ENOMEM;
  406d88:	48 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%rax
  406d8f:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
    goto fail_with_errno;
  406d95:	e9 a6 fb ff ff       	jmpq   406940 <vasnprintf+0x740>
  406d9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                prefix_count = 0;
  406da0:	c7 85 28 fc ff ff 00 	movl   $0x0,-0x3d8(%rbp)
  406da7:	00 00 00 
  406daa:	e9 ae f8 ff ff       	jmpq   40665d <vasnprintf+0x45d>
  406daf:	90                   	nop
            ENSURE_ALLOCATION (augmented_length);
  406db0:	4c 89 e7             	mov    %r12,%rdi
  406db3:	e8 b8 a7 ff ff       	callq  401570 <malloc@plt>
  406db8:	4c 8b 8d 38 fc ff ff 	mov    -0x3c8(%rbp),%r9
  406dbf:	4c 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%r8
  406dc6:	48 85 c0             	test   %rax,%rax
  406dc9:	48 89 c1             	mov    %rax,%rcx
  406dcc:	74 52                	je     406e20 <vasnprintf+0xc20>
  406dce:	4d 85 c9             	test   %r9,%r9
  406dd1:	0f 84 cf f5 ff ff    	je     4063a6 <vasnprintf+0x1a6>
  406dd7:	48 8b b5 18 fc ff ff 	mov    -0x3e8(%rbp),%rsi
  406dde:	4c 89 ca             	mov    %r9,%rdx
  406de1:	48 89 c7             	mov    %rax,%rdi
  406de4:	4c 89 85 30 fc ff ff 	mov    %r8,-0x3d0(%rbp)
  406deb:	4c 89 8d 38 fc ff ff 	mov    %r9,-0x3c8(%rbp)
  406df2:	e8 49 a7 ff ff       	callq  401540 <memcpy@plt>
  406df7:	4c 8b 8d 38 fc ff ff 	mov    -0x3c8(%rbp),%r9
  406dfe:	4c 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%r8
  406e05:	48 89 c1             	mov    %rax,%rcx
  406e08:	e9 99 f5 ff ff       	jmpq   4063a6 <vasnprintf+0x1a6>
  406e0d:	0f 1f 00             	nopl   (%rax)
  406e10:	49 89 cf             	mov    %rcx,%r15
  406e13:	e9 db f8 ff ff       	jmpq   4066f3 <vasnprintf+0x4f3>
  406e18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  406e1f:	00 
  406e20:	e8 4b a5 ff ff       	callq  401370 <__errno_location@plt>
  406e25:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
  406e2c:	e9 57 ff ff ff       	jmpq   406d88 <vasnprintf+0xb88>
  406e31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  406e38:	48 83 ec 08          	sub    $0x8,%rsp
  406e3c:	ff b5 08 fc ff ff    	pushq  -0x3f8(%rbp)
  406e42:	8b 85 4c fc ff ff    	mov    -0x3b4(%rbp),%eax
  406e48:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  406e4f:	44 8b 8d 48 fc ff ff 	mov    -0x3b8(%rbp),%r9d
  406e56:	ba 01 00 00 00       	mov    $0x1,%edx
  406e5b:	48 89 b5 e8 fb ff ff 	mov    %rsi,-0x418(%rbp)
  406e62:	4c 8b 85 20 fc ff ff 	mov    -0x3e0(%rbp),%r8
  406e69:	48 83 ec 18          	sub    $0x18,%rsp
  406e6d:	db 7c 24 08          	fstpt  0x8(%rsp)
  406e71:	50                   	push   %rax
  406e72:	31 c0                	xor    %eax,%eax
  406e74:	e8 c7 a4 ff ff       	callq  401340 <__snprintf_chk@plt>
                          SNPRINTF_BUF (arg);
  406e79:	48 8b b5 e8 fb ff ff 	mov    -0x418(%rbp),%rsi
  406e80:	48 83 c4 30          	add    $0x30,%rsp
  406e84:	e9 4a f9 ff ff       	jmpq   4067d3 <vasnprintf+0x5d3>
  406e89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  406e90:	48 83 ec 08          	sub    $0x8,%rsp
  406e94:	ff b5 08 fc ff ff    	pushq  -0x3f8(%rbp)
  406e9a:	48 83 ec 10          	sub    $0x10,%rsp
  406e9e:	db 3c 24             	fstpt  (%rsp)
  406ea1:	e9 0d fc ff ff       	jmpq   406ab3 <vasnprintf+0x8b3>
  406ea6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  406ead:	00 00 00 
  406eb0:	8b 85 4c fc ff ff    	mov    -0x3b4(%rbp),%eax
  406eb6:	ff b5 08 fc ff ff    	pushq  -0x3f8(%rbp)
  406ebc:	50                   	push   %rax
  406ebd:	44 8b 8d 48 fc ff ff 	mov    -0x3b8(%rbp),%r9d
  406ec4:	ba 01 00 00 00       	mov    $0x1,%edx
  406ec9:	b8 01 00 00 00       	mov    $0x1,%eax
  406ece:	4c 8b 85 20 fc ff ff 	mov    -0x3e0(%rbp),%r8
  406ed5:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  406edc:	48 89 b5 e8 fb ff ff 	mov    %rsi,-0x418(%rbp)
  406ee3:	e8 58 a4 ff ff       	callq  401340 <__snprintf_chk@plt>
                          SNPRINTF_BUF (arg);
  406ee8:	41 58                	pop    %r8
  406eea:	48 8b b5 e8 fb ff ff 	mov    -0x418(%rbp),%rsi
  406ef1:	41 59                	pop    %r9
  406ef3:	e9 db f8 ff ff       	jmpq   4067d3 <vasnprintf+0x5d3>
  406ef8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  406eff:	00 
  406f00:	48 83 ec 08          	sub    $0x8,%rsp
  406f04:	ff b5 08 fc ff ff    	pushq  -0x3f8(%rbp)
  406f0a:	eb b1                	jmp    406ebd <vasnprintf+0xcbd>
  406f0c:	0f 1f 40 00          	nopl   0x0(%rax)
                ENSURE_ALLOCATION (xsum (length,
  406f10:	0f 88 52 fe ff ff    	js     406d68 <vasnprintf+0xb68>
  406f16:	4d 01 e4             	add    %r12,%r12
  406f19:	49 39 c4             	cmp    %rax,%r12
  406f1c:	0f 83 9f f7 ff ff    	jae    4066c1 <vasnprintf+0x4c1>
  406f22:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  406f26:	0f 84 3c fe ff ff    	je     406d68 <vasnprintf+0xb68>
  406f2c:	49 89 c4             	mov    %rax,%r12
  406f2f:	e9 8d f7 ff ff       	jmpq   4066c1 <vasnprintf+0x4c1>
  406f34:	0f 1f 40 00          	nopl   0x0(%rax)
  406f38:	48 63 c2             	movslq %edx,%rax
                errno = orig_errno;
  406f3b:	8b 8d 10 fc ff ff    	mov    -0x3f0(%rbp),%ecx
                    length += count;
  406f41:	4e 8d 0c 28          	lea    (%rax,%r13,1),%r9
                errno = orig_errno;
  406f45:	48 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%rax
  406f4c:	89 08                	mov    %ecx,(%rax)
  406f4e:	e9 75 fc ff ff       	jmpq   406bc8 <vasnprintf+0x9c8>
  406f53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    errno = EOVERFLOW;
  406f58:	48 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%rax
  406f5f:	c7 00 4b 00 00 00    	movl   $0x4b,(%rax)
    goto fail_with_errno;
  406f65:	e9 d6 f9 ff ff       	jmpq   406940 <vasnprintf+0x740>
  406f6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            ENSURE_ALLOCATION (augmented_length);
  406f70:	41 bc 0c 00 00 00    	mov    $0xc,%r12d
  406f76:	e9 4d fd ff ff       	jmpq   406cc8 <vasnprintf+0xac8>
  406f7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                ENSURE_ALLOCATION (xsum (length,
  406f80:	4c 89 e7             	mov    %r12,%rdi
  406f83:	e8 e8 a5 ff ff       	callq  401570 <malloc@plt>
  406f88:	49 89 c7             	mov    %rax,%r15
  406f8b:	48 85 c0             	test   %rax,%rax
  406f8e:	0f 84 ef 01 00 00    	je     407183 <vasnprintf+0xf83>
  406f94:	4d 85 ed             	test   %r13,%r13
  406f97:	0f 84 56 f7 ff ff    	je     4066f3 <vasnprintf+0x4f3>
  406f9d:	48 8b b5 18 fc ff ff 	mov    -0x3e8(%rbp),%rsi
  406fa4:	4c 89 ea             	mov    %r13,%rdx
  406fa7:	48 89 c7             	mov    %rax,%rdi
  406faa:	e8 91 a5 ff ff       	callq  401540 <memcpy@plt>
  406faf:	e9 3f f7 ff ff       	jmpq   4066f3 <vasnprintf+0x4f3>
            ENSURE_ALLOCATION (augmented_length);
  406fb4:	4c 89 e7             	mov    %r12,%rdi
  406fb7:	48 89 8d 30 fc ff ff 	mov    %rcx,-0x3d0(%rbp)
  406fbe:	4c 89 8d 38 fc ff ff 	mov    %r9,-0x3c8(%rbp)
  406fc5:	e8 a6 a5 ff ff       	callq  401570 <malloc@plt>
  406fca:	4c 8b 8d 38 fc ff ff 	mov    -0x3c8(%rbp),%r9
  406fd1:	48 8b 8d 30 fc ff ff 	mov    -0x3d0(%rbp),%rcx
  406fd8:	48 85 c0             	test   %rax,%rax
  406fdb:	48 89 c7             	mov    %rax,%rdi
  406fde:	0f 84 9f 01 00 00    	je     407183 <vasnprintf+0xf83>
  406fe4:	4d 85 ed             	test   %r13,%r13
  406fe7:	0f 84 8e 01 00 00    	je     40717b <vasnprintf+0xf7b>
  406fed:	48 89 ce             	mov    %rcx,%rsi
  406ff0:	4c 89 ea             	mov    %r13,%rdx
  406ff3:	4c 89 8d 38 fc ff ff 	mov    %r9,-0x3c8(%rbp)
  406ffa:	e8 41 a5 ff ff       	callq  401540 <memcpy@plt>
  406fff:	4c 8b 8d 38 fc ff ff 	mov    -0x3c8(%rbp),%r9
  407006:	48 89 c1             	mov    %rax,%rcx
  407009:	e9 00 fd ff ff       	jmpq   406d0e <vasnprintf+0xb0e>
  40700e:	4d 89 ee             	mov    %r13,%r14
  407011:	49 89 cb             	mov    %rcx,%r11
  size_t sum = size1 + size2;
  407014:	49 83 c6 01          	add    $0x1,%r14
  407018:	0f 82 7d 01 00 00    	jb     40719b <vasnprintf+0xf9b>
    ENSURE_ALLOCATION (xsum (length, 1));
  40701e:	4d 39 f4             	cmp    %r14,%r12
  407021:	73 44                	jae    407067 <vasnprintf+0xe67>
  407023:	4d 85 e4             	test   %r12,%r12
  407026:	0f 85 e8 00 00 00    	jne    407114 <vasnprintf+0xf14>
  40702c:	49 83 fe 0c          	cmp    $0xc,%r14
  407030:	0f 87 f0 00 00 00    	ja     407126 <vasnprintf+0xf26>
  407036:	41 bc 0c 00 00 00    	mov    $0xc,%r12d
  40703c:	4c 3b 9d 18 fc ff ff 	cmp    -0x3e8(%rbp),%r11
  407043:	0f 84 ef 00 00 00    	je     407138 <vasnprintf+0xf38>
  407049:	4c 89 df             	mov    %r11,%rdi
  40704c:	4c 89 e6             	mov    %r12,%rsi
  40704f:	4c 89 9d 38 fc ff ff 	mov    %r11,-0x3c8(%rbp)
  407056:	e8 65 a5 ff ff       	callq  4015c0 <realloc@plt>
  40705b:	49 89 c3             	mov    %rax,%r11
  40705e:	48 85 c0             	test   %rax,%rax
  407061:	0f 84 0b fd ff ff    	je     406d72 <vasnprintf+0xb72>
    result[length] = '\0';
  407067:	43 c6 04 2b 00       	movb   $0x0,(%r11,%r13,1)
    if (result != resultbuf && length + 1 < allocated)
  40706c:	4d 39 f4             	cmp    %r14,%r12
  40706f:	76 29                	jbe    40709a <vasnprintf+0xe9a>
  407071:	4c 3b 9d 18 fc ff ff 	cmp    -0x3e8(%rbp),%r11
  407078:	74 20                	je     40709a <vasnprintf+0xe9a>
        memory = (DCHAR_T *) realloc (result, (length + 1) * sizeof (DCHAR_T));
  40707a:	4c 89 df             	mov    %r11,%rdi
  40707d:	4c 89 f6             	mov    %r14,%rsi
  407080:	4c 89 9d 38 fc ff ff 	mov    %r11,-0x3c8(%rbp)
  407087:	e8 34 a5 ff ff       	callq  4015c0 <realloc@plt>
        if (memory != NULL)
  40708c:	4c 8b 9d 38 fc ff ff 	mov    -0x3c8(%rbp),%r11
  407093:	48 85 c0             	test   %rax,%rax
  407096:	4c 0f 45 d8          	cmovne %rax,%r11
    if (buf_malloced != NULL)
  40709a:	48 8b bd f0 fb ff ff 	mov    -0x410(%rbp),%rdi
  4070a1:	48 85 ff             	test   %rdi,%rdi
  4070a4:	74 13                	je     4070b9 <vasnprintf+0xeb9>
  4070a6:	4c 89 9d 38 fc ff ff 	mov    %r11,-0x3c8(%rbp)
      free (buf_malloced);
  4070ad:	e8 1e c3 ff ff       	callq  4033d0 <rpl_free>
  4070b2:	4c 8b 9d 38 fc ff ff 	mov    -0x3c8(%rbp),%r11
    CLEANUP ();
  4070b9:	48 8b bd 48 fd ff ff 	mov    -0x2b8(%rbp),%rdi
  4070c0:	48 8d 85 60 fd ff ff 	lea    -0x2a0(%rbp),%rax
  4070c7:	48 39 c7             	cmp    %rax,%rdi
  4070ca:	74 13                	je     4070df <vasnprintf+0xedf>
  4070cc:	4c 89 9d 38 fc ff ff 	mov    %r11,-0x3c8(%rbp)
  4070d3:	e8 f8 c2 ff ff       	callq  4033d0 <rpl_free>
  4070d8:	4c 8b 9d 38 fc ff ff 	mov    -0x3c8(%rbp),%r11
  4070df:	48 8b bd 58 fc ff ff 	mov    -0x3a8(%rbp),%rdi
  4070e6:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  4070ed:	48 39 c7             	cmp    %rax,%rdi
  4070f0:	74 13                	je     407105 <vasnprintf+0xf05>
  4070f2:	4c 89 9d 38 fc ff ff 	mov    %r11,-0x3c8(%rbp)
  4070f9:	e8 d2 c2 ff ff       	callq  4033d0 <rpl_free>
  4070fe:	4c 8b 9d 38 fc ff ff 	mov    -0x3c8(%rbp),%r11
    *lengthp = length;
  407105:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
  40710c:	4c 89 28             	mov    %r13,(%rax)
    return result;
  40710f:	e9 a2 f4 ff ff       	jmpq   4065b6 <vasnprintf+0x3b6>
    ENSURE_ALLOCATION (xsum (length, 1));
  407114:	0f 88 51 fc ff ff    	js     406d6b <vasnprintf+0xb6b>
  40711a:	4d 01 e4             	add    %r12,%r12
  40711d:	4d 39 f4             	cmp    %r14,%r12
  407120:	0f 83 16 ff ff ff    	jae    40703c <vasnprintf+0xe3c>
  407126:	49 83 fe ff          	cmp    $0xffffffffffffffff,%r14
  40712a:	0f 84 3b fc ff ff    	je     406d6b <vasnprintf+0xb6b>
  407130:	4d 89 f4             	mov    %r14,%r12
  407133:	e9 04 ff ff ff       	jmpq   40703c <vasnprintf+0xe3c>
  407138:	4c 89 e7             	mov    %r12,%rdi
  40713b:	4c 89 9d 38 fc ff ff 	mov    %r11,-0x3c8(%rbp)
  407142:	e8 29 a4 ff ff       	callq  401570 <malloc@plt>
  407147:	4c 8b 9d 38 fc ff ff 	mov    -0x3c8(%rbp),%r11
  40714e:	48 85 c0             	test   %rax,%rax
  407151:	74 30                	je     407183 <vasnprintf+0xf83>
  407153:	4d 85 ed             	test   %r13,%r13
  407156:	74 52                	je     4071aa <vasnprintf+0xfaa>
  407158:	4c 89 de             	mov    %r11,%rsi
  40715b:	4c 89 ea             	mov    %r13,%rdx
  40715e:	48 89 c7             	mov    %rax,%rdi
  407161:	e8 da a3 ff ff       	callq  401540 <memcpy@plt>
  407166:	49 89 c3             	mov    %rax,%r11
  407169:	e9 f9 fe ff ff       	jmpq   407067 <vasnprintf+0xe67>
}
  40716e:	e8 cd a2 ff ff       	callq  401440 <__stack_chk_fail@plt>
  407173:	49 89 c7             	mov    %rax,%r15
  407176:	e9 a5 f5 ff ff       	jmpq   406720 <vasnprintf+0x520>
  40717b:	48 89 c1             	mov    %rax,%rcx
  40717e:	e9 8b fb ff ff       	jmpq   406d0e <vasnprintf+0xb0e>
  407183:	e8 e8 a1 ff ff       	callq  401370 <__errno_location@plt>
    ENSURE_ALLOCATION (xsum (length, 1));
  407188:	4c 8b bd 18 fc ff ff 	mov    -0x3e8(%rbp),%r15
  40718f:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
  407196:	e9 ed fb ff ff       	jmpq   406d88 <vasnprintf+0xb88>
  40719b:	49 83 fc ff          	cmp    $0xffffffffffffffff,%r12
  40719f:	0f 84 c2 fe ff ff    	je     407067 <vasnprintf+0xe67>
  4071a5:	e9 c1 fb ff ff       	jmpq   406d6b <vasnprintf+0xb6b>
  4071aa:	49 89 c3             	mov    %rax,%r11
  4071ad:	e9 b5 fe ff ff       	jmpq   407067 <vasnprintf+0xe67>
  4071b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4071b9:	00 00 00 
  4071bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004071c0 <hard_locale>:
#include <locale.h>
#include <string.h>

bool
hard_locale (int category)
{
  4071c0:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  char locale[SETLOCALE_NULL_MAX];

  if (setlocale_null_r (category, locale, sizeof (locale)))
  4071c7:	ba 01 01 00 00       	mov    $0x101,%edx
{
  4071cc:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4071d3:	00 00 
  4071d5:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  4071dc:	00 
  4071dd:	31 c0                	xor    %eax,%eax
  if (setlocale_null_r (category, locale, sizeof (locale)))
  4071df:	48 89 e6             	mov    %rsp,%rsi
  4071e2:	e8 59 00 00 00       	callq  407240 <setlocale_null_r>
  4071e7:	41 89 c0             	mov    %eax,%r8d
    return false;
  4071ea:	31 c0                	xor    %eax,%eax
  if (setlocale_null_r (category, locale, sizeof (locale)))
  4071ec:	45 85 c0             	test   %r8d,%r8d
  4071ef:	75 15                	jne    407206 <hard_locale+0x46>

  return !(strcmp (locale, "C") == 0 || strcmp (locale, "POSIX") == 0);
  4071f1:	66 83 3c 24 43       	cmpw   $0x43,(%rsp)
  4071f6:	74 0e                	je     407206 <hard_locale+0x46>
  4071f8:	81 3c 24 50 4f 53 49 	cmpl   $0x49534f50,(%rsp)
  4071ff:	74 27                	je     407228 <hard_locale+0x68>
  407201:	b8 01 00 00 00       	mov    $0x1,%eax
}
  407206:	48 8b 8c 24 08 01 00 	mov    0x108(%rsp),%rcx
  40720d:	00 
  40720e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  407215:	00 00 
  407217:	75 1b                	jne    407234 <hard_locale+0x74>
  407219:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  407220:	c3                   	retq   
  407221:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  return !(strcmp (locale, "C") == 0 || strcmp (locale, "POSIX") == 0);
  407228:	31 c0                	xor    %eax,%eax
  40722a:	66 83 7c 24 04 58    	cmpw   $0x58,0x4(%rsp)
  407230:	75 cf                	jne    407201 <hard_locale+0x41>
  407232:	eb d2                	jmp    407206 <hard_locale+0x46>
}
  407234:	e8 07 a2 ff ff       	callq  401440 <__stack_chk_fail@plt>
  407239:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000407240 <setlocale_null_r>:

#endif

int
setlocale_null_r (int category, char *buf, size_t bufsize)
{
  407240:	41 55                	push   %r13
  407242:	41 54                	push   %r12
  407244:	49 89 f4             	mov    %rsi,%r12
  const char *result = setlocale (category, NULL);
  407247:	31 f6                	xor    %esi,%esi
{
  407249:	55                   	push   %rbp
  40724a:	53                   	push   %rbx
  40724b:	48 89 d3             	mov    %rdx,%rbx
  40724e:	48 83 ec 08          	sub    $0x8,%rsp
  const char *result = setlocale (category, NULL);
  407252:	e8 79 a3 ff ff       	callq  4015d0 <setlocale@plt>
  if (result == NULL)
  407257:	48 85 c0             	test   %rax,%rax
  40725a:	74 7c                	je     4072d8 <setlocale_null_r+0x98>
      size_t length = strlen (result);
  40725c:	48 89 c7             	mov    %rax,%rdi
  40725f:	48 89 c5             	mov    %rax,%rbp
  407262:	e8 c9 a1 ff ff       	callq  401430 <strlen@plt>
      if (length < bufsize)
  407267:	48 39 c3             	cmp    %rax,%rbx
  40726a:	77 1c                	ja     407288 <setlocale_null_r+0x48>
          return ERANGE;
  40726c:	41 bd 22 00 00 00    	mov    $0x22,%r13d
          if (bufsize > 0)
  407272:	48 85 db             	test   %rbx,%rbx
  407275:	75 39                	jne    4072b0 <setlocale_null_r+0x70>

  return setlocale_null_with_lock (category, buf, bufsize);

# endif
#endif
}
  407277:	48 83 c4 08          	add    $0x8,%rsp
  40727b:	44 89 e8             	mov    %r13d,%eax
  40727e:	5b                   	pop    %rbx
  40727f:	5d                   	pop    %rbp
  407280:	41 5c                	pop    %r12
  407282:	41 5d                	pop    %r13
  407284:	c3                   	retq   
  407285:	0f 1f 00             	nopl   (%rax)
  407288:	48 89 ee             	mov    %rbp,%rsi
  40728b:	4c 89 e7             	mov    %r12,%rdi
          memcpy (buf, result, length + 1);
  40728e:	48 8d 50 01          	lea    0x1(%rax),%rdx
          return 0;
  407292:	45 31 ed             	xor    %r13d,%r13d
  407295:	e8 a6 a2 ff ff       	callq  401540 <memcpy@plt>
}
  40729a:	48 83 c4 08          	add    $0x8,%rsp
  40729e:	44 89 e8             	mov    %r13d,%eax
  4072a1:	5b                   	pop    %rbx
  4072a2:	5d                   	pop    %rbp
  4072a3:	41 5c                	pop    %r12
  4072a5:	41 5d                	pop    %r13
  4072a7:	c3                   	retq   
  4072a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4072af:	00 
              memcpy (buf, result, bufsize - 1);
  4072b0:	48 8d 53 ff          	lea    -0x1(%rbx),%rdx
  4072b4:	48 89 ee             	mov    %rbp,%rsi
  4072b7:	4c 89 e7             	mov    %r12,%rdi
  4072ba:	e8 81 a2 ff ff       	callq  401540 <memcpy@plt>
              buf[bufsize - 1] = '\0';
  4072bf:	41 c6 44 1c ff 00    	movb   $0x0,-0x1(%r12,%rbx,1)
}
  4072c5:	48 83 c4 08          	add    $0x8,%rsp
  4072c9:	44 89 e8             	mov    %r13d,%eax
  4072cc:	5b                   	pop    %rbx
  4072cd:	5d                   	pop    %rbp
  4072ce:	41 5c                	pop    %r12
  4072d0:	41 5d                	pop    %r13
  4072d2:	c3                   	retq   
  4072d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return EINVAL;
  4072d8:	41 bd 16 00 00 00    	mov    $0x16,%r13d
      if (bufsize > 0)
  4072de:	48 85 db             	test   %rbx,%rbx
  4072e1:	74 94                	je     407277 <setlocale_null_r+0x37>
        buf[0] = '\0';
  4072e3:	41 c6 04 24 00       	movb   $0x0,(%r12)
  4072e8:	eb 8d                	jmp    407277 <setlocale_null_r+0x37>
  4072ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004072f0 <setlocale_null>:
  const char *result = setlocale (category, NULL);
  4072f0:	31 f6                	xor    %esi,%esi
  4072f2:	e9 d9 a2 ff ff       	jmpq   4015d0 <setlocale@plt>
  4072f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4072fe:	00 00 

0000000000407300 <printf_fetchargs>:
PRINTF_FETCHARGS (va_list args, arguments *a)
{
  size_t i;
  argument *ap;

  for (i = 0, ap = &a->arg[0]; i < a->count; i++, ap++)
  407300:	48 83 3e 00          	cmpq   $0x0,(%rsi)
  407304:	48 8b 46 08          	mov    0x8(%rsi),%rax
  407308:	74 61                	je     40736b <printf_fetchargs+0x6b>
  40730a:	31 c9                	xor    %ecx,%ecx
  40730c:	4c 8d 05 8d 24 00 00 	lea    0x248d(%rip),%r8        # 4097a0 <version_etc_copyright+0xe0>
        if (ap->a.a_string == NULL)
          ap->a.a_string = "(NULL)";
        break;
#if HAVE_WCHAR_T
      case TYPE_WIDE_STRING:
        ap->a.a_wide_string = va_arg (args, const wchar_t *);
  407313:	4c 8d 15 e6 24 00 00 	lea    0x24e6(%rip),%r10        # 409800 <wide_null_string.2839>
        ap->a.a_string = va_arg (args, const char *);
  40731a:	4c 8d 0d 71 24 00 00 	lea    0x2471(%rip),%r9        # 409792 <version_etc_copyright+0xd2>
  407321:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    switch (ap->type)
  407328:	83 38 16             	cmpl   $0x16,(%rax)
  40732b:	0f 87 e8 01 00 00    	ja     407519 <printf_fetchargs+0x219>
  407331:	8b 10                	mov    (%rax),%edx
  407333:	49 63 14 90          	movslq (%r8,%rdx,4),%rdx
  407337:	4c 01 c2             	add    %r8,%rdx
  40733a:	ff e2                	jmpq   *%rdx
  40733c:	0f 1f 40 00          	nopl   0x0(%rax)
        break;
      case TYPE_COUNT_LONGINT_POINTER:
        ap->a.a_count_longint_pointer = va_arg (args, long int *);
        break;
      case TYPE_COUNT_LONGLONGINT_POINTER:
        ap->a.a_count_longlongint_pointer = va_arg (args, long long int *);
  407340:	8b 17                	mov    (%rdi),%edx
  407342:	83 fa 2f             	cmp    $0x2f,%edx
  407345:	0f 87 85 00 00 00    	ja     4073d0 <printf_fetchargs+0xd0>
  40734b:	41 89 d3             	mov    %edx,%r11d
  40734e:	83 c2 08             	add    $0x8,%edx
  407351:	4c 03 5f 10          	add    0x10(%rdi),%r11
  407355:	89 17                	mov    %edx,(%rdi)
  407357:	49 8b 13             	mov    (%r11),%rdx
  40735a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  for (i = 0, ap = &a->arg[0]; i < a->count; i++, ap++)
  40735e:	48 83 c1 01          	add    $0x1,%rcx
  407362:	48 83 c0 20          	add    $0x20,%rax
  407366:	48 39 0e             	cmp    %rcx,(%rsi)
  407369:	77 bd                	ja     407328 <printf_fetchargs+0x28>
#endif
      default:
        /* Unknown type.  */
        return -1;
      }
  return 0;
  40736b:	31 c0                	xor    %eax,%eax
  40736d:	c3                   	retq   
  40736e:	66 90                	xchg   %ax,%ax
           : va_arg (args, wint_t));
  407370:	8b 17                	mov    (%rdi),%edx
  407372:	83 fa 2f             	cmp    $0x2f,%edx
  407375:	77 71                	ja     4073e8 <printf_fetchargs+0xe8>
  407377:	41 89 d3             	mov    %edx,%r11d
  40737a:	83 c2 08             	add    $0x8,%edx
  40737d:	4c 03 5f 10          	add    0x10(%rdi),%r11
  407381:	89 17                	mov    %edx,(%rdi)
  407383:	41 8b 13             	mov    (%r11),%edx
        ap->a.a_wide_char =
  407386:	89 50 10             	mov    %edx,0x10(%rax)
        break;
  407389:	eb d3                	jmp    40735e <printf_fetchargs+0x5e>
  40738b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        ap->a.a_ushort = va_arg (args, /*unsigned short*/ int);
  407390:	8b 17                	mov    (%rdi),%edx
  407392:	83 fa 2f             	cmp    $0x2f,%edx
  407395:	0f 87 15 01 00 00    	ja     4074b0 <printf_fetchargs+0x1b0>
  40739b:	41 89 d3             	mov    %edx,%r11d
  40739e:	83 c2 08             	add    $0x8,%edx
  4073a1:	4c 03 5f 10          	add    0x10(%rdi),%r11
  4073a5:	89 17                	mov    %edx,(%rdi)
  4073a7:	41 8b 13             	mov    (%r11),%edx
  4073aa:	66 89 50 10          	mov    %dx,0x10(%rax)
        break;
  4073ae:	eb ae                	jmp    40735e <printf_fetchargs+0x5e>
        ap->a.a_uchar = va_arg (args, /*unsigned char*/ int);
  4073b0:	8b 17                	mov    (%rdi),%edx
  4073b2:	83 fa 2f             	cmp    $0x2f,%edx
  4073b5:	0f 87 0d 01 00 00    	ja     4074c8 <printf_fetchargs+0x1c8>
  4073bb:	41 89 d3             	mov    %edx,%r11d
  4073be:	83 c2 08             	add    $0x8,%edx
  4073c1:	4c 03 5f 10          	add    0x10(%rdi),%r11
  4073c5:	89 17                	mov    %edx,(%rdi)
  4073c7:	41 8b 13             	mov    (%r11),%edx
  4073ca:	88 50 10             	mov    %dl,0x10(%rax)
        break;
  4073cd:	eb 8f                	jmp    40735e <printf_fetchargs+0x5e>
  4073cf:	90                   	nop
        ap->a.a_count_longlongint_pointer = va_arg (args, long long int *);
  4073d0:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
  4073d4:	49 8d 53 08          	lea    0x8(%r11),%rdx
  4073d8:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  4073dc:	e9 76 ff ff ff       	jmpq   407357 <printf_fetchargs+0x57>
  4073e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
           : va_arg (args, wint_t));
  4073e8:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
  4073ec:	49 8d 53 08          	lea    0x8(%r11),%rdx
  4073f0:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  4073f4:	eb 8d                	jmp    407383 <printf_fetchargs+0x83>
  4073f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4073fd:	00 00 00 
        ap->a.a_double = va_arg (args, double);
  407400:	8b 57 04             	mov    0x4(%rdi),%edx
  407403:	81 fa af 00 00 00    	cmp    $0xaf,%edx
  407409:	0f 87 e1 00 00 00    	ja     4074f0 <printf_fetchargs+0x1f0>
  40740f:	41 89 d3             	mov    %edx,%r11d
  407412:	83 c2 10             	add    $0x10,%edx
  407415:	4c 03 5f 10          	add    0x10(%rdi),%r11
  407419:	89 57 04             	mov    %edx,0x4(%rdi)
  40741c:	f2 41 0f 10 03       	movsd  (%r11),%xmm0
  407421:	f2 0f 11 40 10       	movsd  %xmm0,0x10(%rax)
        break;
  407426:	e9 33 ff ff ff       	jmpq   40735e <printf_fetchargs+0x5e>
  40742b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        ap->a.a_longdouble = va_arg (args, long double);
  407430:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  407434:	48 83 c2 0f          	add    $0xf,%rdx
  407438:	48 83 e2 f0          	and    $0xfffffffffffffff0,%rdx
  40743c:	4c 8d 5a 10          	lea    0x10(%rdx),%r11
  407440:	4c 89 5f 08          	mov    %r11,0x8(%rdi)
  407444:	db 2a                	fldt   (%rdx)
  407446:	db 78 10             	fstpt  0x10(%rax)
        break;
  407449:	e9 10 ff ff ff       	jmpq   40735e <printf_fetchargs+0x5e>
  40744e:	66 90                	xchg   %ax,%ax
        ap->a.a_wide_string = va_arg (args, const wchar_t *);
  407450:	8b 17                	mov    (%rdi),%edx
  407452:	83 fa 2f             	cmp    $0x2f,%edx
  407455:	0f 87 ad 00 00 00    	ja     407508 <printf_fetchargs+0x208>
  40745b:	41 89 d3             	mov    %edx,%r11d
  40745e:	83 c2 08             	add    $0x8,%edx
  407461:	4c 03 5f 10          	add    0x10(%rdi),%r11
  407465:	89 17                	mov    %edx,(%rdi)
  407467:	49 8b 13             	mov    (%r11),%rdx
  40746a:	48 85 d2             	test   %rdx,%rdx
  40746d:	49 0f 44 d2          	cmove  %r10,%rdx
  407471:	48 89 50 10          	mov    %rdx,0x10(%rax)
  407475:	e9 e4 fe ff ff       	jmpq   40735e <printf_fetchargs+0x5e>
  40747a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        ap->a.a_string = va_arg (args, const char *);
  407480:	8b 17                	mov    (%rdi),%edx
  407482:	83 fa 2f             	cmp    $0x2f,%edx
  407485:	77 59                	ja     4074e0 <printf_fetchargs+0x1e0>
  407487:	41 89 d3             	mov    %edx,%r11d
  40748a:	83 c2 08             	add    $0x8,%edx
  40748d:	4c 03 5f 10          	add    0x10(%rdi),%r11
  407491:	89 17                	mov    %edx,(%rdi)
  407493:	49 8b 13             	mov    (%r11),%rdx
  407496:	48 85 d2             	test   %rdx,%rdx
  407499:	49 0f 44 d1          	cmove  %r9,%rdx
  40749d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4074a1:	e9 b8 fe ff ff       	jmpq   40735e <printf_fetchargs+0x5e>
  4074a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4074ad:	00 00 00 
        ap->a.a_ushort = va_arg (args, /*unsigned short*/ int);
  4074b0:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
  4074b4:	49 8d 53 08          	lea    0x8(%r11),%rdx
  4074b8:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  4074bc:	e9 e6 fe ff ff       	jmpq   4073a7 <printf_fetchargs+0xa7>
  4074c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        ap->a.a_uchar = va_arg (args, /*unsigned char*/ int);
  4074c8:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
  4074cc:	49 8d 53 08          	lea    0x8(%r11),%rdx
  4074d0:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  4074d4:	e9 ee fe ff ff       	jmpq   4073c7 <printf_fetchargs+0xc7>
  4074d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        ap->a.a_string = va_arg (args, const char *);
  4074e0:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
  4074e4:	49 8d 53 08          	lea    0x8(%r11),%rdx
  4074e8:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  4074ec:	eb a5                	jmp    407493 <printf_fetchargs+0x193>
  4074ee:	66 90                	xchg   %ax,%ax
        ap->a.a_double = va_arg (args, double);
  4074f0:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
  4074f4:	49 8d 53 08          	lea    0x8(%r11),%rdx
  4074f8:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  4074fc:	e9 1b ff ff ff       	jmpq   40741c <printf_fetchargs+0x11c>
  407501:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        ap->a.a_wide_string = va_arg (args, const wchar_t *);
  407508:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
  40750c:	49 8d 53 08          	lea    0x8(%r11),%rdx
  407510:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  407514:	e9 4e ff ff ff       	jmpq   407467 <printf_fetchargs+0x167>
    switch (ap->type)
  407519:	83 c8 ff             	or     $0xffffffff,%eax
}
  40751c:	c3                   	retq   
  40751d:	0f 1f 00             	nopl   (%rax)

0000000000407520 <printf_parse>:
#ifdef STATIC
STATIC
#endif
int
PRINTF_PARSE (const CHAR_T *format, DIRECTIVES *d, arguments *a)
{
  407520:	41 57                	push   %r15
  size_t max_width_length = 0;
  size_t max_precision_length = 0;

  d->count = 0;
  d_allocated = N_DIRECT_ALLOC_DIRECTIVES;
  d->dir = d->direct_alloc_dir;
  407522:	48 8d 4e 20          	lea    0x20(%rsi),%rcx

  a->count = 0;
  a_allocated = N_DIRECT_ALLOC_ARGUMENTS;
  a->arg = a->direct_alloc_arg;
  407526:	4c 8d 5a 10          	lea    0x10(%rdx),%r11
{
  40752a:	49 89 f0             	mov    %rsi,%r8
  40752d:	41 56                	push   %r14
  a_allocated = N_DIRECT_ALLOC_ARGUMENTS;
  40752f:	41 b9 07 00 00 00    	mov    $0x7,%r9d
{
  407535:	49 89 d6             	mov    %rdx,%r14
  d_allocated = N_DIRECT_ALLOC_DIRECTIVES;
  407538:	41 ba 07 00 00 00    	mov    $0x7,%r10d
{
  40753e:	41 55                	push   %r13
    else if (a->arg[n].type != (_type_))                                \
      /* Ambiguous type for positional argument.  */                    \
      goto error;                                                       \
  }

  while (*cp != '\0')
  407540:	45 31 ed             	xor    %r13d,%r13d
{
  407543:	41 54                	push   %r12
  407545:	55                   	push   %rbp
  407546:	53                   	push   %rbx
  407547:	48 83 ec 58          	sub    $0x58,%rsp
  d->count = 0;
  40754b:	48 c7 06 00 00 00 00 	movq   $0x0,(%rsi)
  d->dir = d->direct_alloc_dir;
  407552:	48 89 4e 08          	mov    %rcx,0x8(%rsi)
  407556:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  a->count = 0;
  40755b:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
  a->arg = a->direct_alloc_arg;
  407562:	4c 89 5a 08          	mov    %r11,0x8(%rdx)
  size_t max_precision_length = 0;
  407566:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  40756d:	00 00 
  size_t max_width_length = 0;
  40756f:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  407576:	00 00 
  size_t arg_posn = 0;          /* number of regular arguments consumed */
  407578:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  40757f:	00 00 
  while (*cp != '\0')
  407581:	eb 10                	jmp    407593 <printf_parse+0x73>
  407583:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    {
      CHAR_T c = *cp++;
  407588:	48 8d 6f 01          	lea    0x1(%rdi),%rbp
      if (c == '%')
  40758c:	3c 25                	cmp    $0x25,%al
  40758e:	74 3b                	je     4075cb <printf_parse+0xab>
      CHAR_T c = *cp++;
  407590:	48 89 ef             	mov    %rbp,%rdi
  while (*cp != '\0')
  407593:	0f b6 07             	movzbl (%rdi),%eax
  407596:	84 c0                	test   %al,%al
  407598:	75 ee                	jne    407588 <printf_parse+0x68>
          /* Non-ASCII character.  Not supported.  */
          goto error;
        }
#endif
    }
  d->dir[d->count].dir_start = cp;
  40759a:	4b 8d 44 ad 00       	lea    0x0(%r13,%r13,4),%rax
  40759f:	49 8d 44 45 00       	lea    0x0(%r13,%rax,2),%rax
  4075a4:	48 89 3c c1          	mov    %rdi,(%rcx,%rax,8)

  d->max_width_length = max_width_length;
  4075a8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4075ad:	49 89 40 10          	mov    %rax,0x10(%r8)
  d->max_precision_length = max_precision_length;
  4075b1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4075b6:	49 89 40 18          	mov    %rax,0x18(%r8)
  return 0;
  4075ba:	31 c0                	xor    %eax,%eax
    free (a->arg);
  if (d->dir != d->direct_alloc_dir)
    free (d->dir);
  errno = ENOMEM;
  return -1;
}
  4075bc:	48 83 c4 58          	add    $0x58,%rsp
  4075c0:	5b                   	pop    %rbx
  4075c1:	5d                   	pop    %rbp
  4075c2:	41 5c                	pop    %r12
  4075c4:	41 5d                	pop    %r13
  4075c6:	41 5e                	pop    %r14
  4075c8:	41 5f                	pop    %r15
  4075ca:	c3                   	retq   
          DIRECTIVE *dp = &d->dir[d->count]; /* pointer to next directive */
  4075cb:	4b 8d 44 ad 00       	lea    0x0(%r13,%r13,4),%rax
  4075d0:	49 8d 44 45 00       	lea    0x0(%r13,%rax,2),%rax
          size_t arg_index = ARG_NONE;
  4075d5:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
          DIRECTIVE *dp = &d->dir[d->count]; /* pointer to next directive */
  4075dc:	4c 8d 24 c1          	lea    (%rcx,%rax,8),%r12
          dp->dir_start = cp - 1;
  4075e0:	49 89 3c 24          	mov    %rdi,(%r12)
          dp->flags = 0;
  4075e4:	41 c7 44 24 10 00 00 	movl   $0x0,0x10(%r12)
  4075eb:	00 00 
          dp->width_start = NULL;
  4075ed:	49 c7 44 24 18 00 00 	movq   $0x0,0x18(%r12)
  4075f4:	00 00 
          dp->width_end = NULL;
  4075f6:	49 c7 44 24 20 00 00 	movq   $0x0,0x20(%r12)
  4075fd:	00 00 
          dp->width_arg_index = ARG_NONE;
  4075ff:	49 c7 44 24 28 ff ff 	movq   $0xffffffffffffffff,0x28(%r12)
  407606:	ff ff 
          dp->precision_start = NULL;
  407608:	49 c7 44 24 30 00 00 	movq   $0x0,0x30(%r12)
  40760f:	00 00 
          dp->precision_end = NULL;
  407611:	49 c7 44 24 38 00 00 	movq   $0x0,0x38(%r12)
  407618:	00 00 
          dp->precision_arg_index = ARG_NONE;
  40761a:	49 c7 44 24 40 ff ff 	movq   $0xffffffffffffffff,0x40(%r12)
  407621:	ff ff 
          dp->arg_index = ARG_NONE;
  407623:	49 c7 44 24 50 ff ff 	movq   $0xffffffffffffffff,0x50(%r12)
  40762a:	ff ff 
          if (*cp >= '0' && *cp <= '9')
  40762c:	0f b6 5f 01          	movzbl 0x1(%rdi),%ebx
  407630:	8d 43 d0             	lea    -0x30(%rbx),%eax
  407633:	3c 09                	cmp    $0x9,%al
  407635:	77 37                	ja     40766e <printf_parse+0x14e>
  407637:	e9 41 04 00 00       	jmpq   407a7d <printf_parse+0x55d>
  40763c:	0f 1f 40 00          	nopl   0x0(%rax)
              else if (*cp == '-')
  407640:	80 fb 2d             	cmp    $0x2d,%bl
  407643:	74 3b                	je     407680 <printf_parse+0x160>
              else if (*cp == '+')
  407645:	80 fb 2b             	cmp    $0x2b,%bl
  407648:	74 46                	je     407690 <printf_parse+0x170>
              else if (*cp == ' ')
  40764a:	80 fb 20             	cmp    $0x20,%bl
  40764d:	74 51                	je     4076a0 <printf_parse+0x180>
              else if (*cp == '#')
  40764f:	80 fb 23             	cmp    $0x23,%bl
  407652:	74 5c                	je     4076b0 <printf_parse+0x190>
              else if (*cp == '0')
  407654:	80 fb 30             	cmp    $0x30,%bl
  407657:	74 67                	je     4076c0 <printf_parse+0x1a0>
              else if (*cp == 'I')
  407659:	80 fb 49             	cmp    $0x49,%bl
  40765c:	75 6a                	jne    4076c8 <printf_parse+0x1a8>
                  dp->flags |= FLAG_LOCALIZED;
  40765e:	41 83 4c 24 10 40    	orl    $0x40,0x10(%r12)
                  cp++;
  407664:	0f 1f 40 00          	nopl   0x0(%rax)
  407668:	0f b6 18             	movzbl (%rax),%ebx
          size_t arg_index = ARG_NONE;
  40766b:	48 89 c5             	mov    %rax,%rbp
              if (*cp == '\'')
  40766e:	48 8d 45 01          	lea    0x1(%rbp),%rax
  407672:	80 fb 27             	cmp    $0x27,%bl
  407675:	75 c9                	jne    407640 <printf_parse+0x120>
                  dp->flags |= FLAG_GROUP;
  407677:	41 83 4c 24 10 01    	orl    $0x1,0x10(%r12)
                  cp++;
  40767d:	eb e9                	jmp    407668 <printf_parse+0x148>
  40767f:	90                   	nop
                  dp->flags |= FLAG_LEFT;
  407680:	41 83 4c 24 10 02    	orl    $0x2,0x10(%r12)
                  cp++;
  407686:	eb e0                	jmp    407668 <printf_parse+0x148>
  407688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40768f:	00 
                  dp->flags |= FLAG_SHOWSIGN;
  407690:	41 83 4c 24 10 04    	orl    $0x4,0x10(%r12)
                  cp++;
  407696:	eb d0                	jmp    407668 <printf_parse+0x148>
  407698:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40769f:	00 
                  dp->flags |= FLAG_SPACE;
  4076a0:	41 83 4c 24 10 08    	orl    $0x8,0x10(%r12)
                  cp++;
  4076a6:	eb c0                	jmp    407668 <printf_parse+0x148>
  4076a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4076af:	00 
                  dp->flags |= FLAG_ALT;
  4076b0:	41 83 4c 24 10 10    	orl    $0x10,0x10(%r12)
                  cp++;
  4076b6:	eb b0                	jmp    407668 <printf_parse+0x148>
  4076b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4076bf:	00 
                  dp->flags |= FLAG_ZERO;
  4076c0:	41 83 4c 24 10 20    	orl    $0x20,0x10(%r12)
                  cp++;
  4076c6:	eb a0                	jmp    407668 <printf_parse+0x148>
          if (*cp == '*')
  4076c8:	80 fb 2a             	cmp    $0x2a,%bl
  4076cb:	74 70                	je     40773d <printf_parse+0x21d>
          else if (*cp >= '0' && *cp <= '9')
  4076cd:	8d 53 d0             	lea    -0x30(%rbx),%edx
  4076d0:	80 fa 09             	cmp    $0x9,%dl
  4076d3:	0f 86 56 07 00 00    	jbe    407e2f <printf_parse+0x90f>
          if (*cp == '.')
  4076d9:	80 fb 2e             	cmp    $0x2e,%bl
  4076dc:	0f 84 8a 01 00 00    	je     40786c <printf_parse+0x34c>
              int flags = 0;
  4076e2:	31 c0                	xor    %eax,%eax
                      flags |= (1 << (flags & 1));
  4076e4:	be 01 00 00 00       	mov    $0x1,%esi
  4076e9:	eb 3c                	jmp    407727 <printf_parse+0x207>
  4076eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                  else if (*cp == 'L')
  4076f0:	80 fb 4c             	cmp    $0x4c,%bl
  4076f3:	0f 84 27 02 00 00    	je     407920 <printf_parse+0x400>
                  else if (*cp == 'l')
  4076f9:	80 fb 6c             	cmp    $0x6c,%bl
  4076fc:	74 22                	je     407720 <printf_parse+0x200>
                  else if (*cp == 'j')
  4076fe:	80 fb 6a             	cmp    $0x6a,%bl
  407701:	74 1d                	je     407720 <printf_parse+0x200>
                  else if (*cp == 'z' || *cp == 'Z')
  407703:	89 da                	mov    %ebx,%edx
  407705:	83 e2 df             	and    $0xffffffdf,%edx
  407708:	80 fa 5a             	cmp    $0x5a,%dl
  40770b:	74 13                	je     407720 <printf_parse+0x200>
                  else if (*cp == 't')
  40770d:	80 fb 74             	cmp    $0x74,%bl
  407710:	0f 85 12 02 00 00    	jne    407928 <printf_parse+0x408>
  407716:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40771d:	00 00 00 
                          flags += 8;
  407720:	83 c0 08             	add    $0x8,%eax
                      cp++;
  407723:	0f b6 5d 00          	movzbl 0x0(%rbp),%ebx
                  if (*cp == 'h')
  407727:	48 83 c5 01          	add    $0x1,%rbp
  40772b:	80 fb 68             	cmp    $0x68,%bl
  40772e:	75 c0                	jne    4076f0 <printf_parse+0x1d0>
                      flags |= (1 << (flags & 1));
  407730:	89 c1                	mov    %eax,%ecx
  407732:	89 f2                	mov    %esi,%edx
  407734:	83 e1 01             	and    $0x1,%ecx
  407737:	d3 e2                	shl    %cl,%edx
  407739:	09 d0                	or     %edx,%eax
                      cp++;
  40773b:	eb e6                	jmp    407723 <printf_parse+0x203>
              dp->width_start = cp;
  40773d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  407742:	ba 01 00 00 00       	mov    $0x1,%edx
  407747:	49 89 6c 24 18       	mov    %rbp,0x18(%r12)
              dp->width_end = cp;
  40774c:	49 89 44 24 20       	mov    %rax,0x20(%r12)
              if (max_width_length < 1)
  407751:	48 85 f6             	test   %rsi,%rsi
  407754:	48 0f 45 d6          	cmovne %rsi,%rdx
  407758:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
              if (*cp >= '0' && *cp <= '9')
  40775d:	0f be 55 01          	movsbl 0x1(%rbp),%edx
  407761:	8d 4a d0             	lea    -0x30(%rdx),%ecx
  407764:	80 f9 09             	cmp    $0x9,%cl
  407767:	0f 86 b0 04 00 00    	jbe    407c1d <printf_parse+0x6fd>
                  dp->width_arg_index = arg_posn++;
  40776d:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  407772:	49 89 74 24 28       	mov    %rsi,0x28(%r12)
  407777:	48 8d 56 01          	lea    0x1(%rsi),%rdx
                  if (dp->width_arg_index == ARG_NONE)
  40777b:	48 83 fe ff          	cmp    $0xffffffffffffffff,%rsi
  40777f:	0f 84 82 03 00 00    	je     407b07 <printf_parse+0x5e7>
  407785:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  40778a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  40778f:	48 89 c5             	mov    %rax,%rbp
              REGISTER_ARG (dp->width_arg_index, TYPE_INT);
  407792:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  407796:	49 39 d9             	cmp    %rbx,%r9
  407799:	0f 87 dd 07 00 00    	ja     407f7c <printf_parse+0xa5c>
  40779f:	4d 01 c9             	add    %r9,%r9
  4077a2:	48 8d 43 01          	lea    0x1(%rbx),%rax
  4077a6:	49 39 d9             	cmp    %rbx,%r9
  4077a9:	4c 0f 46 c8          	cmovbe %rax,%r9
  4077ad:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
  4077b4:	ff ff 07 
  4077b7:	49 39 c1             	cmp    %rax,%r9
  4077ba:	0f 87 9d 09 00 00    	ja     40815d <printf_parse+0xc3d>
  4077c0:	4c 89 ce             	mov    %r9,%rsi
  4077c3:	48 c1 e6 05          	shl    $0x5,%rsi
  4077c7:	49 39 cb             	cmp    %rcx,%r11
  4077ca:	0f 84 34 08 00 00    	je     408004 <printf_parse+0xae4>
  4077d0:	48 89 cf             	mov    %rcx,%rdi
  4077d3:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  4077d8:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
  4077dd:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  4077e2:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  4077e7:	e8 d4 9d ff ff       	callq  4015c0 <realloc@plt>
  4077ec:	49 8b 56 08          	mov    0x8(%r14),%rdx
  4077f0:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  4077f5:	48 85 c0             	test   %rax,%rax
  4077f8:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  4077fd:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
  407802:	48 89 c1             	mov    %rax,%rcx
  407805:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  40780a:	0f 84 82 0a 00 00    	je     408292 <printf_parse+0xd72>
  407810:	49 8b 06             	mov    (%r14),%rax
  407813:	49 39 d3             	cmp    %rdx,%r11
  407816:	0f 84 60 0a 00 00    	je     40827c <printf_parse+0xd5c>
  40781c:	49 89 4e 08          	mov    %rcx,0x8(%r14)
  407820:	48 39 d8             	cmp    %rbx,%rax
  407823:	77 1e                	ja     407843 <printf_parse+0x323>
  407825:	0f 1f 00             	nopl   (%rax)
  407828:	48 83 c0 01          	add    $0x1,%rax
  40782c:	48 89 c2             	mov    %rax,%rdx
  40782f:	48 c1 e2 05          	shl    $0x5,%rdx
  407833:	c7 44 11 e0 00 00 00 	movl   $0x0,-0x20(%rcx,%rdx,1)
  40783a:	00 
  40783b:	48 39 d8             	cmp    %rbx,%rax
  40783e:	76 e8                	jbe    407828 <printf_parse+0x308>
  407840:	49 89 06             	mov    %rax,(%r14)
  407843:	48 c1 e3 05          	shl    $0x5,%rbx
  407847:	48 8d 04 19          	lea    (%rcx,%rbx,1),%rax
  40784b:	8b 10                	mov    (%rax),%edx
  40784d:	85 d2                	test   %edx,%edx
  40784f:	0f 85 31 06 00 00    	jne    407e86 <printf_parse+0x966>
  407855:	c7 00 05 00 00 00    	movl   $0x5,(%rax)
  40785b:	0f b6 5d 00          	movzbl 0x0(%rbp),%ebx
  40785f:	48 8d 45 01          	lea    0x1(%rbp),%rax
          if (*cp == '.')
  407863:	80 fb 2e             	cmp    $0x2e,%bl
  407866:	0f 85 76 fe ff ff    	jne    4076e2 <printf_parse+0x1c2>
              if (*cp == '*')
  40786c:	80 7d 01 2a          	cmpb   $0x2a,0x1(%rbp)
                  dp->precision_start = cp - 1;
  407870:	49 89 6c 24 30       	mov    %rbp,0x30(%r12)
              if (*cp == '*')
  407875:	0f 85 cc 02 00 00    	jne    407b47 <printf_parse+0x627>
                  cp++;
  40787b:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  407880:	b8 02 00 00 00       	mov    $0x2,%eax
  407885:	48 8d 55 02          	lea    0x2(%rbp),%rdx
                  dp->precision_end = cp;
  407889:	49 89 54 24 38       	mov    %rdx,0x38(%r12)
                  cp++;
  40788e:	49 89 d7             	mov    %rdx,%r15
                  if (max_precision_length < 2)
  407891:	48 83 fe 02          	cmp    $0x2,%rsi
  407895:	48 0f 43 c6          	cmovae %rsi,%rax
  407899:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                  if (*cp >= '0' && *cp <= '9')
  40789e:	0f be 45 02          	movsbl 0x2(%rbp),%eax
  4078a2:	8d 48 d0             	lea    -0x30(%rax),%ecx
  4078a5:	80 f9 09             	cmp    $0x9,%cl
  4078a8:	0f 86 26 08 00 00    	jbe    4080d4 <printf_parse+0xbb4>
                  if (dp->precision_arg_index == ARG_NONE)
  4078ae:	49 8b 5c 24 40       	mov    0x40(%r12),%rbx
  4078b3:	48 83 fb ff          	cmp    $0xffffffffffffffff,%rbx
  4078b7:	0f 84 f0 07 00 00    	je     4080ad <printf_parse+0xb8d>
                  REGISTER_ARG (dp->precision_arg_index, TYPE_INT);
  4078bd:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  4078c1:	49 39 d9             	cmp    %rbx,%r9
  4078c4:	0f 86 ba 06 00 00    	jbe    407f84 <printf_parse+0xa64>
  4078ca:	49 8b 06             	mov    (%r14),%rax
  4078cd:	48 39 d8             	cmp    %rbx,%rax
  4078d0:	77 21                	ja     4078f3 <printf_parse+0x3d3>
  4078d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4078d8:	48 83 c0 01          	add    $0x1,%rax
  4078dc:	48 89 c2             	mov    %rax,%rdx
  4078df:	48 c1 e2 05          	shl    $0x5,%rdx
  4078e3:	c7 44 11 e0 00 00 00 	movl   $0x0,-0x20(%rcx,%rdx,1)
  4078ea:	00 
  4078eb:	48 39 d8             	cmp    %rbx,%rax
  4078ee:	76 e8                	jbe    4078d8 <printf_parse+0x3b8>
  4078f0:	49 89 06             	mov    %rax,(%r14)
  4078f3:	48 89 d8             	mov    %rbx,%rax
  4078f6:	48 c1 e0 05          	shl    $0x5,%rax
  4078fa:	48 01 c8             	add    %rcx,%rax
  4078fd:	8b 10                	mov    (%rax),%edx
  4078ff:	85 d2                	test   %edx,%edx
  407901:	0f 85 60 06 00 00    	jne    407f67 <printf_parse+0xa47>
  407907:	c7 00 05 00 00 00    	movl   $0x5,(%rax)
  40790d:	4c 89 fd             	mov    %r15,%rbp
  407910:	41 0f b6 1f          	movzbl (%r15),%ebx
  407914:	e9 c9 fd ff ff       	jmpq   4076e2 <printf_parse+0x1c2>
  407919:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                      flags |= 4;
  407920:	83 c8 04             	or     $0x4,%eax
                      cp++;
  407923:	e9 fb fd ff ff       	jmpq   407723 <printf_parse+0x203>
              switch (c)
  407928:	8d 53 db             	lea    -0x25(%rbx),%edx
  40792b:	80 fa 53             	cmp    $0x53,%dl
  40792e:	0f 87 d3 01 00 00    	ja     407b07 <printf_parse+0x5e7>
  407934:	48 8d 0d e1 1e 00 00 	lea    0x1ee1(%rip),%rcx        # 40981c <wide_null_string.2839+0x1c>
  40793b:	0f b6 d2             	movzbl %dl,%edx
  40793e:	48 63 14 91          	movslq (%rcx,%rdx,4),%rdx
  407942:	48 01 ca             	add    %rcx,%rdx
  407945:	ff e2                	jmpq   *%rdx
                    type = TYPE_COUNT_LONGLONGINT_POINTER;
  407947:	41 bf 16 00 00 00    	mov    $0x16,%r15d
                  if (flags >= 16 || (flags & 4))
  40794d:	83 f8 0f             	cmp    $0xf,%eax
  407950:	7f 25                	jg     407977 <printf_parse+0x457>
  407952:	a8 04                	test   $0x4,%al
  407954:	75 21                	jne    407977 <printf_parse+0x457>
                    type = TYPE_COUNT_LONGINT_POINTER;
  407956:	41 bf 15 00 00 00    	mov    $0x15,%r15d
                  if (flags >= 8)
  40795c:	83 f8 07             	cmp    $0x7,%eax
  40795f:	7f 16                	jg     407977 <printf_parse+0x457>
                    type = TYPE_COUNT_SCHAR_POINTER;
  407961:	41 bf 12 00 00 00    	mov    $0x12,%r15d
                  else if (flags & 2)
  407967:	a8 02                	test   $0x2,%al
  407969:	75 0c                	jne    407977 <printf_parse+0x457>
                  else if (flags & 1)
  40796b:	83 e0 01             	and    $0x1,%eax
  40796e:	41 bf 14 00 00 00    	mov    $0x14,%r15d
  407974:	41 29 c7             	sub    %eax,%r15d
                if (dp->arg_index == ARG_NONE)
  407977:	49 83 fd ff          	cmp    $0xffffffffffffffff,%r13
  40797b:	0f 84 87 04 00 00    	je     407e08 <printf_parse+0x8e8>
                dp->arg_index = arg_index;
  407981:	4d 89 6c 24 50       	mov    %r13,0x50(%r12)
                REGISTER_ARG (dp->arg_index, type);
  407986:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  40798a:	4d 39 e9             	cmp    %r13,%r9
  40798d:	0f 86 f5 03 00 00    	jbe    407d88 <printf_parse+0x868>
  407993:	49 8b 06             	mov    (%r14),%rax
  407996:	4c 39 e8             	cmp    %r13,%rax
  407999:	77 20                	ja     4079bb <printf_parse+0x49b>
  40799b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4079a0:	48 83 c0 01          	add    $0x1,%rax
  4079a4:	48 89 c2             	mov    %rax,%rdx
  4079a7:	48 c1 e2 05          	shl    $0x5,%rdx
  4079ab:	c7 44 11 e0 00 00 00 	movl   $0x0,-0x20(%rcx,%rdx,1)
  4079b2:	00 
  4079b3:	4c 39 e8             	cmp    %r13,%rax
  4079b6:	76 e8                	jbe    4079a0 <printf_parse+0x480>
  4079b8:	49 89 06             	mov    %rax,(%r14)
  4079bb:	49 c1 e5 05          	shl    $0x5,%r13
  4079bf:	4a 8d 04 29          	lea    (%rcx,%r13,1),%rax
  4079c3:	8b 10                	mov    (%rax),%edx
  4079c5:	85 d2                	test   %edx,%edx
  4079c7:	0f 85 a9 03 00 00    	jne    407d76 <printf_parse+0x856>
  4079cd:	44 89 38             	mov    %r15d,(%rax)
            dp->conversion = c;
  4079d0:	41 88 5c 24 48       	mov    %bl,0x48(%r12)
          d->count++;
  4079d5:	49 8b 00             	mov    (%r8),%rax
            dp->dir_end = cp;
  4079d8:	49 89 6c 24 08       	mov    %rbp,0x8(%r12)
          d->count++;
  4079dd:	4c 8d 68 01          	lea    0x1(%rax),%r13
  4079e1:	4d 89 28             	mov    %r13,(%r8)
          if (d->count >= d_allocated)
  4079e4:	4d 39 ea             	cmp    %r13,%r10
  4079e7:	76 09                	jbe    4079f2 <printf_parse+0x4d2>
  4079e9:	49 8b 48 08          	mov    0x8(%r8),%rcx
  4079ed:	e9 9e fb ff ff       	jmpq   407590 <printf_parse+0x70>
              d_allocated = xtimes (d_allocated, 2);
  4079f2:	4d 85 d2             	test   %r10,%r10
  4079f5:	0f 88 5e 07 00 00    	js     408159 <printf_parse+0xc39>
              memory_size = xtimes (d_allocated, sizeof (DIRECTIVE));
  4079fb:	48 b8 ba e8 a2 8b 2e 	movabs $0x2e8ba2e8ba2e8ba,%rax
  407a02:	ba e8 02 
              d_allocated = xtimes (d_allocated, 2);
  407a05:	4b 8d 1c 12          	lea    (%r10,%r10,1),%rbx
              memory_size = xtimes (d_allocated, sizeof (DIRECTIVE));
  407a09:	48 39 c3             	cmp    %rax,%rbx
  407a0c:	0f 87 47 07 00 00    	ja     408159 <printf_parse+0xc39>
  407a12:	4b 8d 04 92          	lea    (%r10,%r10,4),%rax
              memory = (DIRECTIVE *) (d->dir != d->direct_alloc_dir
  407a16:	4d 8b 60 08          	mov    0x8(%r8),%r12
  407a1a:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
              memory_size = xtimes (d_allocated, sizeof (DIRECTIVE));
  407a1f:	49 8d 34 42          	lea    (%r10,%rax,2),%rsi
  407a23:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  407a28:	48 c1 e6 04          	shl    $0x4,%rsi
              memory = (DIRECTIVE *) (d->dir != d->direct_alloc_dir
  407a2c:	4c 39 64 24 20       	cmp    %r12,0x20(%rsp)
  407a31:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  407a36:	0f 84 5b 01 00 00    	je     407b97 <printf_parse+0x677>
                                      ? realloc (d->dir, memory_size)
  407a3c:	4c 89 e7             	mov    %r12,%rdi
  407a3f:	e8 7c 9b ff ff       	callq  4015c0 <realloc@plt>
              if (memory == NULL)
  407a44:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  407a49:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  407a4e:	48 85 c0             	test   %rax,%rax
  407a51:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
                                      ? realloc (d->dir, memory_size)
  407a56:	48 89 c1             	mov    %rax,%rcx
              if (memory == NULL)
  407a59:	0f 84 fa 06 00 00    	je     408159 <printf_parse+0xc39>
              if (d->dir == d->direct_alloc_dir)
  407a5f:	4d 8b 60 08          	mov    0x8(%r8),%r12
  407a63:	4d 8b 28             	mov    (%r8),%r13
  407a66:	4c 39 64 24 20       	cmp    %r12,0x20(%rsp)
  407a6b:	0f 84 49 01 00 00    	je     407bba <printf_parse+0x69a>
              d->dir = memory;
  407a71:	49 89 48 08          	mov    %rcx,0x8(%r8)
  407a75:	49 89 da             	mov    %rbx,%r10
  407a78:	e9 13 fb ff ff       	jmpq   407590 <printf_parse+0x70>
  407a7d:	48 89 e8             	mov    %rbp,%rax
              for (np = cp; *np >= '0' && *np <= '9'; np++)
  407a80:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  407a84:	48 83 c0 01          	add    $0x1,%rax
  407a88:	8d 4a d0             	lea    -0x30(%rdx),%ecx
  407a8b:	80 f9 09             	cmp    $0x9,%cl
  407a8e:	76 f0                	jbe    407a80 <printf_parse+0x560>
          size_t arg_index = ARG_NONE;
  407a90:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
              if (*np == '$')
  407a97:	80 fa 24             	cmp    $0x24,%dl
  407a9a:	0f 85 ce fb ff ff    	jne    40766e <printf_parse+0x14e>
                  size_t n = 0;
  407aa0:	31 d2                	xor    %edx,%edx
  407aa2:	eb 11                	jmp    407ab5 <printf_parse+0x595>
                  for (np = cp; *np >= '0' && *np <= '9'; np++)
  407aa4:	8d 73 d0             	lea    -0x30(%rbx),%esi
  407aa7:	48 83 c5 01          	add    $0x1,%rbp
  407aab:	40 80 fe 09          	cmp    $0x9,%sil
  407aaf:	0f 87 c7 06 00 00    	ja     40817c <printf_parse+0xc5c>
                    n = xsum (xtimes (n, 10), *np - '0');
  407ab5:	48 be 99 99 99 99 99 	movabs $0x1999999999999999,%rsi
  407abc:	99 99 19 
  407abf:	0f be cb             	movsbl %bl,%ecx
  407ac2:	48 89 e8             	mov    %rbp,%rax
  407ac5:	83 e9 30             	sub    $0x30,%ecx
  407ac8:	48 63 c9             	movslq %ecx,%rcx
  407acb:	48 39 f2             	cmp    %rsi,%rdx
  407ace:	0f 87 9c 06 00 00    	ja     408170 <printf_parse+0xc50>
  407ad4:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
  407ad8:	48 01 d2             	add    %rdx,%rdx
  407adb:	48 01 d1             	add    %rdx,%rcx
  407ade:	0f b6 5d 01          	movzbl 0x1(%rbp),%ebx
  407ae2:	48 89 ca             	mov    %rcx,%rdx
  return (sum >= size1 ? sum : SIZE_MAX);
  407ae5:	73 bd                	jae    407aa4 <printf_parse+0x584>
                  for (np = cp; *np >= '0' && *np <= '9'; np++)
  407ae7:	8d 43 d0             	lea    -0x30(%rbx),%eax
  407aea:	3c 09                	cmp    $0x9,%al
  407aec:	77 19                	ja     407b07 <printf_parse+0x5e7>
                    n = xsum (xtimes (n, 10), *np - '0');
  407aee:	0f be cb             	movsbl %bl,%ecx
  407af1:	48 83 c5 01          	add    $0x1,%rbp
  407af5:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  407afc:	83 e9 30             	sub    $0x30,%ecx
  407aff:	48 89 e8             	mov    %rbp,%rax
  407b02:	48 63 c9             	movslq %ecx,%rcx
  407b05:	eb d4                	jmp    407adb <printf_parse+0x5bb>
  407b07:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  if (a->arg != a->direct_alloc_arg)
  407b0b:	49 39 cb             	cmp    %rcx,%r11
  407b0e:	74 12                	je     407b22 <printf_parse+0x602>
    free (a->arg);
  407b10:	48 89 cf             	mov    %rcx,%rdi
  407b13:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  407b18:	e8 b3 b8 ff ff       	callq  4033d0 <rpl_free>
  407b1d:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  if (d->dir != d->direct_alloc_dir)
  407b22:	49 8b 78 08          	mov    0x8(%r8),%rdi
  407b26:	48 39 7c 24 20       	cmp    %rdi,0x20(%rsp)
  407b2b:	74 05                	je     407b32 <printf_parse+0x612>
    free (d->dir);
  407b2d:	e8 9e b8 ff ff       	callq  4033d0 <rpl_free>
  errno = EINVAL;
  407b32:	e8 39 98 ff ff       	callq  401370 <__errno_location@plt>
  407b37:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
  return -1;
  407b3d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  407b42:	e9 75 fa ff ff       	jmpq   4075bc <printf_parse+0x9c>
                  for (; *cp >= '0' && *cp <= '9'; cp++)
  407b47:	0f b6 75 01          	movzbl 0x1(%rbp),%esi
  407b4b:	8d 56 d0             	lea    -0x30(%rsi),%edx
  407b4e:	80 fa 09             	cmp    $0x9,%dl
  407b51:	0f 87 f0 06 00 00    	ja     408247 <printf_parse+0xd27>
  407b57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  407b5e:	00 00 
  407b60:	0f b6 70 01          	movzbl 0x1(%rax),%esi
  407b64:	48 83 c0 01          	add    $0x1,%rax
  407b68:	8d 56 d0             	lea    -0x30(%rsi),%edx
  407b6b:	80 fa 09             	cmp    $0x9,%dl
  407b6e:	76 f0                	jbe    407b60 <printf_parse+0x640>
  407b70:	48 89 c2             	mov    %rax,%rdx
  407b73:	48 29 ea             	sub    %rbp,%rdx
  407b76:	48 89 c5             	mov    %rax,%rbp
                  dp->precision_end = cp;
  407b79:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  407b7e:	49 89 44 24 38       	mov    %rax,0x38(%r12)
                  if (max_precision_length < precision_length)
  407b83:	0f b6 18             	movzbl (%rax),%ebx
  407b86:	48 39 d6             	cmp    %rdx,%rsi
  407b89:	48 0f 43 d6          	cmovae %rsi,%rdx
  407b8d:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  407b92:	e9 4b fb ff ff       	jmpq   4076e2 <printf_parse+0x1c2>
                                      : malloc (memory_size));
  407b97:	48 89 f7             	mov    %rsi,%rdi
  407b9a:	e8 d1 99 ff ff       	callq  401570 <malloc@plt>
              if (memory == NULL)
  407b9f:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  407ba4:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  407ba9:	48 85 c0             	test   %rax,%rax
  407bac:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
                                      : malloc (memory_size));
  407bb1:	48 89 c1             	mov    %rax,%rcx
              if (memory == NULL)
  407bb4:	0f 84 63 03 00 00    	je     407f1d <printf_parse+0x9fd>
                memcpy (memory, d->dir, d->count * sizeof (DIRECTIVE));
  407bba:	4b 8d 44 ad 00       	lea    0x0(%r13,%r13,4),%rax
  407bbf:	48 89 cf             	mov    %rcx,%rdi
  407bc2:	4c 89 e6             	mov    %r12,%rsi
  407bc5:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  407bca:	49 8d 54 45 00       	lea    0x0(%r13,%rax,2),%rdx
  407bcf:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  407bd4:	48 c1 e2 03          	shl    $0x3,%rdx
  407bd8:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  407bdd:	e8 5e 99 ff ff       	callq  401540 <memcpy@plt>
  407be2:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  407be7:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  407bec:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  407bf1:	48 89 c1             	mov    %rax,%rcx
  407bf4:	4d 8b 28             	mov    (%r8),%r13
  407bf7:	e9 75 fe ff ff       	jmpq   407a71 <printf_parse+0x551>
                    type = TYPE_LONGDOUBLE;
  407bfc:	41 bf 0c 00 00 00    	mov    $0xc,%r15d
                  if (flags >= 16 || (flags & 4))
  407c02:	83 f8 0f             	cmp    $0xf,%eax
  407c05:	0f 8f 6c fd ff ff    	jg     407977 <printf_parse+0x457>
                    type = TYPE_DOUBLE;
  407c0b:	45 31 ff             	xor    %r15d,%r15d
  407c0e:	a8 04                	test   $0x4,%al
  407c10:	41 0f 95 c7          	setne  %r15b
  407c14:	41 83 c7 0b          	add    $0xb,%r15d
  407c18:	e9 5a fd ff ff       	jmpq   407977 <printf_parse+0x457>
  407c1d:	48 89 c1             	mov    %rax,%rcx
                  for (np = cp; *np >= '0' && *np <= '9'; np++)
  407c20:	0f b6 71 01          	movzbl 0x1(%rcx),%esi
  407c24:	48 83 c1 01          	add    $0x1,%rcx
  407c28:	8d 7e d0             	lea    -0x30(%rsi),%edi
  407c2b:	40 80 ff 09          	cmp    $0x9,%dil
  407c2f:	76 ef                	jbe    407c20 <printf_parse+0x700>
                  if (*np == '$')
  407c31:	40 80 fe 24          	cmp    $0x24,%sil
  407c35:	0f 85 32 fb ff ff    	jne    40776d <printf_parse+0x24d>
                      size_t n = 0;
  407c3b:	31 c9                	xor    %ecx,%ecx
  407c3d:	eb 11                	jmp    407c50 <printf_parse+0x730>
                      for (np = cp; *np >= '0' && *np <= '9'; np++)
  407c3f:	8d 72 d0             	lea    -0x30(%rdx),%esi
  407c42:	48 83 c0 01          	add    $0x1,%rax
  407c46:	40 80 fe 09          	cmp    $0x9,%sil
  407c4a:	0f 87 10 06 00 00    	ja     408260 <printf_parse+0xd40>
                        n = xsum (xtimes (n, 10), *np - '0');
  407c50:	48 be 99 99 99 99 99 	movabs $0x1999999999999999,%rsi
  407c57:	99 99 19 
  407c5a:	83 ea 30             	sub    $0x30,%edx
  407c5d:	48 89 c5             	mov    %rax,%rbp
  407c60:	48 63 d2             	movslq %edx,%rdx
  407c63:	48 39 f1             	cmp    %rsi,%rcx
  407c66:	0f 87 e8 05 00 00    	ja     408254 <printf_parse+0xd34>
  407c6c:	48 8d 0c 89          	lea    (%rcx,%rcx,4),%rcx
  407c70:	48 01 c9             	add    %rcx,%rcx
  size_t sum = size1 + size2;
  407c73:	48 01 ca             	add    %rcx,%rdx
  407c76:	48 89 d3             	mov    %rdx,%rbx
  407c79:	48 89 d1             	mov    %rdx,%rcx
  return (sum >= size1 ? sum : SIZE_MAX);
  407c7c:	0f be 50 01          	movsbl 0x1(%rax),%edx
  407c80:	73 bd                	jae    407c3f <printf_parse+0x71f>
                      for (np = cp; *np >= '0' && *np <= '9'; np++)
  407c82:	8d 4a d0             	lea    -0x30(%rdx),%ecx
  407c85:	80 f9 09             	cmp    $0x9,%cl
  407c88:	0f 87 79 fe ff ff    	ja     407b07 <printf_parse+0x5e7>
  407c8e:	48 83 c0 01          	add    $0x1,%rax
                        n = xsum (xtimes (n, 10), *np - '0');
  407c92:	83 ea 30             	sub    $0x30,%edx
  407c95:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  407c9c:	48 89 c5             	mov    %rax,%rbp
  407c9f:	48 63 d2             	movslq %edx,%rdx
  407ca2:	eb cf                	jmp    407c73 <printf_parse+0x753>
                    type = TYPE_ULONGLONGINT;
  407ca4:	41 bf 0a 00 00 00    	mov    $0xa,%r15d
                  if (flags >= 16 || (flags & 4))
  407caa:	83 f8 0f             	cmp    $0xf,%eax
  407cad:	0f 8f c4 fc ff ff    	jg     407977 <printf_parse+0x457>
  407cb3:	a8 04                	test   $0x4,%al
  407cb5:	0f 85 bc fc ff ff    	jne    407977 <printf_parse+0x457>
                    type = TYPE_ULONGINT;
  407cbb:	41 bf 08 00 00 00    	mov    $0x8,%r15d
                  if (flags >= 8)
  407cc1:	83 f8 07             	cmp    $0x7,%eax
  407cc4:	0f 8f ad fc ff ff    	jg     407977 <printf_parse+0x457>
                    type = TYPE_UCHAR;
  407cca:	41 bf 02 00 00 00    	mov    $0x2,%r15d
                  else if (flags & 2)
  407cd0:	a8 02                	test   $0x2,%al
  407cd2:	0f 85 9f fc ff ff    	jne    407977 <printf_parse+0x457>
                  else if (flags & 1)
  407cd8:	83 e0 01             	and    $0x1,%eax
                    type = TYPE_UINT;
  407cdb:	83 f8 01             	cmp    $0x1,%eax
  407cde:	45 19 ff             	sbb    %r15d,%r15d
  407ce1:	41 83 e7 02          	and    $0x2,%r15d
  407ce5:	41 83 c7 04          	add    $0x4,%r15d
  407ce9:	e9 89 fc ff ff       	jmpq   407977 <printf_parse+0x457>
  407cee:	66 90                	xchg   %ax,%ax
                    type = TYPE_LONGLONGINT;
  407cf0:	41 bf 09 00 00 00    	mov    $0x9,%r15d
                  if (flags >= 16 || (flags & 4))
  407cf6:	83 f8 0f             	cmp    $0xf,%eax
  407cf9:	0f 8f 78 fc ff ff    	jg     407977 <printf_parse+0x457>
  407cff:	a8 04                	test   $0x4,%al
  407d01:	0f 85 70 fc ff ff    	jne    407977 <printf_parse+0x457>
                    type = TYPE_LONGINT;
  407d07:	41 bf 07 00 00 00    	mov    $0x7,%r15d
                  if (flags >= 8)
  407d0d:	83 f8 07             	cmp    $0x7,%eax
  407d10:	0f 8f 61 fc ff ff    	jg     407977 <printf_parse+0x457>
                    type = TYPE_SCHAR;
  407d16:	41 bf 01 00 00 00    	mov    $0x1,%r15d
                  else if (flags & 2)
  407d1c:	a8 02                	test   $0x2,%al
  407d1e:	0f 85 53 fc ff ff    	jne    407977 <printf_parse+0x457>
                  else if (flags & 1)
  407d24:	83 e0 01             	and    $0x1,%eax
                    type = TYPE_INT;
  407d27:	83 f8 01             	cmp    $0x1,%eax
  407d2a:	45 19 ff             	sbb    %r15d,%r15d
  407d2d:	41 83 e7 02          	and    $0x2,%r15d
  407d31:	41 83 c7 03          	add    $0x3,%r15d
  407d35:	e9 3d fc ff ff       	jmpq   407977 <printf_parse+0x457>
  407d3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                    type = TYPE_CHAR;
  407d40:	45 31 ff             	xor    %r15d,%r15d
  407d43:	83 f8 07             	cmp    $0x7,%eax
  407d46:	41 0f 9f c7          	setg   %r15b
  407d4a:	41 83 c7 0d          	add    $0xd,%r15d
  407d4e:	e9 24 fc ff ff       	jmpq   407977 <printf_parse+0x457>
                    type = TYPE_STRING;
  407d53:	45 31 ff             	xor    %r15d,%r15d
  407d56:	83 f8 07             	cmp    $0x7,%eax
  407d59:	41 0f 9f c7          	setg   %r15b
  407d5d:	41 83 c7 0f          	add    $0xf,%r15d
  407d61:	e9 11 fc ff ff       	jmpq   407977 <printf_parse+0x457>
                  type = TYPE_WIDE_CHAR;
  407d66:	41 bf 0e 00 00 00    	mov    $0xe,%r15d
                  c = 'c';
  407d6c:	bb 63 00 00 00       	mov    $0x63,%ebx
  407d71:	e9 01 fc ff ff       	jmpq   407977 <printf_parse+0x457>
                REGISTER_ARG (dp->arg_index, type);
  407d76:	44 39 fa             	cmp    %r15d,%edx
  407d79:	0f 84 51 fc ff ff    	je     4079d0 <printf_parse+0x4b0>
  407d7f:	e9 87 fd ff ff       	jmpq   407b0b <printf_parse+0x5eb>
  407d84:	0f 1f 40 00          	nopl   0x0(%rax)
  407d88:	4d 01 c9             	add    %r9,%r9
  size_t sum = size1 + size2;
  407d8b:	49 8d 45 01          	lea    0x1(%r13),%rax
  407d8f:	4d 39 e9             	cmp    %r13,%r9
  407d92:	4c 0f 46 c8          	cmovbe %rax,%r9
  407d96:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
  407d9d:	ff ff 07 
  407da0:	49 39 c1             	cmp    %rax,%r9
  407da3:	0f 87 b4 03 00 00    	ja     40815d <printf_parse+0xc3d>
  407da9:	4c 89 ce             	mov    %r9,%rsi
  407dac:	48 c1 e6 05          	shl    $0x5,%rsi
  407db0:	49 39 cb             	cmp    %rcx,%r11
  407db3:	0f 84 e3 00 00 00    	je     407e9c <printf_parse+0x97c>
  407db9:	48 89 cf             	mov    %rcx,%rdi
  407dbc:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  407dc1:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
  407dc6:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  407dcb:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  407dd0:	e8 eb 97 ff ff       	callq  4015c0 <realloc@plt>
  407dd5:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  407dda:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  407ddf:	48 85 c0             	test   %rax,%rax
  407de2:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
  407de7:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  407dec:	48 89 c1             	mov    %rax,%rcx
  407def:	0f 84 64 03 00 00    	je     408159 <printf_parse+0xc39>
  407df5:	4d 3b 5e 08          	cmp    0x8(%r14),%r11
  407df9:	0f 84 9b 04 00 00    	je     40829a <printf_parse+0xd7a>
  407dff:	49 89 4e 08          	mov    %rcx,0x8(%r14)
  407e03:	e9 8b fb ff ff       	jmpq   407993 <printf_parse+0x473>
                    dp->arg_index = arg_posn++;
  407e08:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  407e0d:	49 89 74 24 50       	mov    %rsi,0x50(%r12)
  407e12:	48 8d 46 01          	lea    0x1(%rsi),%rax
                    if (dp->arg_index == ARG_NONE)
  407e16:	48 83 fe ff          	cmp    $0xffffffffffffffff,%rsi
  407e1a:	0f 84 e7 fc ff ff    	je     407b07 <printf_parse+0x5e7>
  407e20:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
  407e25:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  407e2a:	e9 57 fb ff ff       	jmpq   407986 <printf_parse+0x466>
              dp->width_start = cp;
  407e2f:	49 89 6c 24 18       	mov    %rbp,0x18(%r12)
              for (; *cp >= '0' && *cp <= '9'; cp++)
  407e34:	0f b6 75 00          	movzbl 0x0(%rbp),%esi
  407e38:	8d 56 d0             	lea    -0x30(%rsi),%edx
  407e3b:	80 fa 09             	cmp    $0x9,%dl
  407e3e:	48 89 ea             	mov    %rbp,%rdx
  407e41:	77 1c                	ja     407e5f <printf_parse+0x93f>
  407e43:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  407e48:	48 89 d0             	mov    %rdx,%rax
  407e4b:	0f b6 72 01          	movzbl 0x1(%rdx),%esi
  407e4f:	48 83 c2 01          	add    $0x1,%rdx
  407e53:	8d 4e d0             	lea    -0x30(%rsi),%ecx
  407e56:	80 f9 09             	cmp    $0x9,%cl
  407e59:	76 ed                	jbe    407e48 <printf_parse+0x928>
  407e5b:	48 83 c0 02          	add    $0x2,%rax
              dp->width_end = cp;
  407e5f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
              width_length = dp->width_end - dp->width_start;
  407e64:	48 89 d1             	mov    %rdx,%rcx
              dp->width_end = cp;
  407e67:	49 89 54 24 20       	mov    %rdx,0x20(%r12)
              width_length = dp->width_end - dp->width_start;
  407e6c:	48 29 e9             	sub    %rbp,%rcx
  407e6f:	0f b6 1a             	movzbl (%rdx),%ebx
  407e72:	48 89 d5             	mov    %rdx,%rbp
  407e75:	48 39 ce             	cmp    %rcx,%rsi
  407e78:	48 0f 43 ce          	cmovae %rsi,%rcx
  407e7c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  407e81:	e9 53 f8 ff ff       	jmpq   4076d9 <printf_parse+0x1b9>
              REGISTER_ARG (dp->width_arg_index, TYPE_INT);
  407e86:	83 fa 05             	cmp    $0x5,%edx
  407e89:	0f 85 7c fc ff ff    	jne    407b0b <printf_parse+0x5eb>
  407e8f:	0f b6 5d 00          	movzbl 0x0(%rbp),%ebx
  407e93:	48 8d 45 01          	lea    0x1(%rbp),%rax
  407e97:	e9 3d f8 ff ff       	jmpq   4076d9 <printf_parse+0x1b9>
                REGISTER_ARG (dp->arg_index, type);
  407e9c:	48 89 f7             	mov    %rsi,%rdi
  407e9f:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  407ea4:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  407ea9:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
  407eae:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  407eb3:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  407eb8:	e8 b3 96 ff ff       	callq  401570 <malloc@plt>
  407ebd:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  407ec2:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  407ec7:	48 85 c0             	test   %rax,%rax
  407eca:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
  407ecf:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  407ed4:	48 89 c7             	mov    %rax,%rdi
  407ed7:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  407edc:	74 5a                	je     407f38 <printf_parse+0xa18>
  407ede:	49 8b 16             	mov    (%r14),%rdx
  407ee1:	48 89 ce             	mov    %rcx,%rsi
  407ee4:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  407ee9:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
  407eee:	48 c1 e2 05          	shl    $0x5,%rdx
  407ef2:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  407ef7:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  407efc:	e8 3f 96 ff ff       	callq  401540 <memcpy@plt>
  407f01:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  407f06:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
  407f0b:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  407f10:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  407f15:	48 89 c1             	mov    %rax,%rcx
  407f18:	e9 e2 fe ff ff       	jmpq   407dff <printf_parse+0x8df>
  407f1d:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  if (a->arg != a->direct_alloc_arg)
  407f21:	49 39 cb             	cmp    %rcx,%r11
  407f24:	74 22                	je     407f48 <printf_parse+0xa28>
    free (a->arg);
  407f26:	48 89 cf             	mov    %rcx,%rdi
  407f29:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  407f2e:	e8 9d b4 ff ff       	callq  4033d0 <rpl_free>
  407f33:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  if (d->dir != d->direct_alloc_dir)
  407f38:	49 8b 78 08          	mov    0x8(%r8),%rdi
  407f3c:	48 39 7c 24 20       	cmp    %rdi,0x20(%rsp)
  407f41:	74 05                	je     407f48 <printf_parse+0xa28>
    free (d->dir);
  407f43:	e8 88 b4 ff ff       	callq  4033d0 <rpl_free>
  errno = ENOMEM;
  407f48:	e8 23 94 ff ff       	callq  401370 <__errno_location@plt>
  407f4d:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
}
  407f53:	48 83 c4 58          	add    $0x58,%rsp
  return -1;
  407f57:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  407f5c:	5b                   	pop    %rbx
  407f5d:	5d                   	pop    %rbp
  407f5e:	41 5c                	pop    %r12
  407f60:	41 5d                	pop    %r13
  407f62:	41 5e                	pop    %r14
  407f64:	41 5f                	pop    %r15
  407f66:	c3                   	retq   
                  REGISTER_ARG (dp->precision_arg_index, TYPE_INT);
  407f67:	83 fa 05             	cmp    $0x5,%edx
  407f6a:	0f 85 9b fb ff ff    	jne    407b0b <printf_parse+0x5eb>
  407f70:	41 0f b6 1f          	movzbl (%r15),%ebx
  407f74:	4c 89 fd             	mov    %r15,%rbp
  407f77:	e9 66 f7 ff ff       	jmpq   4076e2 <printf_parse+0x1c2>
  407f7c:	49 8b 06             	mov    (%r14),%rax
  407f7f:	e9 9c f8 ff ff       	jmpq   407820 <printf_parse+0x300>
  407f84:	4d 01 c9             	add    %r9,%r9
  407f87:	48 8d 43 01          	lea    0x1(%rbx),%rax
  407f8b:	49 39 d9             	cmp    %rbx,%r9
  407f8e:	4c 0f 46 c8          	cmovbe %rax,%r9
  407f92:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
  407f99:	ff ff 07 
  407f9c:	49 39 c1             	cmp    %rax,%r9
  407f9f:	0f 87 b8 01 00 00    	ja     40815d <printf_parse+0xc3d>
  407fa5:	4c 89 ce             	mov    %r9,%rsi
  407fa8:	48 c1 e6 05          	shl    $0x5,%rsi
  407fac:	49 39 cb             	cmp    %rcx,%r11
  407faf:	0f 84 e5 01 00 00    	je     40819a <printf_parse+0xc7a>
  407fb5:	48 89 cf             	mov    %rcx,%rdi
  407fb8:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  407fbd:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
  407fc2:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  407fc7:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  407fcc:	e8 ef 95 ff ff       	callq  4015c0 <realloc@plt>
  407fd1:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  407fd6:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  407fdb:	48 85 c0             	test   %rax,%rax
  407fde:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
  407fe3:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  407fe8:	48 89 c1             	mov    %rax,%rcx
  407feb:	0f 84 68 01 00 00    	je     408159 <printf_parse+0xc39>
  407ff1:	4d 3b 5e 08          	cmp    0x8(%r14),%r11
  407ff5:	0f 84 8c 02 00 00    	je     408287 <printf_parse+0xd67>
  407ffb:	49 89 4e 08          	mov    %rcx,0x8(%r14)
  407fff:	e9 c6 f8 ff ff       	jmpq   4078ca <printf_parse+0x3aa>
              REGISTER_ARG (dp->width_arg_index, TYPE_INT);
  408004:	48 89 f7             	mov    %rsi,%rdi
  408007:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  40800c:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  408011:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
  408016:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  40801b:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  408020:	e8 4b 95 ff ff       	callq  401570 <malloc@plt>
  408025:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  40802a:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  40802f:	48 85 c0             	test   %rax,%rax
  408032:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
  408037:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  40803c:	48 89 c7             	mov    %rax,%rdi
  40803f:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  408044:	0f 84 ee fe ff ff    	je     407f38 <printf_parse+0xa18>
  40804a:	49 8b 06             	mov    (%r14),%rax
  40804d:	48 c1 e0 05          	shl    $0x5,%rax
  408051:	48 89 ce             	mov    %rcx,%rsi
  408054:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  408059:	48 89 c2             	mov    %rax,%rdx
  40805c:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
  408061:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  408066:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  40806b:	e8 d0 94 ff ff       	callq  401540 <memcpy@plt>
  408070:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  408075:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
  40807a:	48 89 c7             	mov    %rax,%rdi
  40807d:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  408082:	49 8b 06             	mov    (%r14),%rax
  408085:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  40808a:	48 89 f9             	mov    %rdi,%rcx
  40808d:	e9 8a f7 ff ff       	jmpq   40781c <printf_parse+0x2fc>
                  else if (*cp == 't')
  408092:	41 bf 11 00 00 00    	mov    $0x11,%r15d
  408098:	e9 da f8 ff ff       	jmpq   407977 <printf_parse+0x457>
                  type = TYPE_WIDE_STRING;
  40809d:	41 bf 10 00 00 00    	mov    $0x10,%r15d
                  c = 's';
  4080a3:	bb 73 00 00 00       	mov    $0x73,%ebx
  4080a8:	e9 ca f8 ff ff       	jmpq   407977 <printf_parse+0x457>
                      dp->precision_arg_index = arg_posn++;
  4080ad:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  4080b2:	49 89 74 24 40       	mov    %rsi,0x40(%r12)
  4080b7:	48 8d 46 01          	lea    0x1(%rsi),%rax
                      if (dp->precision_arg_index == ARG_NONE)
  4080bb:	48 83 fe ff          	cmp    $0xffffffffffffffff,%rsi
  4080bf:	0f 84 42 fa ff ff    	je     407b07 <printf_parse+0x5e7>
  4080c5:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  4080ca:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  4080cf:	e9 e9 f7 ff ff       	jmpq   4078bd <printf_parse+0x39d>
                      for (np = cp; *np >= '0' && *np <= '9'; np++)
  4080d4:	48 89 d1             	mov    %rdx,%rcx
  4080d7:	0f b6 71 01          	movzbl 0x1(%rcx),%esi
  4080db:	48 83 c1 01          	add    $0x1,%rcx
  4080df:	8d 7e d0             	lea    -0x30(%rsi),%edi
  4080e2:	40 80 ff 09          	cmp    $0x9,%dil
  4080e6:	76 ef                	jbe    4080d7 <printf_parse+0xbb7>
                      if (*np == '$')
  4080e8:	40 80 fe 24          	cmp    $0x24,%sil
  4080ec:	0f 85 bc f7 ff ff    	jne    4078ae <printf_parse+0x38e>
                          size_t n = 0;
  4080f2:	31 c9                	xor    %ecx,%ecx
  4080f4:	eb 11                	jmp    408107 <printf_parse+0xbe7>
                          for (np = cp; *np >= '0' && *np <= '9'; np++)
  4080f6:	8d 70 d0             	lea    -0x30(%rax),%esi
  4080f9:	48 83 c2 01          	add    $0x1,%rdx
  4080fd:	40 80 fe 09          	cmp    $0x9,%sil
  408101:	0f 87 24 01 00 00    	ja     40822b <printf_parse+0xd0b>
                            n = xsum (xtimes (n, 10), *np - '0');
  408107:	48 be 99 99 99 99 99 	movabs $0x1999999999999999,%rsi
  40810e:	99 99 19 
  408111:	83 e8 30             	sub    $0x30,%eax
  408114:	49 89 d7             	mov    %rdx,%r15
  408117:	48 98                	cltq   
  408119:	48 39 f1             	cmp    %rsi,%rcx
  40811c:	0f 87 fd 00 00 00    	ja     40821f <printf_parse+0xcff>
  408122:	48 8d 0c 89          	lea    (%rcx,%rcx,4),%rcx
  408126:	48 01 c9             	add    %rcx,%rcx
  408129:	48 01 c8             	add    %rcx,%rax
  40812c:	48 89 c3             	mov    %rax,%rbx
  40812f:	48 89 c1             	mov    %rax,%rcx
  return (sum >= size1 ? sum : SIZE_MAX);
  408132:	0f be 42 01          	movsbl 0x1(%rdx),%eax
  408136:	73 be                	jae    4080f6 <printf_parse+0xbd6>
                          for (np = cp; *np >= '0' && *np <= '9'; np++)
  408138:	8d 48 d0             	lea    -0x30(%rax),%ecx
  40813b:	80 f9 09             	cmp    $0x9,%cl
  40813e:	0f 87 c3 f9 ff ff    	ja     407b07 <printf_parse+0x5e7>
  408144:	48 83 c2 01          	add    $0x1,%rdx
                            n = xsum (xtimes (n, 10), *np - '0');
  408148:	83 e8 30             	sub    $0x30,%eax
  40814b:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  408152:	49 89 d7             	mov    %rdx,%r15
  408155:	48 98                	cltq   
  408157:	eb d0                	jmp    408129 <printf_parse+0xc09>
  408159:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  if (a->arg != a->direct_alloc_arg)
  40815d:	49 39 cb             	cmp    %rcx,%r11
  408160:	0f 85 c0 fd ff ff    	jne    407f26 <printf_parse+0xa06>
  408166:	e9 cd fd ff ff       	jmpq   407f38 <printf_parse+0xa18>
  40816b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                    n = xsum (xtimes (n, 10), *np - '0');
  408170:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  408177:	e9 5f f9 ff ff       	jmpq   407adb <printf_parse+0x5bb>
  40817c:	49 89 cd             	mov    %rcx,%r13
                  if (size_overflow_p (n))
  40817f:	49 83 ed 01          	sub    $0x1,%r13
  408183:	49 83 fd fd          	cmp    $0xfffffffffffffffd,%r13
  408187:	0f 87 7a f9 ff ff    	ja     407b07 <printf_parse+0x5e7>
                  cp = np + 1;
  40818d:	0f b6 58 02          	movzbl 0x2(%rax),%ebx
  408191:	48 8d 68 02          	lea    0x2(%rax),%rbp
  408195:	e9 d4 f4 ff ff       	jmpq   40766e <printf_parse+0x14e>
                  REGISTER_ARG (dp->precision_arg_index, TYPE_INT);
  40819a:	48 89 f7             	mov    %rsi,%rdi
  40819d:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  4081a2:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  4081a7:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
  4081ac:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  4081b1:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  4081b6:	e8 b5 93 ff ff       	callq  401570 <malloc@plt>
  4081bb:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  4081c0:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  4081c5:	48 85 c0             	test   %rax,%rax
  4081c8:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
  4081cd:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  4081d2:	48 89 c7             	mov    %rax,%rdi
  4081d5:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  4081da:	0f 84 58 fd ff ff    	je     407f38 <printf_parse+0xa18>
  4081e0:	49 8b 16             	mov    (%r14),%rdx
  4081e3:	48 89 ce             	mov    %rcx,%rsi
  4081e6:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  4081eb:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
  4081f0:	48 c1 e2 05          	shl    $0x5,%rdx
  4081f4:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  4081f9:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
  4081fe:	e8 3d 93 ff ff       	callq  401540 <memcpy@plt>
  408203:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  408208:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
  40820d:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  408212:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
  408217:	48 89 c1             	mov    %rax,%rcx
  40821a:	e9 dc fd ff ff       	jmpq   407ffb <printf_parse+0xadb>
                            n = xsum (xtimes (n, 10), *np - '0');
  40821f:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  408226:	e9 fe fe ff ff       	jmpq   408129 <printf_parse+0xc09>
                          if (size_overflow_p (n))
  40822b:	48 83 eb 01          	sub    $0x1,%rbx
  40822f:	48 83 fb fd          	cmp    $0xfffffffffffffffd,%rbx
  408233:	0f 87 ce f8 ff ff    	ja     407b07 <printf_parse+0x5e7>
                          dp->precision_arg_index = n - 1;
  408239:	49 89 5c 24 40       	mov    %rbx,0x40(%r12)
                          cp = np + 1;
  40823e:	49 83 c7 02          	add    $0x2,%r15
                  if (dp->precision_arg_index == ARG_NONE)
  408242:	e9 76 f6 ff ff       	jmpq   4078bd <printf_parse+0x39d>
              cp++;
  408247:	48 89 c5             	mov    %rax,%rbp
                  for (; *cp >= '0' && *cp <= '9'; cp++)
  40824a:	ba 01 00 00 00       	mov    $0x1,%edx
  40824f:	e9 25 f9 ff ff       	jmpq   407b79 <printf_parse+0x659>
                        n = xsum (xtimes (n, 10), *np - '0');
  408254:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  40825b:	e9 13 fa ff ff       	jmpq   407c73 <printf_parse+0x753>
                      if (size_overflow_p (n))
  408260:	48 83 eb 01          	sub    $0x1,%rbx
  408264:	48 83 fb fd          	cmp    $0xfffffffffffffffd,%rbx
  408268:	0f 87 99 f8 ff ff    	ja     407b07 <printf_parse+0x5e7>
                      dp->width_arg_index = n - 1;
  40826e:	49 89 5c 24 28       	mov    %rbx,0x28(%r12)
                      cp = np + 1;
  408273:	48 83 c5 02          	add    $0x2,%rbp
              if (dp->width_arg_index == ARG_NONE)
  408277:	e9 16 f5 ff ff       	jmpq   407792 <printf_parse+0x272>
  40827c:	48 89 cf             	mov    %rcx,%rdi
  40827f:	4c 89 d9             	mov    %r11,%rcx
  408282:	e9 c6 fd ff ff       	jmpq   40804d <printf_parse+0xb2d>
  408287:	48 89 c7             	mov    %rax,%rdi
  40828a:	4c 89 d9             	mov    %r11,%rcx
  40828d:	e9 4e ff ff ff       	jmpq   4081e0 <printf_parse+0xcc0>
  408292:	48 89 d1             	mov    %rdx,%rcx
  408295:	e9 c3 fe ff ff       	jmpq   40815d <printf_parse+0xc3d>
  40829a:	48 89 c7             	mov    %rax,%rdi
  40829d:	4c 89 d9             	mov    %r11,%rcx
  4082a0:	e9 39 fc ff ff       	jmpq   407ede <printf_parse+0x9be>
  4082a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4082ac:	00 00 00 
  4082af:	90                   	nop

00000000004082b0 <__libc_csu_init>:
  4082b0:	41 57                	push   %r15
  4082b2:	41 56                	push   %r14
  4082b4:	49 89 d7             	mov    %rdx,%r15
  4082b7:	41 55                	push   %r13
  4082b9:	41 54                	push   %r12
  4082bb:	4c 8d 25 2e 3a 20 00 	lea    0x203a2e(%rip),%r12        # 60bcf0 <__frame_dummy_init_array_entry>
  4082c2:	55                   	push   %rbp
  4082c3:	48 8d 2d 2e 3a 20 00 	lea    0x203a2e(%rip),%rbp        # 60bcf8 <__init_array_end>
  4082ca:	53                   	push   %rbx
  4082cb:	41 89 fd             	mov    %edi,%r13d
  4082ce:	49 89 f6             	mov    %rsi,%r14
  4082d1:	4c 29 e5             	sub    %r12,%rbp
  4082d4:	48 83 ec 08          	sub    $0x8,%rsp
  4082d8:	48 c1 fd 03          	sar    $0x3,%rbp
  4082dc:	e8 37 90 ff ff       	callq  401318 <_init>
  4082e1:	48 85 ed             	test   %rbp,%rbp
  4082e4:	74 20                	je     408306 <__libc_csu_init+0x56>
  4082e6:	31 db                	xor    %ebx,%ebx
  4082e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4082ef:	00 
  4082f0:	4c 89 fa             	mov    %r15,%rdx
  4082f3:	4c 89 f6             	mov    %r14,%rsi
  4082f6:	44 89 ef             	mov    %r13d,%edi
  4082f9:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  4082fd:	48 83 c3 01          	add    $0x1,%rbx
  408301:	48 39 dd             	cmp    %rbx,%rbp
  408304:	75 ea                	jne    4082f0 <__libc_csu_init+0x40>
  408306:	48 83 c4 08          	add    $0x8,%rsp
  40830a:	5b                   	pop    %rbx
  40830b:	5d                   	pop    %rbp
  40830c:	41 5c                	pop    %r12
  40830e:	41 5d                	pop    %r13
  408310:	41 5e                	pop    %r14
  408312:	41 5f                	pop    %r15
  408314:	c3                   	retq   
  408315:	90                   	nop
  408316:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40831d:	00 00 00 

0000000000408320 <__libc_csu_fini>:
  408320:	f3 c3                	repz retq 
  408322:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  408329:	00 00 00 
  40832c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000408330 <atexit>:
  408330:	48 8b 15 b1 3e 20 00 	mov    0x203eb1(%rip),%rdx        # 60c1e8 <__dso_handle>
  408337:	31 f6                	xor    %esi,%esi
  408339:	e9 02 93 ff ff       	jmpq   401640 <__cxa_atexit@plt>

Disassembly of section .fini:

0000000000408340 <_fini>:
  408340:	48 83 ec 08          	sub    $0x8,%rsp
  408344:	48 83 c4 08          	add    $0x8,%rsp
  408348:	c3                   	retq   
